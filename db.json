{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/uploads/avatar.jpeg","path":"uploads/avatar.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3ac3f56785bd95e4f933365e519a257a7f05b641","modified":1630470918885},{"_id":"source/_posts/TCP介绍.md","hash":"1fd388c4dabd12eb08ef9058731070674a9dcc8b","modified":1638975663628},{"_id":"source/_posts/GO的GMP模型.md","hash":"a8613173eb0e6cf44a85d51e81b562b536868f65","modified":1639120987767},{"_id":"source/_posts/GO的channel.md","hash":"299ca9c6d77ad0103d8c28033029e538bae3736e","modified":1639121029977},{"_id":"source/_posts/GO的面试题.md","hash":"e0b07c5c515c04ae22c6933f8042f1b03cc14f30","modified":1638973025156},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1630470918885},{"_id":"source/_posts/prometheus.md","hash":"b923d67411c65e3ded64307a81c58d87d1ee6412","modified":1639121847975},{"_id":"source/_posts/mysql索引介绍1.md","hash":"a438fc44fcaf3ab89c7f37c67c7cb12d9bbc73d4","modified":1630470918885},{"_id":"source/_posts/rabbitMQ介绍1.md","hash":"9f453f355a18fcb2d3141ae5a21ca75aba1cbde4","modified":1630470918886},{"_id":"source/_posts/redis.md","hash":"ae87a731d942fd2b0f3f8839afefb4a898327b4d","modified":1630470918886},{"_id":"source/_posts/二分查找.md","hash":"c8df4c9bf153e34e37980ba1892b056cf471d836","modified":1639121687782},{"_id":"source/_posts/二叉树遍历.md","hash":"fa05ce51a8f2cde8d8d26b37f1496bdada96a839","modified":1639121677964},{"_id":"source/_posts/git版本回退.md","hash":"2cf633e2255f608d63bb37c27badd1ce368d0b6f","modified":1639016008180},{"_id":"source/tags/index.md","hash":"207b6b87ac42b0ec1c17a35af6370d017291ba80","modified":1630470918886},{"_id":"source/categories/index.md","hash":"0cc079d022ce585726850f869e5b5fde08c76cdf","modified":1630470918886},{"_id":"source/_posts/protoc使用.md","hash":"3a9dd58d87e1c08b27ea9f98fa9250b304dd4bea","modified":1639015965552},{"_id":"source/_posts/服务部署.md","hash":"d9495b186dfd1b8d0e85b119ba47922b0d1e4ab0","modified":1638498904166},{"_id":"source/uploads/avatar.jpeg","hash":"a34b750cfe46bc93b918f69bc04d512c8f6a3ab5","modified":1630470918887},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1638936060101},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1638936060101},{"_id":"themes/next/_config.yml","hash":"d1aa1958a6c594612757326d6f0ff29cb354e140","modified":1639101834646},{"_id":"themes/next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1638936060101},{"_id":"themes/next/_vendors.yml","hash":"c88f3a82361ddb32cf62846a2ae1b7192b7e3af2","modified":1638936060101},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1638936060099},{"_id":"themes/next/package.json","hash":"cc9a8e5bd83dd293552ed7cc1d0d2304a6b448ba","modified":1638936060110},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1638936060101},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1638936060101},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1638936060099},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1638936060099},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1638936060098},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1638936060099},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1638936060099},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1638936060100},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1638936060100},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1638936060100},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1638936060110},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1638936060100},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1638936060100},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1638936060102},{"_id":"themes/next/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1638936060100},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1638936060102},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1638936060099},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1638936060102},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1638936060103},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1638936060103},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1638936060103},{"_id":"themes/next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1638936060103},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1638936060103},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1638936060102},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1638936060103},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1638936060103},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1638936060103},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1638936060103},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1638936060103},{"_id":"themes/next/languages/default.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1638936060103},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1638936060104},{"_id":"themes/next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1638936060104},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1638936060104},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1638936060104},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1638936060103},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1638936060104},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1638936060104},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1638936060104},{"_id":"themes/next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1638936060104},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1638936060104},{"_id":"themes/next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1638936060104},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1638936060104},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1638936060110},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1638936060110},{"_id":"themes/next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1638936060110},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1638936060110},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1638936060099},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1638936060110},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1638936060110},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1638936060099},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1638936060100},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1638936060125},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1638936060100},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1638936060099},{"_id":"themes/next/.github/workflows/linter.yml","hash":"276a91c7179926f410c784c99fa635dc0a016c2d","modified":1638936060100},{"_id":"themes/next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1638936060100},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1638936060099},{"_id":"themes/next/.github/workflows/stale.yml","hash":"0feb3e1afd1b2dca9dbc7811ce4cf5520e2d186c","modified":1638936060101},{"_id":"themes/next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1638936060101},{"_id":"themes/next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1638936060110},{"_id":"themes/next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1638936060102},{"_id":"themes/next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1638936060102},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1638936060112},{"_id":"themes/next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1638936060112},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1638936060102},{"_id":"themes/next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":1638936060112},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1638936060112},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1638936060112},{"_id":"themes/next/scripts/filters/minify.js","hash":"0af64049db8188d5f8cc226b353e0d7909819feb","modified":1638936060112},{"_id":"themes/next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1638936060112},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1638936060112},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1638936060112},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1638936060100},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1638936060113},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1638936060112},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1638936060113},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1638936060102},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1638936060113},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1638936060113},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1638936060113},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1638936060113},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1638936060113},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1638936060113},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1638936060113},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1638936060113},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1638936060113},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1638936060113},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1638936060121},{"_id":"themes/next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1638936060119},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1638936060122},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1638936060122},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1638936060122},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1638936060122},{"_id":"themes/next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1638936060121},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1638936060122},{"_id":"themes/next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1638936060122},{"_id":"themes/next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1638936060122},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1638936060121},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1638936060121},{"_id":"themes/next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1638936060122},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1638936060121},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1638936060121},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1638936060105},{"_id":"themes/next/layout/_macro/post.njk","hash":"d0ed41b9b05254e19d051b5f91fdcaa125ee7ca6","modified":1638936060105},{"_id":"themes/next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1638936060124},{"_id":"themes/next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1638936060105},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1638936060105},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1638936060121},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1638936060122},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1638936060106},{"_id":"themes/next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1638936060105},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1638936060107},{"_id":"themes/next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1638936060109},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1638936060108},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1638936060109},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1638936060106},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1638936060107},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1638936060109},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1638936060107},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1638936060109},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1638936060125},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1638936060125},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1638936060125},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1638936060125},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1638936060125},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1638936060126},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1638936060125},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1638936060126},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1638936060125},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1638936060126},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1638936060125},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b0ced2583fdd505da3ef27a9db9c55cc7b936732","modified":1638936060111},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1638936060125},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1638936060125},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":1638936060111},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1638936060126},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1638936060126},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1638936060111},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1638936060111},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1638936060111},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1638936060111},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1638936060111},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1638936060111},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1638936060111},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1638936060125},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1638936060112},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1638936060111},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1638936060111},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1638936060112},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1638936060111},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1638936060121},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1638936060121},{"_id":"themes/next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1638936060121},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1638936060123},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1638936060121},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1638936060124},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1638936060122},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1638936060124},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1638936060121},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1638936060124},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1638943812102},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1638943812102},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"3a18d68b0673c0e79faecc8503268ac7bec7d30e","modified":1638943812102},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"0ba5a24a483f36166f0cb871bd30f4c7467f3593","modified":1638943674837},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1638943674838},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1638943674837},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"d3c094aaef1431fbc9df333529a7b1789ccd134c","modified":1638936060105},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1638943674837},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"9167e429a459686c9fc140790124a46d677e6b15","modified":1638936060105},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1638936060105},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1638936060105},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1638936060106},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1638936060106},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1638936060105},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1638936060106},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1638936060106},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1638936060106},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1638936060106},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":1638936060105},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1638936060106},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1638936060106},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1638936060106},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1638936060106},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1638936060107},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1638936060107},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1638936060107},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1638936060107},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1638936060107},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1638936060107},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1638936060107},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1638936060108},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1638936060107},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1638936060108},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1638936060108},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1638936060108},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1638936060108},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1638936060108},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1638936060108},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1638936060108},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1638936060108},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1638936060108},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1638936060108},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1638936060108},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1638936060109},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1638936060109},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1638936060109},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1638936060109},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1638936060108},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1638936060109},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1638936060109},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1638936060110},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1638936060109},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1638936060109},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1638936060110},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1638936060109},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1638936060114},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1638936060117},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1638936060117},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1638936060117},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1638936060119},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1638936060119},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1638936060116},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1638936060118},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1638936060120},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1638936060116},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1638936060119},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1638936060119},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1638936060119},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1638936060119},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1638936060119},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1638936060120},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1638936060120},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1638936060123},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1638936060123},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1638936060123},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1638936060123},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1638936060123},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1638936060123},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1638936060123},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1638936060123},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1638936060123},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1638936060123},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1638936060123},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1638936060124},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1638936060123},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1638936060124},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1638936060124},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1638936060123},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1638936060124},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1638936060124},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1638936060124},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1638943674833},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1638936060124},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1638943674835},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1638936060124},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"80eecf0c5c7f21b2678dc1c329f74de19b6a3a67","modified":1638943674831},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1638943812099},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"f79e33176f8d3e893553102df6eb347a74fd078f","modified":1638943812101},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"ba5d1859d9d18ddaeda3366fba543bbc6f2b620b","modified":1638943674838},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"e75da451a46c0b8f31b9724dc967fbb04cedacd6","modified":1638943812102},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1638943671120},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"1a669ea6243f62a7f4c02d82225d6a49fdadb567","modified":1638943812097},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1638943674837},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1638936060114},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1638943808873},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1638936060114},{"_id":"themes/next/source/lib/canvas-ribbon/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1638943812102},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1638936060114},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"fb0b9eaca498be8af0bc430171a17becf87f8554","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1638936060115},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1638936060115},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1638936060117},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"0b3e2696eca39781c3524b2c5a2555ebc616e6e8","modified":1638936060118},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1638936060116},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1638936060119},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1638936060118},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1638936060119},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1638936060118},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1638936060116},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1638936060117},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1638936060117},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1638943671120},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1638943671121},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1638943671120},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1638943671122},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1638943671121},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1638943671122},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1638943671122},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1638943671122},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1638943671121},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1638943671121},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"c10a8021d2b6d1541cbbe3536a51f0c17fa101f7","modified":1638943674834},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1638943671122},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1638943671122},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/HEAD","hash":"87ce4e4c6572d63987ab03bf0564e3d6c6c87202","modified":1638943812100},{"_id":"themes/next/source/lib/canvas-ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1638943808872},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1638943671123},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1638943808874},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1638943671121},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1638943808875},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1638943808873},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1638943808873},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1638943808875},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1638943808876},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1638943808874},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1638943808873},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1638943808874},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1638943808876},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1638943808875},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1638943808876},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1638943808875},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"473e30291eac5f6d120dfe823b29ad4b2218f05a","modified":1638943674834},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/pack/pack-8614499ac34603e5f62a25e1ed7138332befa370.idx","hash":"7b050e7c7c4ed82ff61ea69f13085b11bac423cf","modified":1638943674813},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/heads/master","hash":"16bd947558482613ed699f6cd50bfef39a7837da","modified":1638943812100},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"c10a8021d2b6d1541cbbe3536a51f0c17fa101f7","modified":1638943674834},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1638943674833},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/heads/master","hash":"87ce4e4c6572d63987ab03bf0564e3d6c6c87202","modified":1638943812100},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/pack/pack-8614499ac34603e5f62a25e1ed7138332befa370.pack","hash":"455c5c532eee08dd88c8295639309b05fccbb64c","modified":1638943674813},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"c10a8021d2b6d1541cbbe3536a51f0c17fa101f7","modified":1638943674833},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1638943812099},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/pack/pack-51ad3c571540d30ecb2fd40cca6293673eef2128.pack","hash":"721d98e54084ae6c5a293eb8f4f49db4f530f135","modified":1638943812085},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"87ce4e4c6572d63987ab03bf0564e3d6c6c87202","modified":1638943812099},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/pack/pack-51ad3c571540d30ecb2fd40cca6293673eef2128.idx","hash":"b3ed21853151871bcff26c186e8f7f91d585c99e","modified":1638943812086},{"_id":"public/search.xml","hash":"d973be5581ccc95e0a994ab99c841ded6d3f45cf","modified":1639633295042},{"_id":"public/tags/index.html","hash":"89a729e2bb457c0c60e9dd02cc631e51b94deab1","modified":1639585205699},{"_id":"public/categories/index.html","hash":"c1b3e93fd536ef8432c99204af63c8f48b576880","modified":1639585205699},{"_id":"public/2021/09/01/hello-world/index.html","hash":"4f518d32885862ec12051034d10f49656b7e88d0","modified":1638973029640},{"_id":"public/2021/08/19/mysql索引介绍1/index.html","hash":"821f03f0a6ce924fd7aed128cc2b461263acffb9","modified":1638972816175},{"_id":"public/2021/08/19/redis/index.html","hash":"6141f9bead9cc694533ea164272231d45700bf23","modified":1638973029640},{"_id":"public/2021/08/19/rabbitMQ介绍1/index.html","hash":"2465d9e7b7e97abda29e122f793a808295025416","modified":1638972741361},{"_id":"public/2021/08/19/二分查找/index.html","hash":"63beb5e8f4e55910517e7888b77b0fd39a28949b","modified":1639121522724},{"_id":"public/2021/08/19/二叉树遍历/index.html","hash":"a390ee71d4f7289e47cb38e8213c7332e333e125","modified":1639585205699},{"_id":"public/2021/08/19/prometheus/index.html","hash":"742589f6a86a3ee96589c1f0f6797173ade55bf5","modified":1639121522724},{"_id":"public/2021/08/19/服务部署/index.html","hash":"3c35c2bd6eedd903b0fecd65eabbface9809915f","modified":1639121522724},{"_id":"public/archives/page/2/index.html","hash":"86352357a96592b45c64fe279e05aa9bbd4721ae","modified":1639585205699},{"_id":"public/archives/2021/index.html","hash":"b50fde4f512788f2ff3bbc3c1f33344f8a176910","modified":1639585205699},{"_id":"public/archives/index.html","hash":"3d6305640517753af9d3586f9f3bb52429e362e9","modified":1639585205699},{"_id":"public/archives/2021/page/2/index.html","hash":"efd383d874d501771dd3e6059af983ac1ab42757","modified":1639585205699},{"_id":"public/archives/2021/08/index.html","hash":"796346623724e9b95dd0e8828871fab4d7116560","modified":1639585205699},{"_id":"public/archives/2021/09/index.html","hash":"6dfc8e0b88f4fa6dafc819eef68b81f300202399","modified":1639585205699},{"_id":"public/archives/2021/08/page/2/index.html","hash":"6e8db4a53d30e81df5c8566f8b084697aeb5436c","modified":1639121522724},{"_id":"public/archives/2021/11/index.html","hash":"f2a2981c3550fdb5cbfc7bcc12d46042602dd8cc","modified":1639585205699},{"_id":"public/archives/2021/10/index.html","hash":"5e84e9c65a0392447debefe4a870c9cc5f1549c5","modified":1639585205699},{"_id":"public/tags/GO/index.html","hash":"cc109811505dedf151157e74edfa0a22418356ee","modified":1639633295042},{"_id":"public/tags/并发编程/index.html","hash":"4061f4f889ff7866bdb5de79e9ca8c989838511a","modified":1639585205699},{"_id":"public/tags/TCP/index.html","hash":"223c9f0ec1c2fdac269c1e2f88092d3b6f491146","modified":1639585205699},{"_id":"public/tags/git/index.html","hash":"87f862abda5e3ad04296c780763aec092d101c4d","modified":1639585205699},{"_id":"public/categories/网络/index.html","hash":"c9b1499eb569fddd11729b13fa5d097e28a5878a","modified":1639585205699},{"_id":"public/2021/11/12/protoc使用/index.html","hash":"9c100dbe58813adc6cf7d54f2da96f06b041facd","modified":1639585205699},{"_id":"public/2021/10/10/git版本回退/index.html","hash":"26402a3a3ec237c6852c8b30e0ebbc2889b3b70c","modified":1639585205699},{"_id":"public/2021/08/19/GO的面试题/index.html","hash":"ffa7ccdecba7364f3a44e07f7bc85cc605bca6c6","modified":1638973029640},{"_id":"public/2021/08/19/GO的channel/index.html","hash":"ffe74b04d95e56ec800dd60ab85f670fbf7bd761","modified":1639121044183},{"_id":"public/2021/08/19/GO的GMP模型/index.html","hash":"2412ac22351fa76f4b03b666200e1fa846eb978a","modified":1639121044183},{"_id":"public/2021/08/19/TCP介绍/index.html","hash":"dc1c77ebb67d5f0c2904d5840b578099ad90f3b5","modified":1638976281158},{"_id":"public/index.html","hash":"89dd8d7182cf6d70f0a2549dcdb5906fc32d4415","modified":1639585205699},{"_id":"public/page/2/index.html","hash":"53d1baf1dda10f942d0b5e7553070eaef0c873f8","modified":1639633295042},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1638944350885},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1638944350885},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1638944350885},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1638944350885},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1638944350885},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1638944350885},{"_id":"public/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1638944350885},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1638944350885},{"_id":"public/uploads/avatar.jpeg","hash":"a34b750cfe46bc93b918f69bc04d512c8f6a3ab5","modified":1638944350885},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1638944350885},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1638944350885},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1638944350885},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1638944350885},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1638944350885},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1638944350885},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1638944350885},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1638944350885},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1638944350885},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1638944350885},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1638944350885},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1638944350885},{"_id":"public/lib/canvas-nest/README.html","hash":"6a2eaecc6783b4a497f96d980d583b17af21caa2","modified":1638944350885},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1638944350885},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1638944350885},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1638944350885},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1638944350885},{"_id":"public/lib/canvas-ribbon/README.html","hash":"1b6d10c79836d002d90f4bcf35f498f1bf38c7ee","modified":1638944350885},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1638944350885},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1638944350885},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1638944350885},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1638944350885},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1638944350885},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1638944350885},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1638944350885},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1638944350885},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1638944350885},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1638944350885},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1638944350885},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1638944350885},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1638944350885},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1638944350885},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1638944350885},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1638944350885},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1638944350885},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1638944350885},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1638944350885},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1638944350885},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1638944350885},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1638944350885},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1638944350885},{"_id":"public/css/main.css","hash":"78ff91686a36b3daf40900547c5bbba5de590d94","modified":1638944350885},{"_id":"source/_posts/rabbitMQ介绍.md","hash":"f7859f8350de0f847db87560ff41a166b87b5ae7","modified":1639121654154},{"_id":"source/_posts/mysql索引介绍.md","hash":"abeedb81f751ed8cd2ce4ac8523dfe3066b3a548","modified":1639121830932},{"_id":"themes/next/languages/zh-tw.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1638972699615},{"_id":"themes/next/languages/zh-hk.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1638972699615},{"_id":"public/2021/08/19/mysql索引介绍/index.html","hash":"06f4447325c1972ceb7b8dd833d9e95c65e8944a","modified":1639121522724},{"_id":"public/2021/08/19/rabbitMQ介绍/index.html","hash":"71e25df71a821c029ef4e144dd9c766e62a8afa1","modified":1639121522724},{"_id":"source/_posts/redis数据类型.md","hash":"5f05c97cffa3901bbf40af4c1b916b76faab5c3c","modified":1639121640191},{"_id":"source/_posts/GO 99问.md","hash":"1991c8416a71d57d817eae74eaf59c8d5fca7954","modified":1638974722878},{"_id":"public/2021/08/19/redis数据类型/index.html","hash":"e7fa0aeaadac241694c0950de22d36dac6c64512","modified":1639121522724},{"_id":"public/2021/08/19/GO 99问/index.html","hash":"5d6e7d05ee9589687fb768cb04cda5f43c82d06d","modified":1639121044183},{"_id":"public/tags/redis/index.html","hash":"99da05783e3501b4bdb48f7e98585137fad1ae77","modified":1639585205699},{"_id":"source/_posts/go实现keycloak适配器.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1638976157692},{"_id":"public/2021/12/08/go实现keycloak适配器/index.html","hash":"0a2093ecd8349b5acc24063986fcf091378b00d1","modified":1638976281158},{"_id":"public/archives/2021/12/index.html","hash":"509df3ce75db8504712080e489b45ccfa49b61e0","modified":1639585205699},{"_id":"public/categories/数据库/index.html","hash":"311988e56ab5d921773bf028b3e5126a4a4615cf","modified":1639585205699},{"_id":"public/tags/mysql/index.html","hash":"31c1cdea2ebf51209610d2d79bda51a7e8ae57a0","modified":1639585205699},{"_id":"source/_posts/go实现keycloak adaptor.md","hash":"e405046cac20aed5f1ef6ec33990ef50ad65cbe9","modified":1639120838756},{"_id":"source/_posts/TCP三次握手和四次挥手.md","hash":"918c4504da7e2eb434c210d4c3b4172f2ce73748","modified":1639498898592},{"_id":"public/2021/12/09/go实现keycloak adaptor/index.html","hash":"0467bffb5d7dd0e48b420fcf9945305470620012","modified":1639585205699},{"_id":"public/categories/GO/index.html","hash":"14661f7ec67cfe2a7487e76684fb1d891f44102a","modified":1639585205699},{"_id":"public/categories/git/index.html","hash":"77ee2ce3600b38a375bb7ba3eae670d233b12db0","modified":1639585205699},{"_id":"public/tags/go/index.html","hash":"6ccdcfdc827a2e0bb1d2610b8228a193c0f533d5","modified":1639102023369},{"_id":"public/tags/认证/index.html","hash":"fd50c26ca5d9b948312036bb140e60a207437a60","modified":1639585205699},{"_id":"public/2021/08/19/TCP三次握手和四次挥手/index.html","hash":"85c8540a18dd8f7e0ff1259f11040707c211c378","modified":1639121522724},{"_id":"source/_posts/go的init函数.md","hash":"250dd03a5a5270b7d0594c1ff16b71e021b69863","modified":1639120994064},{"_id":"public/2021/12/10/go的init函数/index.html","hash":"baddb44cb51250a7e5a63bcd3bc1efbab8f003fc","modified":1639121044183},{"_id":"public/tags/GO开发/index.html","hash":"f168c86b5ef1d53d939065a94b532300d3d8467a","modified":1639585205699},{"_id":"public/tags/go开发/index.html","hash":"b34fb8deddc3e8ff194a014b33627d2e7f17afee","modified":1639585205699},{"_id":"source/_posts/go调度模型-GMP.md","hash":"a672ab5ba65387ca4cfdf6e431c37ae720794f9a","modified":1639121794496},{"_id":"source/_posts/go初始化函数init.md","hash":"33800d8045288c2de41beef7837168ed4dc0105e","modified":1639121496928},{"_id":"source/_posts/go之xx问.md","hash":"69d7263825f4cb46a21c3ba29905d9ce468aee9c","modified":1639121807417},{"_id":"source/_posts/go并发通信-channel.md","hash":"cccc6e42c5aca814ddc87748f50e1e16fb6a4e01","modified":1639121752519},{"_id":"source/_posts/go初始化函数-init.md","hash":"24fe18407ff84418a152428f8bb49781ec2e8ad3","modified":1639633264961},{"_id":"public/2021/12/10/go初始化函数-init/index.html","hash":"6cf012d3d5997b77e1d3ce437a80497157ea5d7d","modified":1639498812158},{"_id":"public/2021/12/10/go初始化函数init/index.html","hash":"ff1cf1c15311f9645d0c8190c8749b4e3d641288","modified":1639121522724},{"_id":"public/2021/08/19/go之xx问/index.html","hash":"c58d9bc43a6471013ac979f62af62b6a7ddda0f5","modified":1639121522724},{"_id":"public/2021/08/19/go调度模型-GMP/index.html","hash":"bb89064e51e1f90dd2d6f8305f37518c5fe3b0cb","modified":1639121522724},{"_id":"public/2021/08/19/go并发通信-channel/index.html","hash":"290a060774ca5099e1b9723b41a1c349be0ecc4e","modified":1639121522724},{"_id":"source/_posts/服务部署nginx+keepalived.md","hash":"c17967f9d1695a44f655b955ffbdc755a226f4a2","modified":1639121733061},{"_id":"public/2021/03/23/prometheus/index.html","hash":"c9ffccaf78904d06d149048548428fc14d63f35a","modified":1639585205699},{"_id":"public/2020/08/19/redis数据类型/index.html","hash":"5aba7dcd478ec4e8a5cef87bb229bba25f6eef78","modified":1639585205699},{"_id":"public/2021/08/22/二分查找/index.html","hash":"5ebd21a1162b76254ae06df9d2ff6305d4d7a52a","modified":1639585205699},{"_id":"public/2020/05/19/服务部署nginx+keepalived/index.html","hash":"be9036fab54e69dbe7e7974ed006346d79d8a502","modified":1639585205699},{"_id":"public/2020/06/19/rabbitMQ介绍/index.html","hash":"9b27bb369e92b8d8f13ce914a36a95ab55e28975","modified":1639585205699},{"_id":"public/2020/03/12/mysql索引介绍/index.html","hash":"905aad8e565b909b85e3260b6d1b93805d02451d","modified":1639585205699},{"_id":"public/archives/2020/index.html","hash":"2cca532e5311afce3937acb3d99544cef30d0b70","modified":1639585205699},{"_id":"public/archives/2020/03/index.html","hash":"8baf96f8a5a306a4d02aeecb0081be0ded00b5ff","modified":1639585205699},{"_id":"public/archives/2020/05/index.html","hash":"945231fc3e3d5ba5b44b838c1327aed6c8e8500e","modified":1639585205699},{"_id":"public/archives/2020/06/index.html","hash":"91833397a1ee073da204f9005059428505a46991","modified":1639585205699},{"_id":"public/archives/2020/08/index.html","hash":"659d1f6ce91072f174a69bbe68a557b3e22d57dc","modified":1639585205699},{"_id":"public/archives/2020/11/index.html","hash":"6a42720be47c42e82e5a1873469f81771f70f409","modified":1639585205699},{"_id":"public/archives/2021/03/index.html","hash":"ab6fa122347d08b119ed9d42c24e644a08ba2f01","modified":1639585205699},{"_id":"public/archives/2021/05/index.html","hash":"398d25d09b4bcbaa27c0776276fc8ac987cb58f6","modified":1639585205699},{"_id":"public/2021/08/09/go之xx问/index.html","hash":"13332c0d7d3832e560479053bde11040d59ba27c","modified":1639585205699},{"_id":"public/2021/08/09/TCP三次握手和四次挥手/index.html","hash":"49fe26c3069a7c6bb9fd1ee081247e640ca3d57d","modified":1639498812158},{"_id":"public/2021/05/22/go并发通信-channel/index.html","hash":"6de748f2ebdaeb649ba3854b37cd87eec95cb8dc","modified":1639585205699},{"_id":"public/2020/11/19/go调度模型-GMP/index.html","hash":"479366250c49261c618fb6aa585342a3e52112ee","modified":1639585205699},{"_id":"source/_posts/go获取ip地理信息.md","hash":"0ac1c5c2fc66e029e7cdcb3e40bb9e2cc3df6660","modified":1639498806571},{"_id":"public/2021/12/14/go获取ip地理信息/index.html","hash":"e45933b294a592ef92eff18396f332b9f8ec9651","modified":1639498498871},{"_id":"source/_posts/go参数校验.md","hash":"6c6251c5a83adaded84ca8049f0e92cc2b9d40a3","modified":1639585067485},{"_id":"source/_posts/go实现动态鉴权.md","hash":"afa06e3f1d8d01250a6d268fb03fef0dc7d693c6","modified":1639498739065},{"_id":"source/_posts/go实现国际化.md","hash":"d7472c80fa364b7278ab93ce4650b9ecc387a003","modified":1639498784418},{"_id":"public/2021/12/15/go参数校验/index.html","hash":"a3a025cbbc72889a68b9883ff7e2a7c6515dfdd0","modified":1639585205699},{"_id":"public/2021/09/15/go实现国际化/index.html","hash":"9ea0dd4d2fc902117065c33a76580d736fa4c4a0","modified":1639585205699},{"_id":"public/2021/10/15/go实现动态鉴权/index.html","hash":"7823656781f58b066f8ffecdc2fd29ee5b9d7070","modified":1639585205699},{"_id":"public/archives/2021/06/index.html","hash":"9948f4f2dd839da4d149d9457d38f5cc33544204","modified":1639585205699},{"_id":"public/2021/06/14/go获取ip地理信息/index.html","hash":"e84d57d7b05b674452a4cbfc271fe5430c2debfb","modified":1639585205699},{"_id":"public/2020/04/10/go初始化函数-init/index.html","hash":"616af304ce6f339558f9894b48945ea5a9e126aa","modified":1639633295042},{"_id":"public/archives/2020/04/index.html","hash":"bbd87519d6c1afe43d904c183bfcea8d2fa7beb2","modified":1639585205699},{"_id":"public/2021/06/09/TCP三次握手和四次挥手/index.html","hash":"f2be68fe97cc915af735bbf2e70fd5ee4a1d0ce7","modified":1639585205699},{"_id":"source/_posts/go协程池实现.md","hash":"8523c525da8e2855cc399587302fde6763ce776d","modified":1639499039024},{"_id":"public/2021/12/15/go协程池实现/index.html","hash":"aaa1c8369048ab6bacb1cf101ac04266d739ad43","modified":1639585205699},{"_id":"source/_posts/go查询Elastic-1.md","hash":"8870846c5fa9e114d1a0dc84d8c35e12c6ff952a","modified":1639585138314},{"_id":"source/_posts/go查询Elastic.md","hash":"6d2c25c72ba10432c3c55d1f63d78670b85c0914","modified":1639622912073},{"_id":"public/2021/07/16/go查询Elastic/index.html","hash":"9ee7edafde8318f54ee1f5a9dce4f7a33a2496a8","modified":1639632927151},{"_id":"public/archives/page/3/index.html","hash":"68bf5fb0caf9367b4e995e03c523e7c72efd666f","modified":1639585205699},{"_id":"public/2021/12/16/go查询Elastic-1/index.html","hash":"55886509846fb6e3b14e971443dbf113590de3d5","modified":1639585191791},{"_id":"public/archives/2021/07/index.html","hash":"10c1c7c0471f50cfffd2140fb7d296268ecc31ae","modified":1639585205699},{"_id":"public/page/3/index.html","hash":"4bd2d2a9d8fa7fd2e2691b365ef5212dc265c508","modified":1639585205699}],"Category":[{"name":"网络","_id":"ckwx55est0009twpe9u0agt58"},{"name":"数据库","_id":"ckwxo5sdr0000bzfy0kev29uu"},{"name":"GO","_id":"ckwybtj6l00001lpe32ve3ff4"},{"name":"git","_id":"ckwybtj6p00041lpe5aevdhg9"}],"Data":[],"Page":[{"title":"标签","date":"2021-08-19T06:05:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-08-19 14:05:57\ntype: tags\n---\n","updated":"2021-09-01T04:35:18.886Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwx55esn0000twpeddjxbflj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2021-08-19T06:05:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-08-19 14:05:34\ntype: categories\n---\n","updated":"2021-09-01T04:35:18.886Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwx55esq0002twpeg53i0msu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"git版本回退","date":"2021-10-10T14:05:14.000Z","_content":"\n### 代码回滚\n\ngit在代码回滚提供了多种方式，比如：git reset...，git revert...，git rebase...等，使用哪种方式回退，取决于实际回退场景。\n\n<!-- more -->\n\n#### git reset\n\n回退版本，直接把代码回退到某个提交，以实际例子，演示下需要如何回退：\n\n![avatar](https://102er.github.io/images/git-reset-log.png)\n\n看提交记录，我们把dev分支不小心合并到了当前特性分支，需要剪掉dev的分支，保证功能分支的特性唯一。从分支线图看出，我们需要回退到 commit id = a94308f 这个版本，问题点是，我们在dev合并之后，又commit了几个记录，我们的目的是剪掉dev合并这次记录，如果是普通的commit 那么我们可以用git revert 撤销这个提交。但是这个是merge操作，没办法。所以，只能回退到a94308f这个版本，然后把dev后的提交pick进来。具体命令如下：\n\n1. git reset --hard  a94308f  #回退到这个版本，并清空其他提交内容\n2. git cherry-pick fb9e36f    #找回消失的提交记录\n3. git cherry-pick 6d60f55   #找回消失的提交记录\n4. 如果有冲突，需要解决冲突，然后执行：git cherry-pick --continue\n5. 最后再提交到远程 需要强制覆盖远程：git push -f\n\n这样就实现了版本的回退。有时候，我们发现要回退版本的时候，已经有很多人提交了。这时候 如果在使用git reset+cherry-pick方式，那不得疯了。基于cherry-pick之上，我们可以使用**git rebase -i** 互动模式，帮助我们解决多量commit的场景。\n\n常用命令：\n\n- 使用 `git reset HEAD^` 回到上一個 patch（檔案內容不清空）\n- 使用 `git reset --hard HEAD^` 回到上一個 patch，並且強制清除修改的內容 \n- 使用 `git reset --hard <commit id>` 直接 reset 成指定的 patch\n- 使用 git reset --soft HEAD^  回到前一個 patch，但保持檔案狀態為 ***Changes to be committed\\***\n- **-- hard  要慎用此参数，它会删除回退点之前的所有修改内容。**如果代码未提交，那就很难补救了，如果代码已经提交，那可以通过找到commit id 找回代码\n\n#### git revert\n\nrevert一般在剔除部分提交。比如，我不需要commit=057c752,就可以执行：`git revert -n 057c752`  它可以帮忙我们移除一个commit；它仅仅只是踢掉这个commit，其他的commit还是在的。常用命令：\n\n- 使用 `git revert <commit id>` 還原指定的 patch\n- 使用 `git revert --continue` 告知 git 已經解完衝突\n- 使用 `git revert --abort` 來要放棄這次 revert\n- 不适用于合并操作的commit\n\n### 总结\n\nreset 适用于回退版本到当前版本没有新的commit，而revert是剪掉某个commit记录。\n","source":"_posts/git版本回退.md","raw":"---\ntitle: git版本回退\ndate: 2021-10-10 22:05:14\ncategories:\n    - git\ntags: git\n---\n\n### 代码回滚\n\ngit在代码回滚提供了多种方式，比如：git reset...，git revert...，git rebase...等，使用哪种方式回退，取决于实际回退场景。\n\n<!-- more -->\n\n#### git reset\n\n回退版本，直接把代码回退到某个提交，以实际例子，演示下需要如何回退：\n\n![avatar](https://102er.github.io/images/git-reset-log.png)\n\n看提交记录，我们把dev分支不小心合并到了当前特性分支，需要剪掉dev的分支，保证功能分支的特性唯一。从分支线图看出，我们需要回退到 commit id = a94308f 这个版本，问题点是，我们在dev合并之后，又commit了几个记录，我们的目的是剪掉dev合并这次记录，如果是普通的commit 那么我们可以用git revert 撤销这个提交。但是这个是merge操作，没办法。所以，只能回退到a94308f这个版本，然后把dev后的提交pick进来。具体命令如下：\n\n1. git reset --hard  a94308f  #回退到这个版本，并清空其他提交内容\n2. git cherry-pick fb9e36f    #找回消失的提交记录\n3. git cherry-pick 6d60f55   #找回消失的提交记录\n4. 如果有冲突，需要解决冲突，然后执行：git cherry-pick --continue\n5. 最后再提交到远程 需要强制覆盖远程：git push -f\n\n这样就实现了版本的回退。有时候，我们发现要回退版本的时候，已经有很多人提交了。这时候 如果在使用git reset+cherry-pick方式，那不得疯了。基于cherry-pick之上，我们可以使用**git rebase -i** 互动模式，帮助我们解决多量commit的场景。\n\n常用命令：\n\n- 使用 `git reset HEAD^` 回到上一個 patch（檔案內容不清空）\n- 使用 `git reset --hard HEAD^` 回到上一個 patch，並且強制清除修改的內容 \n- 使用 `git reset --hard <commit id>` 直接 reset 成指定的 patch\n- 使用 git reset --soft HEAD^  回到前一個 patch，但保持檔案狀態為 ***Changes to be committed\\***\n- **-- hard  要慎用此参数，它会删除回退点之前的所有修改内容。**如果代码未提交，那就很难补救了，如果代码已经提交，那可以通过找到commit id 找回代码\n\n#### git revert\n\nrevert一般在剔除部分提交。比如，我不需要commit=057c752,就可以执行：`git revert -n 057c752`  它可以帮忙我们移除一个commit；它仅仅只是踢掉这个commit，其他的commit还是在的。常用命令：\n\n- 使用 `git revert <commit id>` 還原指定的 patch\n- 使用 `git revert --continue` 告知 git 已經解完衝突\n- 使用 `git revert --abort` 來要放棄這次 revert\n- 不适用于合并操作的commit\n\n### 总结\n\nreset 适用于回退版本到当前版本没有新的commit，而revert是剪掉某个commit记录。\n","slug":"git版本回退","published":1,"updated":"2021-12-09T02:13:28.180Z","_id":"ckwx55ess0007twpe68gyc4h7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"代码回滚\"><a href=\"#代码回滚\" class=\"headerlink\" title=\"代码回滚\"></a>代码回滚</h3><p>git在代码回滚提供了多种方式，比如：git reset…，git revert…，git rebase…等，使用哪种方式回退，取决于实际回退场景。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h4><p>回退版本，直接把代码回退到某个提交，以实际例子，演示下需要如何回退：</p>\n<p><img src=\"https://102er.github.io/images/git-reset-log.png\" alt=\"avatar\"></p>\n<p>看提交记录，我们把dev分支不小心合并到了当前特性分支，需要剪掉dev的分支，保证功能分支的特性唯一。从分支线图看出，我们需要回退到 commit id = a94308f 这个版本，问题点是，我们在dev合并之后，又commit了几个记录，我们的目的是剪掉dev合并这次记录，如果是普通的commit 那么我们可以用git revert 撤销这个提交。但是这个是merge操作，没办法。所以，只能回退到a94308f这个版本，然后把dev后的提交pick进来。具体命令如下：</p>\n<ol>\n<li>git reset –hard  a94308f  #回退到这个版本，并清空其他提交内容</li>\n<li>git cherry-pick fb9e36f    #找回消失的提交记录</li>\n<li>git cherry-pick 6d60f55   #找回消失的提交记录</li>\n<li>如果有冲突，需要解决冲突，然后执行：git cherry-pick –continue</li>\n<li>最后再提交到远程 需要强制覆盖远程：git push -f</li>\n</ol>\n<p>这样就实现了版本的回退。有时候，我们发现要回退版本的时候，已经有很多人提交了。这时候 如果在使用git reset+cherry-pick方式，那不得疯了。基于cherry-pick之上，我们可以使用<strong>git rebase -i</strong> 互动模式，帮助我们解决多量commit的场景。</p>\n<p>常用命令：</p>\n<ul>\n<li>使用 <code>git reset HEAD^</code> 回到上一個 patch（檔案內容不清空）</li>\n<li>使用 <code>git reset --hard HEAD^</code> 回到上一個 patch，並且強制清除修改的內容 </li>\n<li>使用 <code>git reset --hard &lt;commit id&gt;</code> 直接 reset 成指定的 patch</li>\n<li>使用 git reset –soft HEAD^  回到前一個 patch，但保持檔案狀態為 *<strong>Changes to be committed*</strong></li>\n<li><strong>– hard  要慎用此参数，它会删除回退点之前的所有修改内容。</strong>如果代码未提交，那就很难补救了，如果代码已经提交，那可以通过找到commit id 找回代码</li>\n</ul>\n<h4 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h4><p>revert一般在剔除部分提交。比如，我不需要commit=057c752,就可以执行：<code>git revert -n 057c752</code>  它可以帮忙我们移除一个commit；它仅仅只是踢掉这个commit，其他的commit还是在的。常用命令：</p>\n<ul>\n<li>使用 <code>git revert &lt;commit id&gt;</code> 還原指定的 patch</li>\n<li>使用 <code>git revert --continue</code> 告知 git 已經解完衝突</li>\n<li>使用 <code>git revert --abort</code> 來要放棄這次 revert</li>\n<li>不适用于合并操作的commit</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>reset 适用于回退版本到当前版本没有新的commit，而revert是剪掉某个commit记录。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"代码回滚\"><a href=\"#代码回滚\" class=\"headerlink\" title=\"代码回滚\"></a>代码回滚</h3><p>git在代码回滚提供了多种方式，比如：git reset…，git revert…，git rebase…等，使用哪种方式回退，取决于实际回退场景。</p>","more":"<h4 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h4><p>回退版本，直接把代码回退到某个提交，以实际例子，演示下需要如何回退：</p>\n<p><img src=\"https://102er.github.io/images/git-reset-log.png\" alt=\"avatar\"></p>\n<p>看提交记录，我们把dev分支不小心合并到了当前特性分支，需要剪掉dev的分支，保证功能分支的特性唯一。从分支线图看出，我们需要回退到 commit id = a94308f 这个版本，问题点是，我们在dev合并之后，又commit了几个记录，我们的目的是剪掉dev合并这次记录，如果是普通的commit 那么我们可以用git revert 撤销这个提交。但是这个是merge操作，没办法。所以，只能回退到a94308f这个版本，然后把dev后的提交pick进来。具体命令如下：</p>\n<ol>\n<li>git reset –hard  a94308f  #回退到这个版本，并清空其他提交内容</li>\n<li>git cherry-pick fb9e36f    #找回消失的提交记录</li>\n<li>git cherry-pick 6d60f55   #找回消失的提交记录</li>\n<li>如果有冲突，需要解决冲突，然后执行：git cherry-pick –continue</li>\n<li>最后再提交到远程 需要强制覆盖远程：git push -f</li>\n</ol>\n<p>这样就实现了版本的回退。有时候，我们发现要回退版本的时候，已经有很多人提交了。这时候 如果在使用git reset+cherry-pick方式，那不得疯了。基于cherry-pick之上，我们可以使用<strong>git rebase -i</strong> 互动模式，帮助我们解决多量commit的场景。</p>\n<p>常用命令：</p>\n<ul>\n<li>使用 <code>git reset HEAD^</code> 回到上一個 patch（檔案內容不清空）</li>\n<li>使用 <code>git reset --hard HEAD^</code> 回到上一個 patch，並且強制清除修改的內容 </li>\n<li>使用 <code>git reset --hard &lt;commit id&gt;</code> 直接 reset 成指定的 patch</li>\n<li>使用 git reset –soft HEAD^  回到前一個 patch，但保持檔案狀態為 *<strong>Changes to be committed*</strong></li>\n<li><strong>– hard  要慎用此参数，它会删除回退点之前的所有修改内容。</strong>如果代码未提交，那就很难补救了，如果代码已经提交，那可以通过找到commit id 找回代码</li>\n</ul>\n<h4 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h4><p>revert一般在剔除部分提交。比如，我不需要commit=057c752,就可以执行：<code>git revert -n 057c752</code>  它可以帮忙我们移除一个commit；它仅仅只是踢掉这个commit，其他的commit还是在的。常用命令：</p>\n<ul>\n<li>使用 <code>git revert &lt;commit id&gt;</code> 還原指定的 patch</li>\n<li>使用 <code>git revert --continue</code> 告知 git 已經解完衝突</li>\n<li>使用 <code>git revert --abort</code> 來要放棄這次 revert</li>\n<li>不适用于合并操作的commit</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>reset 适用于回退版本到当前版本没有新的commit，而revert是剪掉某个commit记录。</p>"},{"title":"prometheus","date":"2021-03-23T06:27:30.000Z","_content":"","source":"_posts/prometheus.md","raw":"---\ntitle: prometheus\ndate: 2021-03-23 14:27:30\ntags:\n---\n","slug":"prometheus","published":1,"updated":"2021-12-10T07:37:27.975Z","_id":"ckwx55esu000dtwpe5j2zbcr3","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"protoc使用","date":"2021-11-12T09:24:00.000Z","Tags":["序列化"],"_content":"\n## 概述\n\ngrpc使用protobuf进行数据的序列化和反序列化，在开发中经常需要写proto文件，进行接口声明定义，然后通过protoc工具转成相应的代码文件，protoc工具不支持生成go代码文件，需要按照相应的插件协助；本文主要介绍protoc工具的使用，以及proto文件的定义。\n\n<!-- more -->\n\n## 介绍\n\n### protoc指令\n\n```\nprotoc\t--proto_path=api/v1 \\\n        -I=api/v2 \\\n\t\t\t --gogo_out=paths=source_relative:. \\\n       api/v1/hello_world.proto\n```\n\n **-IPATH, --proto_path=PATH 也可以用 -I**：它表示protoc在哪个路径下搜索proto文件，可以重复使用这个参数，表示指定多个目录进行搜索。啥场景需要指定这个参数？\n\n--- 很多情况下，我们会在一个proto文件里面import其他proto文件，就需要指定这个路径，使protoc可以找到依赖。\n\n**--xxx_out=OUT_DIR**：指定使用哪个插件生成相应语言的代码。go需要自己安装插件，一般会选择官方的protoc-gen-go 【--go_out=XXXX】，如果对自定义要求高，可以了解protoc-gen-gogo 【--gogo_out=XXXX】；`--xxx_out`主要的两个参数为`plugins` 和 `paths`，分别表示生成Go代码所使用的插件，以及生成的Go代码的位置。`--go_out`的写法是，参数之间用逗号隔开，最后加上冒号来指定代码的生成位置，比如`--go_out=plugins=grpc,paths=import:.`\n\n- `paths`参数有两个选项，分别是 `import` 和 `source_relative`，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 **proto源文件的目录层级**去创建Go代码的目录层级，如果目录已存在则不用创建。\n- ​\t`plugins`参数有不带grpc和带grpc两种（应该还有其它的，目前知道的有这两种），两者的区别如下，带grpc的会多一些跟gRPC相关的代码，实现gRPC通信：\n\n`paths`参数有两个选项，分别是 `import` 和 `source_relative`，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 **proto源文件的目录层级**去创建Go代码的目录层级，如果目录已存在则不用创建。\n\n  **  @<filename> ** ：表示要生成的proto文件，可以是一个目录，它会把目录下所有proto文件生成对应的代码。\n\n### proto文件\n\n```\nsyntax = \"proto3\";\n\npackage helloWorld;\n\noption go_package=\"api/v1\";\n\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\nmessage HelloRequest {\n  string name = 1;\n}\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n- syntax：指定proto版本，默认是proto2进行编译\n- `package`：是proto文件的命名空间，避免我们定义的service、message出现冲突。\n- go_package：生成go语言对应的包路径，对应go的包名，它的设置上需要和--go_out==xxx相同，保证go能够被正确引用。（当然，不一样也可以，这样需要保证go_out目录下只有这个包，不然就会出现冲突，所以，我们设置上一般保证相同，减少不必要的问题）\n- 注意，不同包之间的 proto 文件不可以循环依赖，这会导致生成的 go 包之间也存在循环依赖，导致 go 代码编译不通过。\n\n","source":"_posts/protoc使用.md","raw":"---\ntitle: protoc使用\ndate: 2021-11-12 17:24:00\ncategories:\n    - GO\nTags: \n    - 序列化\n---\n\n## 概述\n\ngrpc使用protobuf进行数据的序列化和反序列化，在开发中经常需要写proto文件，进行接口声明定义，然后通过protoc工具转成相应的代码文件，protoc工具不支持生成go代码文件，需要按照相应的插件协助；本文主要介绍protoc工具的使用，以及proto文件的定义。\n\n<!-- more -->\n\n## 介绍\n\n### protoc指令\n\n```\nprotoc\t--proto_path=api/v1 \\\n        -I=api/v2 \\\n\t\t\t --gogo_out=paths=source_relative:. \\\n       api/v1/hello_world.proto\n```\n\n **-IPATH, --proto_path=PATH 也可以用 -I**：它表示protoc在哪个路径下搜索proto文件，可以重复使用这个参数，表示指定多个目录进行搜索。啥场景需要指定这个参数？\n\n--- 很多情况下，我们会在一个proto文件里面import其他proto文件，就需要指定这个路径，使protoc可以找到依赖。\n\n**--xxx_out=OUT_DIR**：指定使用哪个插件生成相应语言的代码。go需要自己安装插件，一般会选择官方的protoc-gen-go 【--go_out=XXXX】，如果对自定义要求高，可以了解protoc-gen-gogo 【--gogo_out=XXXX】；`--xxx_out`主要的两个参数为`plugins` 和 `paths`，分别表示生成Go代码所使用的插件，以及生成的Go代码的位置。`--go_out`的写法是，参数之间用逗号隔开，最后加上冒号来指定代码的生成位置，比如`--go_out=plugins=grpc,paths=import:.`\n\n- `paths`参数有两个选项，分别是 `import` 和 `source_relative`，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 **proto源文件的目录层级**去创建Go代码的目录层级，如果目录已存在则不用创建。\n- ​\t`plugins`参数有不带grpc和带grpc两种（应该还有其它的，目前知道的有这两种），两者的区别如下，带grpc的会多一些跟gRPC相关的代码，实现gRPC通信：\n\n`paths`参数有两个选项，分别是 `import` 和 `source_relative`，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 **proto源文件的目录层级**去创建Go代码的目录层级，如果目录已存在则不用创建。\n\n  **  @<filename> ** ：表示要生成的proto文件，可以是一个目录，它会把目录下所有proto文件生成对应的代码。\n\n### proto文件\n\n```\nsyntax = \"proto3\";\n\npackage helloWorld;\n\noption go_package=\"api/v1\";\n\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\nmessage HelloRequest {\n  string name = 1;\n}\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n- syntax：指定proto版本，默认是proto2进行编译\n- `package`：是proto文件的命名空间，避免我们定义的service、message出现冲突。\n- go_package：生成go语言对应的包路径，对应go的包名，它的设置上需要和--go_out==xxx相同，保证go能够被正确引用。（当然，不一样也可以，这样需要保证go_out目录下只有这个包，不然就会出现冲突，所以，我们设置上一般保证相同，减少不必要的问题）\n- 注意，不同包之间的 proto 文件不可以循环依赖，这会导致生成的 go 包之间也存在循环依赖，导致 go 代码编译不通过。\n\n","slug":"protoc使用","published":1,"updated":"2021-12-09T02:12:45.552Z","_id":"ckwx55esu000ftwpebotg8dwa","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>grpc使用protobuf进行数据的序列化和反序列化，在开发中经常需要写proto文件，进行接口声明定义，然后通过protoc工具转成相应的代码文件，protoc工具不支持生成go代码文件，需要按照相应的插件协助；本文主要介绍protoc工具的使用，以及proto文件的定义。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"protoc指令\"><a href=\"#protoc指令\" class=\"headerlink\" title=\"protoc指令\"></a>protoc指令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc\t--proto_path=api/v1 \\</span><br><span class=\"line\">        -I=api/v2 \\</span><br><span class=\"line\">\t\t\t --gogo_out=paths=source_relative:. \\</span><br><span class=\"line\">       api/v1/hello_world.proto</span><br></pre></td></tr></table></figure>\n\n<p> <strong>-IPATH, –proto_path=PATH 也可以用 -I</strong>：它表示protoc在哪个路径下搜索proto文件，可以重复使用这个参数，表示指定多个目录进行搜索。啥场景需要指定这个参数？</p>\n<p>— 很多情况下，我们会在一个proto文件里面import其他proto文件，就需要指定这个路径，使protoc可以找到依赖。</p>\n<p><strong>–xxx_out=OUT_DIR</strong>：指定使用哪个插件生成相应语言的代码。go需要自己安装插件，一般会选择官方的protoc-gen-go 【–go_out=XXXX】，如果对自定义要求高，可以了解protoc-gen-gogo 【–gogo_out=XXXX】；<code>--xxx_out</code>主要的两个参数为<code>plugins</code> 和 <code>paths</code>，分别表示生成Go代码所使用的插件，以及生成的Go代码的位置。<code>--go_out</code>的写法是，参数之间用逗号隔开，最后加上冒号来指定代码的生成位置，比如<code>--go_out=plugins=grpc,paths=import:.</code></p>\n<ul>\n<li><code>paths</code>参数有两个选项，分别是 <code>import</code> 和 <code>source_relative</code>，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 <strong>proto源文件的目录层级</strong>去创建Go代码的目录层级，如果目录已存在则不用创建。</li>\n<li>​    <code>plugins</code>参数有不带grpc和带grpc两种（应该还有其它的，目前知道的有这两种），两者的区别如下，带grpc的会多一些跟gRPC相关的代码，实现gRPC通信：</li>\n</ul>\n<p><code>paths</code>参数有两个选项，分别是 <code>import</code> 和 <code>source_relative</code>，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 <strong>proto源文件的目录层级</strong>去创建Go代码的目录层级，如果目录已存在则不用创建。</p>\n<p>  **  @<filename> ** ：表示要生成的proto文件，可以是一个目录，它会把目录下所有proto文件生成对应的代码。</p>\n<h3 id=\"proto文件\"><a href=\"#proto文件\" class=\"headerlink\" title=\"proto文件\"></a>proto文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">package helloWorld;</span><br><span class=\"line\"></span><br><span class=\"line\">option go_package=&quot;api/v1&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  string name = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  string message = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>syntax：指定proto版本，默认是proto2进行编译</li>\n<li><code>package</code>：是proto文件的命名空间，避免我们定义的service、message出现冲突。</li>\n<li>go_package：生成go语言对应的包路径，对应go的包名，它的设置上需要和–go_out==xxx相同，保证go能够被正确引用。（当然，不一样也可以，这样需要保证go_out目录下只有这个包，不然就会出现冲突，所以，我们设置上一般保证相同，减少不必要的问题）</li>\n<li>注意，不同包之间的 proto 文件不可以循环依赖，这会导致生成的 go 包之间也存在循环依赖，导致 go 代码编译不通过。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>grpc使用protobuf进行数据的序列化和反序列化，在开发中经常需要写proto文件，进行接口声明定义，然后通过protoc工具转成相应的代码文件，protoc工具不支持生成go代码文件，需要按照相应的插件协助；本文主要介绍protoc工具的使用，以及proto文件的定义。</p>","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"protoc指令\"><a href=\"#protoc指令\" class=\"headerlink\" title=\"protoc指令\"></a>protoc指令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc\t--proto_path=api/v1 \\</span><br><span class=\"line\">        -I=api/v2 \\</span><br><span class=\"line\">\t\t\t --gogo_out=paths=source_relative:. \\</span><br><span class=\"line\">       api/v1/hello_world.proto</span><br></pre></td></tr></table></figure>\n\n<p> <strong>-IPATH, –proto_path=PATH 也可以用 -I</strong>：它表示protoc在哪个路径下搜索proto文件，可以重复使用这个参数，表示指定多个目录进行搜索。啥场景需要指定这个参数？</p>\n<p>— 很多情况下，我们会在一个proto文件里面import其他proto文件，就需要指定这个路径，使protoc可以找到依赖。</p>\n<p><strong>–xxx_out=OUT_DIR</strong>：指定使用哪个插件生成相应语言的代码。go需要自己安装插件，一般会选择官方的protoc-gen-go 【–go_out=XXXX】，如果对自定义要求高，可以了解protoc-gen-gogo 【–gogo_out=XXXX】；<code>--xxx_out</code>主要的两个参数为<code>plugins</code> 和 <code>paths</code>，分别表示生成Go代码所使用的插件，以及生成的Go代码的位置。<code>--go_out</code>的写法是，参数之间用逗号隔开，最后加上冒号来指定代码的生成位置，比如<code>--go_out=plugins=grpc,paths=import:.</code></p>\n<ul>\n<li><code>paths</code>参数有两个选项，分别是 <code>import</code> 和 <code>source_relative</code>，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 <strong>proto源文件的目录层级</strong>去创建Go代码的目录层级，如果目录已存在则不用创建。</li>\n<li>​    <code>plugins</code>参数有不带grpc和带grpc两种（应该还有其它的，目前知道的有这两种），两者的区别如下，带grpc的会多一些跟gRPC相关的代码，实现gRPC通信：</li>\n</ul>\n<p><code>paths</code>参数有两个选项，分别是 <code>import</code> 和 <code>source_relative</code>，默认为 import，表示按照生成的Go代码的包的全路径去创建目录层级，source_relative 表示按照 <strong>proto源文件的目录层级</strong>去创建Go代码的目录层级，如果目录已存在则不用创建。</p>\n<p>  **  @<filename> ** ：表示要生成的proto文件，可以是一个目录，它会把目录下所有proto文件生成对应的代码。</p>\n<h3 id=\"proto文件\"><a href=\"#proto文件\" class=\"headerlink\" title=\"proto文件\"></a>proto文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">package helloWorld;</span><br><span class=\"line\"></span><br><span class=\"line\">option go_package=&quot;api/v1&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  string name = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  string message = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>syntax：指定proto版本，默认是proto2进行编译</li>\n<li><code>package</code>：是proto文件的命名空间，避免我们定义的service、message出现冲突。</li>\n<li>go_package：生成go语言对应的包路径，对应go的包名，它的设置上需要和–go_out==xxx相同，保证go能够被正确引用。（当然，不一样也可以，这样需要保证go_out目录下只有这个包，不然就会出现冲突，所以，我们设置上一般保证相同，减少不必要的问题）</li>\n<li>注意，不同包之间的 proto 文件不可以循环依赖，这会导致生成的 go 包之间也存在循环依赖，导致 go 代码编译不通过。</li>\n</ul>"},{"title":"二分查找","date":"2021-08-22T13:28:46.000Z","_content":"","source":"_posts/二分查找.md","raw":"---\ntitle: 二分查找\ndate: 2021-08-22 21:28:46\ntags:\n---\n","slug":"二分查找","published":1,"updated":"2021-12-10T07:34:47.782Z","_id":"ckwx55esw000ntwpe6g220eyl","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"二叉树遍历","date":"2021-08-19T12:28:12.000Z","_content":"","source":"_posts/二叉树遍历.md","raw":"---\ntitle: 二叉树遍历\ndate: 2021-08-19 20:28:12\ntags:\n---\n","slug":"二叉树遍历","published":1,"updated":"2021-12-10T07:34:37.964Z","_id":"ckwx55esx000ptwpe401wgilt","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"mysql索引介绍","date":"2020-03-12T06:31:03.000Z","_content":"\n## 概述\n\n　　索引是一个单独的、存储在磁盘上的数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引用于快速找出在某个或多个列中有一特定值的行，所有MySQL列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。\n　　MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。比如我们在查字典的时候，前面都有检索的拼音和偏旁、笔画等，然后找到对应字典页码，这样然后就打开字典的页数就可以知道我们要搜索的某一个key的全部值的信息了。\n　　创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)，而不是在select的字段中，实际上，索引也是一张“表”，该表保存了主键与索引字段，并指向实体表的记录，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件，建立索引会占用磁盘空间的索引文件。说白了索引就是用来提高速度的，但是就需要维护索引造成资源的浪费，所以合理的创建索引是必要的。\n\n<!-- more -->\n\n## 类别\n\n","source":"_posts/mysql索引介绍.md","raw":"---\ntitle: mysql索引介绍\ndate: 2020-03-12 14:31:03\ncategories:\n    - 数据库\ntags:\n    - mysql\n---\n\n## 概述\n\n　　索引是一个单独的、存储在磁盘上的数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引用于快速找出在某个或多个列中有一特定值的行，所有MySQL列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。\n　　MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。比如我们在查字典的时候，前面都有检索的拼音和偏旁、笔画等，然后找到对应字典页码，这样然后就打开字典的页数就可以知道我们要搜索的某一个key的全部值的信息了。\n　　创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)，而不是在select的字段中，实际上，索引也是一张“表”，该表保存了主键与索引字段，并指向实体表的记录，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件，建立索引会占用磁盘空间的索引文件。说白了索引就是用来提高速度的，但是就需要维护索引造成资源的浪费，所以合理的创建索引是必要的。\n\n<!-- more -->\n\n## 类别\n\n","slug":"mysql索引介绍","published":1,"updated":"2021-12-10T07:37:10.932Z","_id":"ckwxm1x3f0000t3fy36xkhjwd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>　　索引是一个单独的、存储在磁盘上的数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引用于快速找出在某个或多个列中有一特定值的行，所有MySQL列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。<br>　　MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。比如我们在查字典的时候，前面都有检索的拼音和偏旁、笔画等，然后找到对应字典页码，这样然后就打开字典的页数就可以知道我们要搜索的某一个key的全部值的信息了。<br>　　创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)，而不是在select的字段中，实际上，索引也是一张“表”，该表保存了主键与索引字段，并指向实体表的记录，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件，建立索引会占用磁盘空间的索引文件。说白了索引就是用来提高速度的，但是就需要维护索引造成资源的浪费，所以合理的创建索引是必要的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"类别\"><a href=\"#类别\" class=\"headerlink\" title=\"类别\"></a>类别</h2>","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>　　索引是一个单独的、存储在磁盘上的数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引用于快速找出在某个或多个列中有一特定值的行，所有MySQL列类型都可以被索引，对相关列使用索引是提高查询操作速度的最佳途径。<br>　　MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。比如我们在查字典的时候，前面都有检索的拼音和偏旁、笔画等，然后找到对应字典页码，这样然后就打开字典的页数就可以知道我们要搜索的某一个key的全部值的信息了。<br>　　创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)，而不是在select的字段中，实际上，索引也是一张“表”，该表保存了主键与索引字段，并指向实体表的记录，虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件，建立索引会占用磁盘空间的索引文件。说白了索引就是用来提高速度的，但是就需要维护索引造成资源的浪费，所以合理的创建索引是必要的。</p>","more":"<h2 id=\"类别\"><a href=\"#类别\" class=\"headerlink\" title=\"类别\"></a>类别</h2>"},{"title":"rabbitMQ介绍","date":"2020-06-19T11:30:11.000Z","_content":"","source":"_posts/rabbitMQ介绍.md","raw":"---\ntitle: rabbitMQ介绍\ndate: 2020-06-19 19:30:11\ntags:\n---\n","slug":"rabbitMQ介绍","published":1,"updated":"2021-12-10T07:34:14.154Z","_id":"ckwxm1x3h0001t3fyadb0cd8p","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"redis数据类型","date":"2020-08-19T06:30:46.000Z","_content":"\n## 概述\n\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n\n<!-- more -->\n\n","source":"_posts/redis数据类型.md","raw":"---\ntitle: redis数据类型\ndate: 2020-08-19 14:30:46\ntags:\n      - redis\n---\n\n## 概述\n\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n\n<!-- more -->\n\n","slug":"redis数据类型","published":1,"updated":"2021-12-10T07:34:00.191Z","_id":"ckwxni7tp0002ymfy2kfb20a9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>\n<span id=\"more\"></span>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>","more":""},{"title":"go实现keycloak adaptor","date":"2021-12-09T02:11:41.000Z","_content":"\n## 概述\n\n**IAM：**Identity and Access Management的缩写，即身份识别与访问管理，具有单点登录(SSO-Single Sign On)，认证管理，基于策略的集中式授权和审计，动态授权等功能。\n\n**keycloak：**是IAM的解决方案，用于管理用户的注册、登录、单点登录Single Sign On（SSO）、开放app接口的授权等。\n\n<!-- more -->\n\n## 实现\n\nkeycloak并没有提供go的接入适配器，所以需要我们自行实现。接入keycloak有两种常用的认证方式：\n\n1. OpenID Connect（oidc）：在oauth2.0上的一种授权认证协议，OIDC使用OAuth2的授权服务器来为第三方客户端提供用户的身份认证，并把对应的身份认证信息传递给客户端，且可以适用于各种类型的客户端（比如服务端应用，移动APP，JS应用），且完全兼容OAuth2，也就是说你搭建了一个OIDC的服务后，也可以当作一个OAuth2的服务来用。\n2. SAML：认证授权协议\n\n两种方式都可接入，oidc会相对简单一点。（当然，还得看我们iam是否有配置两种协议的endpoint）\n\n我们选择用oidc的认证方式接入IAM。OIDC是OpenID Connect的简称，OIDC=(Identity, Authentication) + OAuth 2.0。它在OAuth2上构建了一个身份层，是一个基于OAuth2协议的身份认证标准协议。具体可以参考文档：https://www.cnblogs.com/linianhui/p/openid-connect-core.html#auto-id-0\n\ngo生态有go-oidc和oauth2.0组件，可以帮助我们解决和iam交互工作，我们只需负责提供认证流程需要的接口即可。认证交互流程图：\n\n![osi](https://102er.github.io/uploads/iam-login.png)\n\n### **oidc和oauth初始化**\n\n```go\ntype IAM struct {\n\toauth2Cfg      *oauth2.Config\n\toidcVerifier   *oidc.IDTokenVerifier\n\tstate          string //随机状态 目前是固定的\n\tfeRedirectURL  string //前端回调地址\n\tserverLoginUrl string //服务端登录接口\n}\n\ntype Iam struct {\n\tClientID            string `protobuf:\"bytes,1,opt,name=ClientID,proto3\" json:\"ClientID,omitempty\"`                       // 客户端名称从keycloak 中获取，resource\n\tClientSecret        string `protobuf:\"bytes,2,opt,name=ClientSecret,proto3\" json:\"ClientSecret,omitempty\"`               // 客户端密钥从keycloak 中获取，credentials.secret\n\tLogoutCallbackAddr  string `protobuf:\"bytes,3,opt,name=LogoutCallbackAddr,proto3\" json:\"LogoutCallbackAddr,omitempty\"`   // IAM登出之后的回调地址\n\tLoginCallbackAddr   string `protobuf:\"bytes,4,opt,name=LoginCallbackAddr,proto3\" json:\"LoginCallbackAddr,omitempty\"`     // IAM登录成功之后 应该回调的前端地址\n\tFeLoginCallbackAddr string `protobuf:\"bytes,5,opt,name=FeLoginCallbackAddr,proto3\" json:\"FeLoginCallbackAddr,omitempty\"` // 登录成功之后，前端回调地址\n\tAuthServer          string `protobuf:\"bytes,6,opt,name=AuthServer,proto3\" json:\"AuthServer,omitempty\"` // IAM授权地址\n\tServerLoginUrl      string `protobuf:\"bytes,9,opt,name=ServerLoginUrl,proto3\" json:\"ServerLoginUrl,omitempty\"` // 后端登录接口地址\n}\n\nfunc NewIAMClient(params *conf.Iam) (*iamClient, error) {\n\tctx := context.Background()\n\tprovider, err := oidc.NewProvider(ctx, params.AuthServer) //获取endpoint信息，但是我们的iam架构之间加了一层， 所以并没有使用这个返回结果\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\toauth2Config := &oauth2.Config{\n\t\tClientID:     params.ClientID,\n\t\tClientSecret: params.ClientSecret,\n\t\tRedirectURL:  params.LoginCallbackAddr,\n\t\t// Discovery returns the OAuth2 endpoints.\n\t\tEndpoint: provider.Endpoint(),\n\t\t// \"openid\" is a required scope for OpenID Connect flows.\n\t\tScopes: []string{oidc.ScopeOpenID, \"profile\", \"email\"},\n\t}\n\toidcConfig := &oidc.Config{\n\t\tClientID:          params.ClientID,\n\t\tSkipClientIDCheck: true,\n\t}\n\tverifier := provider.Verifier(oidcConfig)\n\treturn &iamClient{\n\t\toauth2Cfg:      oauth2Config,\n\t\toidcVerifier:   verifier,\n\t\tstate:          strconv.FormatInt(time.Now().Unix(), 10), //理论上需要随机生成，随机生成 需要用额外的存储 才能校验\n\t\tfeRedirectURL:  params.FeLoginCallbackAddr,\n\t\tserverLoginUrl: params.ServerLoginUrl,\n\t}, nil\n}\n```\n\n### 路由接口实现\n\n```go\ntype UserRepo struct {\n\tIam *IAM\n}\n// LoginUrlHandler 获取iam登录地址接口\nfunc (u *UserRepo) LoginUrlHandler(ctx context.Context) string {\n   return u.Iam.oauth2Cfg.AuthCodeURL(u.Iam.state)\n}\n\n// LoginCallback 授权码验证接口\nfunc (u *UserRepo) LoginCallback(ctx context.Context, state, code string) {\n \t//验证iam返回的state\n\tif state != u.Iam.state {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n\t//iam返回的授权码code 去交换token\n\toauth2Token, err := u.Iam.oauth2Cfg.Exchange(ctx, code)\n\tif err != nil {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n\t//取出access_token 因为iam从oidc退化了 所以 取access_token 正常是取 id_token\n  //rawIDToken, ok := oauth2Token.Extra(\"id_token\").(string)\n\taccessToken, ok := oauth2Token.Extra(\"access_token\").(string)\n\tif !ok {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n\t//从access token中解析 用户信息\n\tidToken, err := u.Iam.oidcVerifier.Verify(ctx, accessToken)\n\tif err != nil {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n  //iam认证成功 可以开始创建本地token\n  // ... 自己撸代码\n}\n\n// Redirect iam登录成功回调接口\n// ctx根据自己的业务自己改造\nfunc (u *UserRepo) RedirectHandler(ctx *http.Request) string {\n\tquery := ctx.URL.RawQuery\n\treturn u.Iam.feRedirectURL + \"?\" + query + \"#/cost/dashboard\"\n}\n```\n","source":"_posts/go实现keycloak adaptor.md","raw":"---\ntitle: go实现keycloak adaptor\ndate: 2021-12-09 10:11:41\ncategories:\n    - GO\ntags:\n    - 认证\n---\n\n## 概述\n\n**IAM：**Identity and Access Management的缩写，即身份识别与访问管理，具有单点登录(SSO-Single Sign On)，认证管理，基于策略的集中式授权和审计，动态授权等功能。\n\n**keycloak：**是IAM的解决方案，用于管理用户的注册、登录、单点登录Single Sign On（SSO）、开放app接口的授权等。\n\n<!-- more -->\n\n## 实现\n\nkeycloak并没有提供go的接入适配器，所以需要我们自行实现。接入keycloak有两种常用的认证方式：\n\n1. OpenID Connect（oidc）：在oauth2.0上的一种授权认证协议，OIDC使用OAuth2的授权服务器来为第三方客户端提供用户的身份认证，并把对应的身份认证信息传递给客户端，且可以适用于各种类型的客户端（比如服务端应用，移动APP，JS应用），且完全兼容OAuth2，也就是说你搭建了一个OIDC的服务后，也可以当作一个OAuth2的服务来用。\n2. SAML：认证授权协议\n\n两种方式都可接入，oidc会相对简单一点。（当然，还得看我们iam是否有配置两种协议的endpoint）\n\n我们选择用oidc的认证方式接入IAM。OIDC是OpenID Connect的简称，OIDC=(Identity, Authentication) + OAuth 2.0。它在OAuth2上构建了一个身份层，是一个基于OAuth2协议的身份认证标准协议。具体可以参考文档：https://www.cnblogs.com/linianhui/p/openid-connect-core.html#auto-id-0\n\ngo生态有go-oidc和oauth2.0组件，可以帮助我们解决和iam交互工作，我们只需负责提供认证流程需要的接口即可。认证交互流程图：\n\n![osi](https://102er.github.io/uploads/iam-login.png)\n\n### **oidc和oauth初始化**\n\n```go\ntype IAM struct {\n\toauth2Cfg      *oauth2.Config\n\toidcVerifier   *oidc.IDTokenVerifier\n\tstate          string //随机状态 目前是固定的\n\tfeRedirectURL  string //前端回调地址\n\tserverLoginUrl string //服务端登录接口\n}\n\ntype Iam struct {\n\tClientID            string `protobuf:\"bytes,1,opt,name=ClientID,proto3\" json:\"ClientID,omitempty\"`                       // 客户端名称从keycloak 中获取，resource\n\tClientSecret        string `protobuf:\"bytes,2,opt,name=ClientSecret,proto3\" json:\"ClientSecret,omitempty\"`               // 客户端密钥从keycloak 中获取，credentials.secret\n\tLogoutCallbackAddr  string `protobuf:\"bytes,3,opt,name=LogoutCallbackAddr,proto3\" json:\"LogoutCallbackAddr,omitempty\"`   // IAM登出之后的回调地址\n\tLoginCallbackAddr   string `protobuf:\"bytes,4,opt,name=LoginCallbackAddr,proto3\" json:\"LoginCallbackAddr,omitempty\"`     // IAM登录成功之后 应该回调的前端地址\n\tFeLoginCallbackAddr string `protobuf:\"bytes,5,opt,name=FeLoginCallbackAddr,proto3\" json:\"FeLoginCallbackAddr,omitempty\"` // 登录成功之后，前端回调地址\n\tAuthServer          string `protobuf:\"bytes,6,opt,name=AuthServer,proto3\" json:\"AuthServer,omitempty\"` // IAM授权地址\n\tServerLoginUrl      string `protobuf:\"bytes,9,opt,name=ServerLoginUrl,proto3\" json:\"ServerLoginUrl,omitempty\"` // 后端登录接口地址\n}\n\nfunc NewIAMClient(params *conf.Iam) (*iamClient, error) {\n\tctx := context.Background()\n\tprovider, err := oidc.NewProvider(ctx, params.AuthServer) //获取endpoint信息，但是我们的iam架构之间加了一层， 所以并没有使用这个返回结果\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\toauth2Config := &oauth2.Config{\n\t\tClientID:     params.ClientID,\n\t\tClientSecret: params.ClientSecret,\n\t\tRedirectURL:  params.LoginCallbackAddr,\n\t\t// Discovery returns the OAuth2 endpoints.\n\t\tEndpoint: provider.Endpoint(),\n\t\t// \"openid\" is a required scope for OpenID Connect flows.\n\t\tScopes: []string{oidc.ScopeOpenID, \"profile\", \"email\"},\n\t}\n\toidcConfig := &oidc.Config{\n\t\tClientID:          params.ClientID,\n\t\tSkipClientIDCheck: true,\n\t}\n\tverifier := provider.Verifier(oidcConfig)\n\treturn &iamClient{\n\t\toauth2Cfg:      oauth2Config,\n\t\toidcVerifier:   verifier,\n\t\tstate:          strconv.FormatInt(time.Now().Unix(), 10), //理论上需要随机生成，随机生成 需要用额外的存储 才能校验\n\t\tfeRedirectURL:  params.FeLoginCallbackAddr,\n\t\tserverLoginUrl: params.ServerLoginUrl,\n\t}, nil\n}\n```\n\n### 路由接口实现\n\n```go\ntype UserRepo struct {\n\tIam *IAM\n}\n// LoginUrlHandler 获取iam登录地址接口\nfunc (u *UserRepo) LoginUrlHandler(ctx context.Context) string {\n   return u.Iam.oauth2Cfg.AuthCodeURL(u.Iam.state)\n}\n\n// LoginCallback 授权码验证接口\nfunc (u *UserRepo) LoginCallback(ctx context.Context, state, code string) {\n \t//验证iam返回的state\n\tif state != u.Iam.state {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n\t//iam返回的授权码code 去交换token\n\toauth2Token, err := u.Iam.oauth2Cfg.Exchange(ctx, code)\n\tif err != nil {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n\t//取出access_token 因为iam从oidc退化了 所以 取access_token 正常是取 id_token\n  //rawIDToken, ok := oauth2Token.Extra(\"id_token\").(string)\n\taccessToken, ok := oauth2Token.Extra(\"access_token\").(string)\n\tif !ok {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n\t//从access token中解析 用户信息\n\tidToken, err := u.Iam.oidcVerifier.Verify(ctx, accessToken)\n\tif err != nil {\n\t\t//认证失败 自定义返回错误\n    return\n\t}\n  //iam认证成功 可以开始创建本地token\n  // ... 自己撸代码\n}\n\n// Redirect iam登录成功回调接口\n// ctx根据自己的业务自己改造\nfunc (u *UserRepo) RedirectHandler(ctx *http.Request) string {\n\tquery := ctx.URL.RawQuery\n\treturn u.Iam.feRedirectURL + \"?\" + query + \"#/cost/dashboard\"\n}\n```\n","slug":"go实现keycloak adaptor","published":1,"updated":"2021-12-10T07:20:38.756Z","_id":"ckwybtj6n00011lpeb933gny4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>IAM：</strong>Identity and Access Management的缩写，即身份识别与访问管理，具有单点登录(SSO-Single Sign On)，认证管理，基于策略的集中式授权和审计，动态授权等功能。</p>\n<p><strong>keycloak：</strong>是IAM的解决方案，用于管理用户的注册、登录、单点登录Single Sign On（SSO）、开放app接口的授权等。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>keycloak并没有提供go的接入适配器，所以需要我们自行实现。接入keycloak有两种常用的认证方式：</p>\n<ol>\n<li>OpenID Connect（oidc）：在oauth2.0上的一种授权认证协议，OIDC使用OAuth2的授权服务器来为第三方客户端提供用户的身份认证，并把对应的身份认证信息传递给客户端，且可以适用于各种类型的客户端（比如服务端应用，移动APP，JS应用），且完全兼容OAuth2，也就是说你搭建了一个OIDC的服务后，也可以当作一个OAuth2的服务来用。</li>\n<li>SAML：认证授权协议</li>\n</ol>\n<p>两种方式都可接入，oidc会相对简单一点。（当然，还得看我们iam是否有配置两种协议的endpoint）</p>\n<p>我们选择用oidc的认证方式接入IAM。OIDC是OpenID Connect的简称，OIDC=(Identity, Authentication) + OAuth 2.0。它在OAuth2上构建了一个身份层，是一个基于OAuth2协议的身份认证标准协议。具体可以参考文档：<a href=\"https://www.cnblogs.com/linianhui/p/openid-connect-core.html#auto-id-0\">https://www.cnblogs.com/linianhui/p/openid-connect-core.html#auto-id-0</a></p>\n<p>go生态有go-oidc和oauth2.0组件，可以帮助我们解决和iam交互工作，我们只需负责提供认证流程需要的接口即可。认证交互流程图：</p>\n<p><img src=\"https://102er.github.io/uploads/iam-login.png\" alt=\"osi\"></p>\n<h3 id=\"oidc和oauth初始化\"><a href=\"#oidc和oauth初始化\" class=\"headerlink\" title=\"oidc和oauth初始化\"></a><strong>oidc和oauth初始化</strong></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> IAM <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\toauth2Cfg      *oauth2.Config</span><br><span class=\"line\">\toidcVerifier   *oidc.IDTokenVerifier</span><br><span class=\"line\">\tstate          <span class=\"keyword\">string</span> <span class=\"comment\">//随机状态 目前是固定的</span></span><br><span class=\"line\">\tfeRedirectURL  <span class=\"keyword\">string</span> <span class=\"comment\">//前端回调地址</span></span><br><span class=\"line\">\tserverLoginUrl <span class=\"keyword\">string</span> <span class=\"comment\">//服务端登录接口</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Iam <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tClientID            <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=ClientID,proto3&quot; json:&quot;ClientID,omitempty&quot;`</span>                       <span class=\"comment\">// 客户端名称从keycloak 中获取，resource</span></span><br><span class=\"line\">\tClientSecret        <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=ClientSecret,proto3&quot; json:&quot;ClientSecret,omitempty&quot;`</span>               <span class=\"comment\">// 客户端密钥从keycloak 中获取，credentials.secret</span></span><br><span class=\"line\">\tLogoutCallbackAddr  <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=LogoutCallbackAddr,proto3&quot; json:&quot;LogoutCallbackAddr,omitempty&quot;`</span>   <span class=\"comment\">// IAM登出之后的回调地址</span></span><br><span class=\"line\">\tLoginCallbackAddr   <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=LoginCallbackAddr,proto3&quot; json:&quot;LoginCallbackAddr,omitempty&quot;`</span>     <span class=\"comment\">// IAM登录成功之后 应该回调的前端地址</span></span><br><span class=\"line\">\tFeLoginCallbackAddr <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,5,opt,name=FeLoginCallbackAddr,proto3&quot; json:&quot;FeLoginCallbackAddr,omitempty&quot;`</span> <span class=\"comment\">// 登录成功之后，前端回调地址</span></span><br><span class=\"line\">\tAuthServer          <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,6,opt,name=AuthServer,proto3&quot; json:&quot;AuthServer,omitempty&quot;`</span> <span class=\"comment\">// IAM授权地址</span></span><br><span class=\"line\">\tServerLoginUrl      <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,9,opt,name=ServerLoginUrl,proto3&quot; json:&quot;ServerLoginUrl,omitempty&quot;`</span> <span class=\"comment\">// 后端登录接口地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewIAMClient</span><span class=\"params\">(params *conf.Iam)</span> <span class=\"params\">(*iamClient, error)</span></span> &#123;</span><br><span class=\"line\">\tctx := context.Background()</span><br><span class=\"line\">\tprovider, err := oidc.NewProvider(ctx, params.AuthServer) <span class=\"comment\">//获取endpoint信息，但是我们的iam架构之间加了一层， 所以并没有使用这个返回结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toauth2Config := &amp;oauth2.Config&#123;</span><br><span class=\"line\">\t\tClientID:     params.ClientID,</span><br><span class=\"line\">\t\tClientSecret: params.ClientSecret,</span><br><span class=\"line\">\t\tRedirectURL:  params.LoginCallbackAddr,</span><br><span class=\"line\">\t\t<span class=\"comment\">// Discovery returns the OAuth2 endpoints.</span></span><br><span class=\"line\">\t\tEndpoint: provider.Endpoint(),</span><br><span class=\"line\">\t\t<span class=\"comment\">// &quot;openid&quot; is a required scope for OpenID Connect flows.</span></span><br><span class=\"line\">\t\tScopes: []<span class=\"keyword\">string</span>&#123;oidc.ScopeOpenID, <span class=\"string\">&quot;profile&quot;</span>, <span class=\"string\">&quot;email&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toidcConfig := &amp;oidc.Config&#123;</span><br><span class=\"line\">\t\tClientID:          params.ClientID,</span><br><span class=\"line\">\t\tSkipClientIDCheck: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tverifier := provider.Verifier(oidcConfig)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;iamClient&#123;</span><br><span class=\"line\">\t\toauth2Cfg:      oauth2Config,</span><br><span class=\"line\">\t\toidcVerifier:   verifier,</span><br><span class=\"line\">\t\tstate:          strconv.FormatInt(time.Now().Unix(), <span class=\"number\">10</span>), <span class=\"comment\">//理论上需要随机生成，随机生成 需要用额外的存储 才能校验</span></span><br><span class=\"line\">\t\tfeRedirectURL:  params.FeLoginCallbackAddr,</span><br><span class=\"line\">\t\tserverLoginUrl: params.ServerLoginUrl,</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由接口实现\"><a href=\"#路由接口实现\" class=\"headerlink\" title=\"路由接口实现\"></a>路由接口实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> UserRepo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tIam *IAM</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// LoginUrlHandler 获取iam登录地址接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserRepo)</span> <span class=\"title\">LoginUrlHandler</span><span class=\"params\">(ctx context.Context)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> u.Iam.oauth2Cfg.AuthCodeURL(u.Iam.state)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LoginCallback 授权码验证接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserRepo)</span> <span class=\"title\">LoginCallback</span><span class=\"params\">(ctx context.Context, state, code <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">//验证iam返回的state</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> state != u.Iam.state &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//iam返回的授权码code 去交换token</span></span><br><span class=\"line\">\toauth2Token, err := u.Iam.oauth2Cfg.Exchange(ctx, code)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//取出access_token 因为iam从oidc退化了 所以 取access_token 正常是取 id_token</span></span><br><span class=\"line\">  <span class=\"comment\">//rawIDToken, ok := oauth2Token.Extra(&quot;id_token&quot;).(string)</span></span><br><span class=\"line\">\taccessToken, ok := oauth2Token.Extra(<span class=\"string\">&quot;access_token&quot;</span>).(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//从access token中解析 用户信息</span></span><br><span class=\"line\">\tidToken, err := u.Iam.oidcVerifier.Verify(ctx, accessToken)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//iam认证成功 可以开始创建本地token</span></span><br><span class=\"line\">  <span class=\"comment\">// ... 自己撸代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Redirect iam登录成功回调接口</span></span><br><span class=\"line\"><span class=\"comment\">// ctx根据自己的业务自己改造</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserRepo)</span> <span class=\"title\">RedirectHandler</span><span class=\"params\">(ctx *http.Request)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tquery := ctx.URL.RawQuery</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> u.Iam.feRedirectURL + <span class=\"string\">&quot;?&quot;</span> + query + <span class=\"string\">&quot;#/cost/dashboard&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>IAM：</strong>Identity and Access Management的缩写，即身份识别与访问管理，具有单点登录(SSO-Single Sign On)，认证管理，基于策略的集中式授权和审计，动态授权等功能。</p>\n<p><strong>keycloak：</strong>是IAM的解决方案，用于管理用户的注册、登录、单点登录Single Sign On（SSO）、开放app接口的授权等。</p>","more":"<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>keycloak并没有提供go的接入适配器，所以需要我们自行实现。接入keycloak有两种常用的认证方式：</p>\n<ol>\n<li>OpenID Connect（oidc）：在oauth2.0上的一种授权认证协议，OIDC使用OAuth2的授权服务器来为第三方客户端提供用户的身份认证，并把对应的身份认证信息传递给客户端，且可以适用于各种类型的客户端（比如服务端应用，移动APP，JS应用），且完全兼容OAuth2，也就是说你搭建了一个OIDC的服务后，也可以当作一个OAuth2的服务来用。</li>\n<li>SAML：认证授权协议</li>\n</ol>\n<p>两种方式都可接入，oidc会相对简单一点。（当然，还得看我们iam是否有配置两种协议的endpoint）</p>\n<p>我们选择用oidc的认证方式接入IAM。OIDC是OpenID Connect的简称，OIDC=(Identity, Authentication) + OAuth 2.0。它在OAuth2上构建了一个身份层，是一个基于OAuth2协议的身份认证标准协议。具体可以参考文档：<a href=\"https://www.cnblogs.com/linianhui/p/openid-connect-core.html#auto-id-0\">https://www.cnblogs.com/linianhui/p/openid-connect-core.html#auto-id-0</a></p>\n<p>go生态有go-oidc和oauth2.0组件，可以帮助我们解决和iam交互工作，我们只需负责提供认证流程需要的接口即可。认证交互流程图：</p>\n<p><img src=\"https://102er.github.io/uploads/iam-login.png\" alt=\"osi\"></p>\n<h3 id=\"oidc和oauth初始化\"><a href=\"#oidc和oauth初始化\" class=\"headerlink\" title=\"oidc和oauth初始化\"></a><strong>oidc和oauth初始化</strong></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> IAM <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\toauth2Cfg      *oauth2.Config</span><br><span class=\"line\">\toidcVerifier   *oidc.IDTokenVerifier</span><br><span class=\"line\">\tstate          <span class=\"keyword\">string</span> <span class=\"comment\">//随机状态 目前是固定的</span></span><br><span class=\"line\">\tfeRedirectURL  <span class=\"keyword\">string</span> <span class=\"comment\">//前端回调地址</span></span><br><span class=\"line\">\tserverLoginUrl <span class=\"keyword\">string</span> <span class=\"comment\">//服务端登录接口</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Iam <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tClientID            <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,1,opt,name=ClientID,proto3&quot; json:&quot;ClientID,omitempty&quot;`</span>                       <span class=\"comment\">// 客户端名称从keycloak 中获取，resource</span></span><br><span class=\"line\">\tClientSecret        <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=ClientSecret,proto3&quot; json:&quot;ClientSecret,omitempty&quot;`</span>               <span class=\"comment\">// 客户端密钥从keycloak 中获取，credentials.secret</span></span><br><span class=\"line\">\tLogoutCallbackAddr  <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,3,opt,name=LogoutCallbackAddr,proto3&quot; json:&quot;LogoutCallbackAddr,omitempty&quot;`</span>   <span class=\"comment\">// IAM登出之后的回调地址</span></span><br><span class=\"line\">\tLoginCallbackAddr   <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=LoginCallbackAddr,proto3&quot; json:&quot;LoginCallbackAddr,omitempty&quot;`</span>     <span class=\"comment\">// IAM登录成功之后 应该回调的前端地址</span></span><br><span class=\"line\">\tFeLoginCallbackAddr <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,5,opt,name=FeLoginCallbackAddr,proto3&quot; json:&quot;FeLoginCallbackAddr,omitempty&quot;`</span> <span class=\"comment\">// 登录成功之后，前端回调地址</span></span><br><span class=\"line\">\tAuthServer          <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,6,opt,name=AuthServer,proto3&quot; json:&quot;AuthServer,omitempty&quot;`</span> <span class=\"comment\">// IAM授权地址</span></span><br><span class=\"line\">\tServerLoginUrl      <span class=\"keyword\">string</span> <span class=\"string\">`protobuf:&quot;bytes,9,opt,name=ServerLoginUrl,proto3&quot; json:&quot;ServerLoginUrl,omitempty&quot;`</span> <span class=\"comment\">// 后端登录接口地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewIAMClient</span><span class=\"params\">(params *conf.Iam)</span> <span class=\"params\">(*iamClient, error)</span></span> &#123;</span><br><span class=\"line\">\tctx := context.Background()</span><br><span class=\"line\">\tprovider, err := oidc.NewProvider(ctx, params.AuthServer) <span class=\"comment\">//获取endpoint信息，但是我们的iam架构之间加了一层， 所以并没有使用这个返回结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toauth2Config := &amp;oauth2.Config&#123;</span><br><span class=\"line\">\t\tClientID:     params.ClientID,</span><br><span class=\"line\">\t\tClientSecret: params.ClientSecret,</span><br><span class=\"line\">\t\tRedirectURL:  params.LoginCallbackAddr,</span><br><span class=\"line\">\t\t<span class=\"comment\">// Discovery returns the OAuth2 endpoints.</span></span><br><span class=\"line\">\t\tEndpoint: provider.Endpoint(),</span><br><span class=\"line\">\t\t<span class=\"comment\">// &quot;openid&quot; is a required scope for OpenID Connect flows.</span></span><br><span class=\"line\">\t\tScopes: []<span class=\"keyword\">string</span>&#123;oidc.ScopeOpenID, <span class=\"string\">&quot;profile&quot;</span>, <span class=\"string\">&quot;email&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toidcConfig := &amp;oidc.Config&#123;</span><br><span class=\"line\">\t\tClientID:          params.ClientID,</span><br><span class=\"line\">\t\tSkipClientIDCheck: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tverifier := provider.Verifier(oidcConfig)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;iamClient&#123;</span><br><span class=\"line\">\t\toauth2Cfg:      oauth2Config,</span><br><span class=\"line\">\t\toidcVerifier:   verifier,</span><br><span class=\"line\">\t\tstate:          strconv.FormatInt(time.Now().Unix(), <span class=\"number\">10</span>), <span class=\"comment\">//理论上需要随机生成，随机生成 需要用额外的存储 才能校验</span></span><br><span class=\"line\">\t\tfeRedirectURL:  params.FeLoginCallbackAddr,</span><br><span class=\"line\">\t\tserverLoginUrl: params.ServerLoginUrl,</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由接口实现\"><a href=\"#路由接口实现\" class=\"headerlink\" title=\"路由接口实现\"></a>路由接口实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> UserRepo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tIam *IAM</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// LoginUrlHandler 获取iam登录地址接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserRepo)</span> <span class=\"title\">LoginUrlHandler</span><span class=\"params\">(ctx context.Context)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> u.Iam.oauth2Cfg.AuthCodeURL(u.Iam.state)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LoginCallback 授权码验证接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserRepo)</span> <span class=\"title\">LoginCallback</span><span class=\"params\">(ctx context.Context, state, code <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">//验证iam返回的state</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> state != u.Iam.state &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//iam返回的授权码code 去交换token</span></span><br><span class=\"line\">\toauth2Token, err := u.Iam.oauth2Cfg.Exchange(ctx, code)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//取出access_token 因为iam从oidc退化了 所以 取access_token 正常是取 id_token</span></span><br><span class=\"line\">  <span class=\"comment\">//rawIDToken, ok := oauth2Token.Extra(&quot;id_token&quot;).(string)</span></span><br><span class=\"line\">\taccessToken, ok := oauth2Token.Extra(<span class=\"string\">&quot;access_token&quot;</span>).(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//从access token中解析 用户信息</span></span><br><span class=\"line\">\tidToken, err := u.Iam.oidcVerifier.Verify(ctx, accessToken)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//认证失败 自定义返回错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//iam认证成功 可以开始创建本地token</span></span><br><span class=\"line\">  <span class=\"comment\">// ... 自己撸代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Redirect iam登录成功回调接口</span></span><br><span class=\"line\"><span class=\"comment\">// ctx根据自己的业务自己改造</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(u *UserRepo)</span> <span class=\"title\">RedirectHandler</span><span class=\"params\">(ctx *http.Request)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tquery := ctx.URL.RawQuery</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> u.Iam.feRedirectURL + <span class=\"string\">&quot;?&quot;</span> + query + <span class=\"string\">&quot;#/cost/dashboard&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"TCP三次握手和四次挥手","date":"2021-06-09T06:26:02.000Z","_content":"\n## 简介\n\nTCP 是一种面向连接的、可靠的、基于字节流的传输层通信协议，位于网络分层模型的传输层：\n\n![osi](https://102er.github.io/images/osi-model.png)\n\n- 面向连接：两个端必须建立tcp连接，才能通讯交换数据。\n- 基于字节流：tcp连接双方的数据交换是以字节构成的有序但无结构的字节流。\n- 可靠性：通过连接管理，流量控制，拥塞控制，超时重传机制，序号和确认序号等机制保证传输可靠。\n\n<!-- more -->\n\n## TCP报文段\n\n![osi](https://102er.github.io/images/tcp-bw.png)\n\n- 端口号：每个tcp报文包含源和目的端口号，2字节的端口号，端口号+ip可以组成一个socket\n- 序号（seq）：数据序号，表示这个数据流在整个数据流中的序号，接收端可以根据序号组装数据\n- 确认序号（ack）：确认序号，接收方成功接收数据，会回复发送端，并把接收的序号+1，告诉发送端自己接收了哪个序号的数据，下次数据要从ack序号开始发\n- 首部长度：记录tcp头的长度，tcp\n- 保留位：暂时没用\n- 标志位：标记请求的目的，状态等\n  - URG：值为 1 时，紧急指针生效，表示本次报文需要尽快传输，不要按照原本的队列次序传输\n  - ACK：值为 1 时，确认序号生效，表示数据已经被接收\n  - PSH：接收方应尽快将这个报文段交给应用层\n  - RST：发送端遇到问题，想要释放当前连接，重建传输连接。\n  - SYN：同步序号，用于发起一个连接\n  - FIN：发送端要求关闭连接\n- 窗口：TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收的字节。\n- 检验和 (Checksum)：强制性必须携带的字段。检验和覆盖了整个 TCP 报文段，包括 TCP 首部和 TCP 数据，发送端根据特定算法对整个报文段计算出一个检验和，接收端会进行计算并验证。\n- 紧急指针 (Urgent Pointer)：当 URG 控制位值为 1 时，此字段生效，紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n- 选项 (Options)：这一部分是可选字段，也就是非必须字段，最常见的可选字段是“最长报文大小 (MSS，Maximum Segment Size)”。\n- 有效数据部分 (Data)：这部分也不是必须的，比如在建立和关闭 TCP 连接的阶段，双方交换的报文段就只包含 TCP 首部。\n\n## 三次握手\n\n![osi](https://102er.github.io/images/tcp-3ws.png)\n\n1. 第一次握手：客户端向服务端发送连接请求报文。此时标志位：SYN=1，同时会初始化一个序列号x 填充到 seq序号位。发送完，客户端进入syn-send状态，等待服务端的确认。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u>\n2. 第二次握手：服务端接收报文之后，如果同意连接，会发出确认报文，包含标志位：SYN=1,ACK=1，确认序号ack=x+1(<u>x是客户端发送的seq序号值，序号+1代表服务端期望下次接收到客户的数据序号为x+1</u>)，序号seq=y。发送完报文，服务端进入syn-received状态。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u>\n3. 第三次握手：客户端接收到确认报文，还需要向服务端给出确认报文，包含标志位：ACK=1，确认序号ack=y+1，序号seq=x+1，此时，tcp连接建立，客户端进入established。<u>TCP规定，ACK报文段可以携带数据，但如果不携带数据，则不消化序号。</u>当服务端接收到客户端的确认报文后也进入established。此后，双方就可以开始通信了。\n\n### 为什么三次握手？\n\n- 防止已过期的连接请求报文突然又传到服务器，浪费服务器资源\n  - 第三次握手可以对失效请求报文，进行确认，当他接收了失效请求报文会回复，如果客户端是关闭状态的，那没办法进行确认请求，所以服务端收不到客户端确认报文，会判断客户端并没有提交请求连接。（**失效请求**：客户端发送了第一次握手，但是网络因素滞留。客户端迟迟没有接收到服务端的确认报文，会再次发送握手请求。那么此时，第一次发送的握手请求就是失效的。）\n- 三次握手才能确认让双方确认彼此的发送和接收能力\n  - 第一次握手，服务端可以确认自己的<u>接收</u>能力和客户端的<u>发送</u>能力 \n  - 第二次握手，客户端可以确认自己的<u>收发</u>能力和服务端的<u>收发</u>能力 \n  - 第三次握手，前两次握手，服务端并不能知道自己的<u>发送</u>能力和客户端的<u>接收</u>能力是否正常。第三次握手，服务端收到了客户端第二次握手的回应，从服务端角度可以确认自己第二次握手发送的包发送出去且客户端接收了，所以确认了自己的<u>收发</u>能力和客户端的<u>收发</u>能力。\n- 告知对方自己的初始序号值，并确认收到对方的初始序号值\n     - 三次握手，才能保证服务端发送的seq初始序号得到确认。\n\n### SYN FLOOD攻击\n\n伪造大量的源ip地址，分别向服务端发送大量的syn包，服务端返回的SYN/ACK包，因为源地址是伪造的，所以不会有应答，服务端没有收到应答，会重试并且等待一个syn time，如果超时则丢弃这个连接。这种半开连接会消耗服务端的资源，导致服务端无法正常服务。\n\n## **四次挥手**\n\n![osi](https://102er.github.io/images/tcp-4hs.png)\n\n1. 客户端发送连接释放报文段并且停止发送数据，此时标志位：FIN 标志位1，序号字段 seq = x (等于之前发送的所有数据的最后一个字节的序号加一)，然后客户端会进入 FIN-WAIT-1 状态，等待来自服务器的确认报文。<u>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</u>\n2. 服务器收到 FIN 报文后，发回确认报文，此时标志位：ACK = 1， 确认序号段 ack = x + 1，并带上自己的序号 seq = y，此时，服务器就进入 CLOSE-WAIT 状态。服务器还会通知上层的应用程序对方已经释放连接，此时 TCP 处于半关闭状态，即使客户端没有数据要发送，但是服务器还可以发送数据，客户端也还能够接收。\n3. 客户端收到服务器的 ACK 报文段后随即进入 FIN-WAIT-2 状态，此时还能收到来自服务器的数据，直到收到 FIN 报文段。\n4. 服务器发送完所有数据后，就向客户端发送连接释放报文，此时标志位：ACK=1,FIN=1,序号为seq=z，确认序号ack=x+1，随后服务器进入 LAST-ACK 状态，等待来自客户端的确认报文段。\n5. 客户端收到来自服务器的 FIN 报文段后，向服务器发送 ACK 报文，随后进入 TIME-WAIT 状态，等待 2MSL(2 * Maximum Segment Lifetime，两倍的报文段最大存活时间) ，这是任何报文段在被丢弃前能在网络中存在的最长时间，常用值有30秒、1分钟和2分钟。如无特殊情况，客户端会进入 CLOSED 状态。\n6. 服务器在接收到客户端的 ACK 报文后会随即进入 CLOSED 状态，由于没有等待时间，一般而言，服务器比客户端更早进入 CLOSED 状态。\n\n### **为什么客户端最后还要等待2MSL？**\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。去向ACK消息最大存活时间（MSL) + 来向FIN消息的最大存活时间(MSL)。这恰恰 就是**2MSL( Maximum Segment Life)。\n\n1. 保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n2. 等待2MSL时间，客户端就可以放心地释放TCP占用的资源、端口号。如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求（尽管非常保守）\n\n### **如果已经建立了连接，但是客户端突然出现故障了怎么办？**\n\nTCP还设有一个**保活计时器**，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n### **为什么建立连接是三次握手，关闭连接确是四次挥手呢？**\n\n建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必已经将全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n","source":"_posts/TCP三次握手和四次挥手.md","raw":"---\ntitle: TCP三次握手和四次挥手\ndate: 2021-06-09 14:26:02\ncategories:\n    - 网络\ntags:\n    - TCP\n---\n\n## 简介\n\nTCP 是一种面向连接的、可靠的、基于字节流的传输层通信协议，位于网络分层模型的传输层：\n\n![osi](https://102er.github.io/images/osi-model.png)\n\n- 面向连接：两个端必须建立tcp连接，才能通讯交换数据。\n- 基于字节流：tcp连接双方的数据交换是以字节构成的有序但无结构的字节流。\n- 可靠性：通过连接管理，流量控制，拥塞控制，超时重传机制，序号和确认序号等机制保证传输可靠。\n\n<!-- more -->\n\n## TCP报文段\n\n![osi](https://102er.github.io/images/tcp-bw.png)\n\n- 端口号：每个tcp报文包含源和目的端口号，2字节的端口号，端口号+ip可以组成一个socket\n- 序号（seq）：数据序号，表示这个数据流在整个数据流中的序号，接收端可以根据序号组装数据\n- 确认序号（ack）：确认序号，接收方成功接收数据，会回复发送端，并把接收的序号+1，告诉发送端自己接收了哪个序号的数据，下次数据要从ack序号开始发\n- 首部长度：记录tcp头的长度，tcp\n- 保留位：暂时没用\n- 标志位：标记请求的目的，状态等\n  - URG：值为 1 时，紧急指针生效，表示本次报文需要尽快传输，不要按照原本的队列次序传输\n  - ACK：值为 1 时，确认序号生效，表示数据已经被接收\n  - PSH：接收方应尽快将这个报文段交给应用层\n  - RST：发送端遇到问题，想要释放当前连接，重建传输连接。\n  - SYN：同步序号，用于发起一个连接\n  - FIN：发送端要求关闭连接\n- 窗口：TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收的字节。\n- 检验和 (Checksum)：强制性必须携带的字段。检验和覆盖了整个 TCP 报文段，包括 TCP 首部和 TCP 数据，发送端根据特定算法对整个报文段计算出一个检验和，接收端会进行计算并验证。\n- 紧急指针 (Urgent Pointer)：当 URG 控制位值为 1 时，此字段生效，紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n- 选项 (Options)：这一部分是可选字段，也就是非必须字段，最常见的可选字段是“最长报文大小 (MSS，Maximum Segment Size)”。\n- 有效数据部分 (Data)：这部分也不是必须的，比如在建立和关闭 TCP 连接的阶段，双方交换的报文段就只包含 TCP 首部。\n\n## 三次握手\n\n![osi](https://102er.github.io/images/tcp-3ws.png)\n\n1. 第一次握手：客户端向服务端发送连接请求报文。此时标志位：SYN=1，同时会初始化一个序列号x 填充到 seq序号位。发送完，客户端进入syn-send状态，等待服务端的确认。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u>\n2. 第二次握手：服务端接收报文之后，如果同意连接，会发出确认报文，包含标志位：SYN=1,ACK=1，确认序号ack=x+1(<u>x是客户端发送的seq序号值，序号+1代表服务端期望下次接收到客户的数据序号为x+1</u>)，序号seq=y。发送完报文，服务端进入syn-received状态。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u>\n3. 第三次握手：客户端接收到确认报文，还需要向服务端给出确认报文，包含标志位：ACK=1，确认序号ack=y+1，序号seq=x+1，此时，tcp连接建立，客户端进入established。<u>TCP规定，ACK报文段可以携带数据，但如果不携带数据，则不消化序号。</u>当服务端接收到客户端的确认报文后也进入established。此后，双方就可以开始通信了。\n\n### 为什么三次握手？\n\n- 防止已过期的连接请求报文突然又传到服务器，浪费服务器资源\n  - 第三次握手可以对失效请求报文，进行确认，当他接收了失效请求报文会回复，如果客户端是关闭状态的，那没办法进行确认请求，所以服务端收不到客户端确认报文，会判断客户端并没有提交请求连接。（**失效请求**：客户端发送了第一次握手，但是网络因素滞留。客户端迟迟没有接收到服务端的确认报文，会再次发送握手请求。那么此时，第一次发送的握手请求就是失效的。）\n- 三次握手才能确认让双方确认彼此的发送和接收能力\n  - 第一次握手，服务端可以确认自己的<u>接收</u>能力和客户端的<u>发送</u>能力 \n  - 第二次握手，客户端可以确认自己的<u>收发</u>能力和服务端的<u>收发</u>能力 \n  - 第三次握手，前两次握手，服务端并不能知道自己的<u>发送</u>能力和客户端的<u>接收</u>能力是否正常。第三次握手，服务端收到了客户端第二次握手的回应，从服务端角度可以确认自己第二次握手发送的包发送出去且客户端接收了，所以确认了自己的<u>收发</u>能力和客户端的<u>收发</u>能力。\n- 告知对方自己的初始序号值，并确认收到对方的初始序号值\n     - 三次握手，才能保证服务端发送的seq初始序号得到确认。\n\n### SYN FLOOD攻击\n\n伪造大量的源ip地址，分别向服务端发送大量的syn包，服务端返回的SYN/ACK包，因为源地址是伪造的，所以不会有应答，服务端没有收到应答，会重试并且等待一个syn time，如果超时则丢弃这个连接。这种半开连接会消耗服务端的资源，导致服务端无法正常服务。\n\n## **四次挥手**\n\n![osi](https://102er.github.io/images/tcp-4hs.png)\n\n1. 客户端发送连接释放报文段并且停止发送数据，此时标志位：FIN 标志位1，序号字段 seq = x (等于之前发送的所有数据的最后一个字节的序号加一)，然后客户端会进入 FIN-WAIT-1 状态，等待来自服务器的确认报文。<u>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</u>\n2. 服务器收到 FIN 报文后，发回确认报文，此时标志位：ACK = 1， 确认序号段 ack = x + 1，并带上自己的序号 seq = y，此时，服务器就进入 CLOSE-WAIT 状态。服务器还会通知上层的应用程序对方已经释放连接，此时 TCP 处于半关闭状态，即使客户端没有数据要发送，但是服务器还可以发送数据，客户端也还能够接收。\n3. 客户端收到服务器的 ACK 报文段后随即进入 FIN-WAIT-2 状态，此时还能收到来自服务器的数据，直到收到 FIN 报文段。\n4. 服务器发送完所有数据后，就向客户端发送连接释放报文，此时标志位：ACK=1,FIN=1,序号为seq=z，确认序号ack=x+1，随后服务器进入 LAST-ACK 状态，等待来自客户端的确认报文段。\n5. 客户端收到来自服务器的 FIN 报文段后，向服务器发送 ACK 报文，随后进入 TIME-WAIT 状态，等待 2MSL(2 * Maximum Segment Lifetime，两倍的报文段最大存活时间) ，这是任何报文段在被丢弃前能在网络中存在的最长时间，常用值有30秒、1分钟和2分钟。如无特殊情况，客户端会进入 CLOSED 状态。\n6. 服务器在接收到客户端的 ACK 报文后会随即进入 CLOSED 状态，由于没有等待时间，一般而言，服务器比客户端更早进入 CLOSED 状态。\n\n### **为什么客户端最后还要等待2MSL？**\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。去向ACK消息最大存活时间（MSL) + 来向FIN消息的最大存活时间(MSL)。这恰恰 就是**2MSL( Maximum Segment Life)。\n\n1. 保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n2. 等待2MSL时间，客户端就可以放心地释放TCP占用的资源、端口号。如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求（尽管非常保守）\n\n### **如果已经建立了连接，但是客户端突然出现故障了怎么办？**\n\nTCP还设有一个**保活计时器**，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。\n\n### **为什么建立连接是三次握手，关闭连接确是四次挥手呢？**\n\n建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必已经将全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n","slug":"TCP三次握手和四次挥手","published":1,"updated":"2021-12-14T16:21:38.592Z","_id":"ckwybtj6o00021lpe5oo92u81","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>TCP 是一种面向连接的、可靠的、基于字节流的传输层通信协议，位于网络分层模型的传输层：</p>\n<p><img src=\"https://102er.github.io/images/osi-model.png\" alt=\"osi\"></p>\n<ul>\n<li>面向连接：两个端必须建立tcp连接，才能通讯交换数据。</li>\n<li>基于字节流：tcp连接双方的数据交换是以字节构成的有序但无结构的字节流。</li>\n<li>可靠性：通过连接管理，流量控制，拥塞控制，超时重传机制，序号和确认序号等机制保证传输可靠。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"TCP报文段\"><a href=\"#TCP报文段\" class=\"headerlink\" title=\"TCP报文段\"></a>TCP报文段</h2><p><img src=\"https://102er.github.io/images/tcp-bw.png\" alt=\"osi\"></p>\n<ul>\n<li>端口号：每个tcp报文包含源和目的端口号，2字节的端口号，端口号+ip可以组成一个socket</li>\n<li>序号（seq）：数据序号，表示这个数据流在整个数据流中的序号，接收端可以根据序号组装数据</li>\n<li>确认序号（ack）：确认序号，接收方成功接收数据，会回复发送端，并把接收的序号+1，告诉发送端自己接收了哪个序号的数据，下次数据要从ack序号开始发</li>\n<li>首部长度：记录tcp头的长度，tcp</li>\n<li>保留位：暂时没用</li>\n<li>标志位：标记请求的目的，状态等<ul>\n<li>URG：值为 1 时，紧急指针生效，表示本次报文需要尽快传输，不要按照原本的队列次序传输</li>\n<li>ACK：值为 1 时，确认序号生效，表示数据已经被接收</li>\n<li>PSH：接收方应尽快将这个报文段交给应用层</li>\n<li>RST：发送端遇到问题，想要释放当前连接，重建传输连接。</li>\n<li>SYN：同步序号，用于发起一个连接</li>\n<li>FIN：发送端要求关闭连接</li>\n</ul>\n</li>\n<li>窗口：TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收的字节。</li>\n<li>检验和 (Checksum)：强制性必须携带的字段。检验和覆盖了整个 TCP 报文段，包括 TCP 首部和 TCP 数据，发送端根据特定算法对整个报文段计算出一个检验和，接收端会进行计算并验证。</li>\n<li>紧急指针 (Urgent Pointer)：当 URG 控制位值为 1 时，此字段生效，紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</li>\n<li>选项 (Options)：这一部分是可选字段，也就是非必须字段，最常见的可选字段是“最长报文大小 (MSS，Maximum Segment Size)”。</li>\n<li>有效数据部分 (Data)：这部分也不是必须的，比如在建立和关闭 TCP 连接的阶段，双方交换的报文段就只包含 TCP 首部。</li>\n</ul>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><img src=\"https://102er.github.io/images/tcp-3ws.png\" alt=\"osi\"></p>\n<ol>\n<li>第一次握手：客户端向服务端发送连接请求报文。此时标志位：SYN=1，同时会初始化一个序列号x 填充到 seq序号位。发送完，客户端进入syn-send状态，等待服务端的确认。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u></li>\n<li>第二次握手：服务端接收报文之后，如果同意连接，会发出确认报文，包含标志位：SYN=1,ACK=1，确认序号ack=x+1(<u>x是客户端发送的seq序号值，序号+1代表服务端期望下次接收到客户的数据序号为x+1</u>)，序号seq=y。发送完报文，服务端进入syn-received状态。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u></li>\n<li>第三次握手：客户端接收到确认报文，还需要向服务端给出确认报文，包含标志位：ACK=1，确认序号ack=y+1，序号seq=x+1，此时，tcp连接建立，客户端进入established。<u>TCP规定，ACK报文段可以携带数据，但如果不携带数据，则不消化序号。</u>当服务端接收到客户端的确认报文后也进入established。此后，双方就可以开始通信了。</li>\n</ol>\n<h3 id=\"为什么三次握手？\"><a href=\"#为什么三次握手？\" class=\"headerlink\" title=\"为什么三次握手？\"></a>为什么三次握手？</h3><ul>\n<li>防止已过期的连接请求报文突然又传到服务器，浪费服务器资源<ul>\n<li>第三次握手可以对失效请求报文，进行确认，当他接收了失效请求报文会回复，如果客户端是关闭状态的，那没办法进行确认请求，所以服务端收不到客户端确认报文，会判断客户端并没有提交请求连接。（<strong>失效请求</strong>：客户端发送了第一次握手，但是网络因素滞留。客户端迟迟没有接收到服务端的确认报文，会再次发送握手请求。那么此时，第一次发送的握手请求就是失效的。）</li>\n</ul>\n</li>\n<li>三次握手才能确认让双方确认彼此的发送和接收能力<ul>\n<li>第一次握手，服务端可以确认自己的<u>接收</u>能力和客户端的<u>发送</u>能力 </li>\n<li>第二次握手，客户端可以确认自己的<u>收发</u>能力和服务端的<u>收发</u>能力 </li>\n<li>第三次握手，前两次握手，服务端并不能知道自己的<u>发送</u>能力和客户端的<u>接收</u>能力是否正常。第三次握手，服务端收到了客户端第二次握手的回应，从服务端角度可以确认自己第二次握手发送的包发送出去且客户端接收了，所以确认了自己的<u>收发</u>能力和客户端的<u>收发</u>能力。</li>\n</ul>\n</li>\n<li>告知对方自己的初始序号值，并确认收到对方的初始序号值<ul>\n<li>三次握手，才能保证服务端发送的seq初始序号得到确认。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"SYN-FLOOD攻击\"><a href=\"#SYN-FLOOD攻击\" class=\"headerlink\" title=\"SYN FLOOD攻击\"></a>SYN FLOOD攻击</h3><p>伪造大量的源ip地址，分别向服务端发送大量的syn包，服务端返回的SYN/ACK包，因为源地址是伪造的，所以不会有应答，服务端没有收到应答，会重试并且等待一个syn time，如果超时则丢弃这个连接。这种半开连接会消耗服务端的资源，导致服务端无法正常服务。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a><strong>四次挥手</strong></h2><p><img src=\"https://102er.github.io/images/tcp-4hs.png\" alt=\"osi\"></p>\n<ol>\n<li>客户端发送连接释放报文段并且停止发送数据，此时标志位：FIN 标志位1，序号字段 seq = x (等于之前发送的所有数据的最后一个字节的序号加一)，然后客户端会进入 FIN-WAIT-1 状态，等待来自服务器的确认报文。<u>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</u></li>\n<li>服务器收到 FIN 报文后，发回确认报文，此时标志位：ACK = 1， 确认序号段 ack = x + 1，并带上自己的序号 seq = y，此时，服务器就进入 CLOSE-WAIT 状态。服务器还会通知上层的应用程序对方已经释放连接，此时 TCP 处于半关闭状态，即使客户端没有数据要发送，但是服务器还可以发送数据，客户端也还能够接收。</li>\n<li>客户端收到服务器的 ACK 报文段后随即进入 FIN-WAIT-2 状态，此时还能收到来自服务器的数据，直到收到 FIN 报文段。</li>\n<li>服务器发送完所有数据后，就向客户端发送连接释放报文，此时标志位：ACK=1,FIN=1,序号为seq=z，确认序号ack=x+1，随后服务器进入 LAST-ACK 状态，等待来自客户端的确认报文段。</li>\n<li>客户端收到来自服务器的 FIN 报文段后，向服务器发送 ACK 报文，随后进入 TIME-WAIT 状态，等待 2MSL(2 * Maximum Segment Lifetime，两倍的报文段最大存活时间) ，这是任何报文段在被丢弃前能在网络中存在的最长时间，常用值有30秒、1分钟和2分钟。如无特殊情况，客户端会进入 CLOSED 状态。</li>\n<li>服务器在接收到客户端的 ACK 报文后会随即进入 CLOSED 状态，由于没有等待时间，一般而言，服务器比客户端更早进入 CLOSED 状态。</li>\n</ol>\n<h3 id=\"为什么客户端最后还要等待2MSL？\"><a href=\"#为什么客户端最后还要等待2MSL？\" class=\"headerlink\" title=\"为什么客户端最后还要等待2MSL？\"></a><strong>为什么客户端最后还要等待2MSL？</strong></h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。去向ACK消息最大存活时间（MSL) + 来向FIN消息的最大存活时间(MSL)。这恰恰 就是**2MSL( Maximum Segment Life)。</p>\n<ol>\n<li>保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</li>\n<li>等待2MSL时间，客户端就可以放心地释放TCP占用的资源、端口号。如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求（尽管非常保守）</li>\n</ol>\n<h3 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></h3><p>TCP还设有一个<strong>保活计时器</strong>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n<h3 id=\"为什么建立连接是三次握手，关闭连接确是四次挥手呢？\"><a href=\"#为什么建立连接是三次握手，关闭连接确是四次挥手呢？\" class=\"headerlink\" title=\"为什么建立连接是三次握手，关闭连接确是四次挥手呢？\"></a><strong>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</strong></h3><p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必已经将全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>TCP 是一种面向连接的、可靠的、基于字节流的传输层通信协议，位于网络分层模型的传输层：</p>\n<p><img src=\"https://102er.github.io/images/osi-model.png\" alt=\"osi\"></p>\n<ul>\n<li>面向连接：两个端必须建立tcp连接，才能通讯交换数据。</li>\n<li>基于字节流：tcp连接双方的数据交换是以字节构成的有序但无结构的字节流。</li>\n<li>可靠性：通过连接管理，流量控制，拥塞控制，超时重传机制，序号和确认序号等机制保证传输可靠。</li>\n</ul>","more":"<h2 id=\"TCP报文段\"><a href=\"#TCP报文段\" class=\"headerlink\" title=\"TCP报文段\"></a>TCP报文段</h2><p><img src=\"https://102er.github.io/images/tcp-bw.png\" alt=\"osi\"></p>\n<ul>\n<li>端口号：每个tcp报文包含源和目的端口号，2字节的端口号，端口号+ip可以组成一个socket</li>\n<li>序号（seq）：数据序号，表示这个数据流在整个数据流中的序号，接收端可以根据序号组装数据</li>\n<li>确认序号（ack）：确认序号，接收方成功接收数据，会回复发送端，并把接收的序号+1，告诉发送端自己接收了哪个序号的数据，下次数据要从ack序号开始发</li>\n<li>首部长度：记录tcp头的长度，tcp</li>\n<li>保留位：暂时没用</li>\n<li>标志位：标记请求的目的，状态等<ul>\n<li>URG：值为 1 时，紧急指针生效，表示本次报文需要尽快传输，不要按照原本的队列次序传输</li>\n<li>ACK：值为 1 时，确认序号生效，表示数据已经被接收</li>\n<li>PSH：接收方应尽快将这个报文段交给应用层</li>\n<li>RST：发送端遇到问题，想要释放当前连接，重建传输连接。</li>\n<li>SYN：同步序号，用于发起一个连接</li>\n<li>FIN：发送端要求关闭连接</li>\n</ul>\n</li>\n<li>窗口：TCP的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端正期望接收的字节。</li>\n<li>检验和 (Checksum)：强制性必须携带的字段。检验和覆盖了整个 TCP 报文段，包括 TCP 首部和 TCP 数据，发送端根据特定算法对整个报文段计算出一个检验和，接收端会进行计算并验证。</li>\n<li>紧急指针 (Urgent Pointer)：当 URG 控制位值为 1 时，此字段生效，紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</li>\n<li>选项 (Options)：这一部分是可选字段，也就是非必须字段，最常见的可选字段是“最长报文大小 (MSS，Maximum Segment Size)”。</li>\n<li>有效数据部分 (Data)：这部分也不是必须的，比如在建立和关闭 TCP 连接的阶段，双方交换的报文段就只包含 TCP 首部。</li>\n</ul>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><img src=\"https://102er.github.io/images/tcp-3ws.png\" alt=\"osi\"></p>\n<ol>\n<li>第一次握手：客户端向服务端发送连接请求报文。此时标志位：SYN=1，同时会初始化一个序列号x 填充到 seq序号位。发送完，客户端进入syn-send状态，等待服务端的确认。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u></li>\n<li>第二次握手：服务端接收报文之后，如果同意连接，会发出确认报文，包含标志位：SYN=1,ACK=1，确认序号ack=x+1(<u>x是客户端发送的seq序号值，序号+1代表服务端期望下次接收到客户的数据序号为x+1</u>)，序号seq=y。发送完报文，服务端进入syn-received状态。<u>TCP规定SYN=1的报文不能携带数据，但需要消耗一个序号。</u></li>\n<li>第三次握手：客户端接收到确认报文，还需要向服务端给出确认报文，包含标志位：ACK=1，确认序号ack=y+1，序号seq=x+1，此时，tcp连接建立，客户端进入established。<u>TCP规定，ACK报文段可以携带数据，但如果不携带数据，则不消化序号。</u>当服务端接收到客户端的确认报文后也进入established。此后，双方就可以开始通信了。</li>\n</ol>\n<h3 id=\"为什么三次握手？\"><a href=\"#为什么三次握手？\" class=\"headerlink\" title=\"为什么三次握手？\"></a>为什么三次握手？</h3><ul>\n<li>防止已过期的连接请求报文突然又传到服务器，浪费服务器资源<ul>\n<li>第三次握手可以对失效请求报文，进行确认，当他接收了失效请求报文会回复，如果客户端是关闭状态的，那没办法进行确认请求，所以服务端收不到客户端确认报文，会判断客户端并没有提交请求连接。（<strong>失效请求</strong>：客户端发送了第一次握手，但是网络因素滞留。客户端迟迟没有接收到服务端的确认报文，会再次发送握手请求。那么此时，第一次发送的握手请求就是失效的。）</li>\n</ul>\n</li>\n<li>三次握手才能确认让双方确认彼此的发送和接收能力<ul>\n<li>第一次握手，服务端可以确认自己的<u>接收</u>能力和客户端的<u>发送</u>能力 </li>\n<li>第二次握手，客户端可以确认自己的<u>收发</u>能力和服务端的<u>收发</u>能力 </li>\n<li>第三次握手，前两次握手，服务端并不能知道自己的<u>发送</u>能力和客户端的<u>接收</u>能力是否正常。第三次握手，服务端收到了客户端第二次握手的回应，从服务端角度可以确认自己第二次握手发送的包发送出去且客户端接收了，所以确认了自己的<u>收发</u>能力和客户端的<u>收发</u>能力。</li>\n</ul>\n</li>\n<li>告知对方自己的初始序号值，并确认收到对方的初始序号值<ul>\n<li>三次握手，才能保证服务端发送的seq初始序号得到确认。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"SYN-FLOOD攻击\"><a href=\"#SYN-FLOOD攻击\" class=\"headerlink\" title=\"SYN FLOOD攻击\"></a>SYN FLOOD攻击</h3><p>伪造大量的源ip地址，分别向服务端发送大量的syn包，服务端返回的SYN/ACK包，因为源地址是伪造的，所以不会有应答，服务端没有收到应答，会重试并且等待一个syn time，如果超时则丢弃这个连接。这种半开连接会消耗服务端的资源，导致服务端无法正常服务。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a><strong>四次挥手</strong></h2><p><img src=\"https://102er.github.io/images/tcp-4hs.png\" alt=\"osi\"></p>\n<ol>\n<li>客户端发送连接释放报文段并且停止发送数据，此时标志位：FIN 标志位1，序号字段 seq = x (等于之前发送的所有数据的最后一个字节的序号加一)，然后客户端会进入 FIN-WAIT-1 状态，等待来自服务器的确认报文。<u>TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</u></li>\n<li>服务器收到 FIN 报文后，发回确认报文，此时标志位：ACK = 1， 确认序号段 ack = x + 1，并带上自己的序号 seq = y，此时，服务器就进入 CLOSE-WAIT 状态。服务器还会通知上层的应用程序对方已经释放连接，此时 TCP 处于半关闭状态，即使客户端没有数据要发送，但是服务器还可以发送数据，客户端也还能够接收。</li>\n<li>客户端收到服务器的 ACK 报文段后随即进入 FIN-WAIT-2 状态，此时还能收到来自服务器的数据，直到收到 FIN 报文段。</li>\n<li>服务器发送完所有数据后，就向客户端发送连接释放报文，此时标志位：ACK=1,FIN=1,序号为seq=z，确认序号ack=x+1，随后服务器进入 LAST-ACK 状态，等待来自客户端的确认报文段。</li>\n<li>客户端收到来自服务器的 FIN 报文段后，向服务器发送 ACK 报文，随后进入 TIME-WAIT 状态，等待 2MSL(2 * Maximum Segment Lifetime，两倍的报文段最大存活时间) ，这是任何报文段在被丢弃前能在网络中存在的最长时间，常用值有30秒、1分钟和2分钟。如无特殊情况，客户端会进入 CLOSED 状态。</li>\n<li>服务器在接收到客户端的 ACK 报文后会随即进入 CLOSED 状态，由于没有等待时间，一般而言，服务器比客户端更早进入 CLOSED 状态。</li>\n</ol>\n<h3 id=\"为什么客户端最后还要等待2MSL？\"><a href=\"#为什么客户端最后还要等待2MSL？\" class=\"headerlink\" title=\"为什么客户端最后还要等待2MSL？\"></a><strong>为什么客户端最后还要等待2MSL？</strong></h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。去向ACK消息最大存活时间（MSL) + 来向FIN消息的最大存活时间(MSL)。这恰恰 就是**2MSL( Maximum Segment Life)。</p>\n<ol>\n<li>保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</li>\n<li>等待2MSL时间，客户端就可以放心地释放TCP占用的资源、端口号。如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求（尽管非常保守）</li>\n</ol>\n<h3 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></h3><p>TCP还设有一个<strong>保活计时器</strong>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n<h3 id=\"为什么建立连接是三次握手，关闭连接确是四次挥手呢？\"><a href=\"#为什么建立连接是三次握手，关闭连接确是四次挥手呢？\" class=\"headerlink\" title=\"为什么建立连接是三次握手，关闭连接确是四次挥手呢？\"></a><strong>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</strong></h3><p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必已经将全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>"},{"title":"go之xx问","date":"2021-08-09T06:29:55.000Z","_content":"\n#### `T`和`*T`的调用关系\n\n在Go语言中，为了方便，对于一个非指针和非接口定义类型`T`，\n\n- 一个`T`类型的值可以调用为`*T`类型声明的方法，但是仅当此`T`的值是可寻址的情况下。 编译器在调用指针属主方法前，会自动取此`T`值的地址。 因为不是任何`T`值都是可寻址的，所以并非任何`T`值都能够调用为类型`*T`声明的方法。 这种便利只是一个语法糖，而不是一种固有的规则。（常量不可寻址）\n- 一个`*T`类型的值可以调用为类型`T`声明的方法。 这是因为解引用指针总是合法的。 这种便利不仅仅是一个语法糖，它也是一种固有的规则。\n\n所以很合理的， `*T`的方法集总是`T`方法集的超集，但反之不然。\n\n事实上，你可以认为对于每一个为类型`T`声明的方法，编译器都会为类型`*T`自动隐式声明一个同名和同签名的方法。\n\n<!-- more -->\n\n#### for和range区别\n\nrange 在迭代过程中返回的是迭代值的拷贝，如果每次迭代的元素的内存占用很低，那么 for 和 range 的性能几乎是一样。但是如果迭代的元素内存占用较高，例如一个包含很多属性的 struct 结构体，那么 for 的性能将显著地高于 range，有时候甚至会有上千倍的性能差异。对于这种场景，建议使用 for，如果使用 range，建议只迭代下标，通过下标访问迭代值，这种使用方式和 for 就没有区别了。如果想使用 range 同时迭代下标和值，则需要将切片/数组的元素改为指针，才能不影响性能。\n\n#### 数组和切片区别\n\n数组是不可变的数据类型，线程安全\n\n切片是动态可变的数据结构，包含长度，容量以及指向数组的应用，线程不安全\n\n#### rune数据类型\n\nrune是Go语言中一种特殊的数据类型,它是int32的别名,几乎在所有方面等同于int32,用于区分字符值和整数值。\n\n补充：golang中的字符有两种，uint8（byte）代表ASCII的一个字符，rune代表一个utf-8字符。\n\n理解：当需要处理中文、日文或者其他复合字符时，则需要用到rune类型，rune实际是一个int32.\n\n#### init函数\n\n- 不同包的 `init()`执行顺序，按照 `导入包的依赖关系` 决定\n- `init()` 不能被其他函数调用，而自动 `在main函数执行前` 被调用\n- 执行顺序：import –> const –> var –> init() –> main()\n\n#### make和new的区别\n\n- new可以初始化所有类型，为类型申请一块内存空间并返回一个指针\n- make只能用于map ，channel，slice初始化，返回的是类型引用\n\n#### 什么是协程泄露(Goroutine Leak)？\n\ngo协程正常结束后，会被gc回收，但是如果一些操作不当，就会引起协程一直处于阻塞状态或者永远运行，这种情况就是协程泄漏了，他会一直消耗资源，直到系统奔溃。泄漏的场景：\n\n- Goroutine 内正在进行 channel/mutex 等读写操作，但由于逻辑问题，某些情况下会被一直阻塞。\n- Goroutine 内的业务逻辑进入死循环，资源一直无法释放。\n- Goroutine 内的业务逻辑进入长时间等待，有不断新增的 Goroutine 进入等待。\n\n检测工具：uber-go/goleak\n\n#### 赋值是原子操作吗？\n\n不是原子操作，会有并发安全问题。设计struct赋值的数据类型 都是并发不安全的 比如slice map等\n\n#### `time.Sleep(d)`和`<-time.After(d)`有何区别？\n\n两者都会将当前的goroutine执行暂停一段时间。 区别在于`time.Sleep(d)`函数调用将使当前的协程进入睡眠子状态，但是当前协程的[（主）状态](https://gfw.go101.org/article/control-flows-more.html#states-of-goroutine)依然为运行状态； 而通道接收`<-time.After(d)`操作将使当前协程进入阻塞状态。\n\n#### 哪些类型不支持比较？\n\n下列类型不支持比较：映射（map、切片、函数、包含不可比较字段的结构体类型、元素类型为不可比较类型的数组类型\n\n不支持比较的类型不能用做映射类型的键值类型。请注意：\n\n- 尽管映射，切片和函数值不支持比较，但是它们的值可以与类型不确定的`nil`标识符比较。\n- 如果两个接口值的动态类型相同且不可比较，那么在运行时[比较这两个接口的值](https://gfw.go101.org/article/interface.html#comparison)会产生一个恐慌。\n\n#### 为什么两个`nil`值有时候会不相等？\n\n一个接口值可以看作是一个包裹非接口值的盒子。被包裹在一个接口值中的非接口值的类型必须实现了此接口值的类型。 在Go中，很多种类型的类型的零值都是用`nil`来表示的。 一个什么都没包裹的接口值为一个零值接口值，即nil接口值。 一个包裹着其它非接口类型的nil值的接口值并非什么都没包裹，所以它不是（或者说它不等于）一个nil接口值。\n\n当对一个nil接口值和一个nil非接口值进行比较时（假设它们可以比较），此nil非接口值将先被转换为nil接口值的类型，然后再进行比较； 此转换的结果为一个包裹了此nil非接口值的一个副本的接口值，此接口值不是（或者说它不等于）一个nil接口值，所以此比较不相等。\n\n#### 哪些值可以被取地址，哪些值不可以被取地址？\n\n以下的值是不可以寻址的：\n\n- 字符串的字节元素\n- 映射元素\n- 接口值的动态值（类型断言的结果）\n- 常量（包括有名常量和字面量）\n- 声明的包级别函数\n- 方法（用做函数值）\n- 中间结果值\n  - 函数调用\n  - 显式值转换\n  - 各种操作，不包含指针解引用（dereference）操作，但是包含：\n    - 通道接收操作\n    - 子字符串操作\n    - 子切片操作\n    - 加法、减法、乘法、以及除法等等。\n\n以下的值是可寻址的，因此可以被取地址：变量\n\n可寻址的结构体的字段\n\n- 可寻址的数组的元素\n- 任意切片的元素（无论是可寻址切片或不可寻址切片）\n- 指针解引用（dereference）操作\n\n#### 为什么映射元素不可被取地址？\n\n在Go中，映射的设计保证一个映射值在内存允许的情况下可以加入任意个条目。 另外为了防止一个映射中为其条目开辟的内存段支离破碎，官方标准编译器使用了哈希表来实现映射。 并且为了保证元素索引的效率，一个映射值的底层哈希表只为其中的所有条目维护一段连续的内存段。 因此，一个映射值随着其中的条目数量逐渐增加时，其维护的连续的内存段需要不断重新开辟来增容，并把原来内存段上的条目全部复制到新开辟的内存段上。 另外，即使一个映射值维护的内存段没有增容，某些哈希表实现也可能在当前内存段中移动其中的条目。 总之，映射中的元素的地址会因为各种原因而改变。 如果映射元素可以被取地址，则Go运行时（runtime）必须在元素地址改变的时候修改所有存储了元素地址的指针值。 这极大得增加了Go编译器和运行时的实现难度，并且严重影响了程序运行效率。 因此，目前，Go中禁止取映射元素的地址。\n\n映射元素不可被取地址的另一个原因是表达式`aMap[key]`可能返回一个存储于`aMap`中的元素，也可能返回一个不存储于其中的元素零值。 这意味着表达式`aMap[key]`在`(&aMap[key]).Modify()`调用执行之后可能仍然被估值为元素零值。 这将使很多人感到困惑，因此在Go中禁止取映射元素的地址。\n\n#### 函数返回局部变量的指针是否安全？\n\n是的，在Go中这是绝对安全的。\n\n支持栈的Go编译器将会对每个局部变量进行逃逸分析。 对于官方标准编译器来说，如果一个值可以在编译时刻被断定它在运行时刻仅会在一个协程中被使用，则此值将被开辟在（此协程的）栈上；否则此值将被开辟在堆上。\n","source":"_posts/go之xx问.md","raw":"---\ntitle: go之xx问\ndate: 2021-08-09 14:29:55\ntags: GO\n---\n\n#### `T`和`*T`的调用关系\n\n在Go语言中，为了方便，对于一个非指针和非接口定义类型`T`，\n\n- 一个`T`类型的值可以调用为`*T`类型声明的方法，但是仅当此`T`的值是可寻址的情况下。 编译器在调用指针属主方法前，会自动取此`T`值的地址。 因为不是任何`T`值都是可寻址的，所以并非任何`T`值都能够调用为类型`*T`声明的方法。 这种便利只是一个语法糖，而不是一种固有的规则。（常量不可寻址）\n- 一个`*T`类型的值可以调用为类型`T`声明的方法。 这是因为解引用指针总是合法的。 这种便利不仅仅是一个语法糖，它也是一种固有的规则。\n\n所以很合理的， `*T`的方法集总是`T`方法集的超集，但反之不然。\n\n事实上，你可以认为对于每一个为类型`T`声明的方法，编译器都会为类型`*T`自动隐式声明一个同名和同签名的方法。\n\n<!-- more -->\n\n#### for和range区别\n\nrange 在迭代过程中返回的是迭代值的拷贝，如果每次迭代的元素的内存占用很低，那么 for 和 range 的性能几乎是一样。但是如果迭代的元素内存占用较高，例如一个包含很多属性的 struct 结构体，那么 for 的性能将显著地高于 range，有时候甚至会有上千倍的性能差异。对于这种场景，建议使用 for，如果使用 range，建议只迭代下标，通过下标访问迭代值，这种使用方式和 for 就没有区别了。如果想使用 range 同时迭代下标和值，则需要将切片/数组的元素改为指针，才能不影响性能。\n\n#### 数组和切片区别\n\n数组是不可变的数据类型，线程安全\n\n切片是动态可变的数据结构，包含长度，容量以及指向数组的应用，线程不安全\n\n#### rune数据类型\n\nrune是Go语言中一种特殊的数据类型,它是int32的别名,几乎在所有方面等同于int32,用于区分字符值和整数值。\n\n补充：golang中的字符有两种，uint8（byte）代表ASCII的一个字符，rune代表一个utf-8字符。\n\n理解：当需要处理中文、日文或者其他复合字符时，则需要用到rune类型，rune实际是一个int32.\n\n#### init函数\n\n- 不同包的 `init()`执行顺序，按照 `导入包的依赖关系` 决定\n- `init()` 不能被其他函数调用，而自动 `在main函数执行前` 被调用\n- 执行顺序：import –> const –> var –> init() –> main()\n\n#### make和new的区别\n\n- new可以初始化所有类型，为类型申请一块内存空间并返回一个指针\n- make只能用于map ，channel，slice初始化，返回的是类型引用\n\n#### 什么是协程泄露(Goroutine Leak)？\n\ngo协程正常结束后，会被gc回收，但是如果一些操作不当，就会引起协程一直处于阻塞状态或者永远运行，这种情况就是协程泄漏了，他会一直消耗资源，直到系统奔溃。泄漏的场景：\n\n- Goroutine 内正在进行 channel/mutex 等读写操作，但由于逻辑问题，某些情况下会被一直阻塞。\n- Goroutine 内的业务逻辑进入死循环，资源一直无法释放。\n- Goroutine 内的业务逻辑进入长时间等待，有不断新增的 Goroutine 进入等待。\n\n检测工具：uber-go/goleak\n\n#### 赋值是原子操作吗？\n\n不是原子操作，会有并发安全问题。设计struct赋值的数据类型 都是并发不安全的 比如slice map等\n\n#### `time.Sleep(d)`和`<-time.After(d)`有何区别？\n\n两者都会将当前的goroutine执行暂停一段时间。 区别在于`time.Sleep(d)`函数调用将使当前的协程进入睡眠子状态，但是当前协程的[（主）状态](https://gfw.go101.org/article/control-flows-more.html#states-of-goroutine)依然为运行状态； 而通道接收`<-time.After(d)`操作将使当前协程进入阻塞状态。\n\n#### 哪些类型不支持比较？\n\n下列类型不支持比较：映射（map、切片、函数、包含不可比较字段的结构体类型、元素类型为不可比较类型的数组类型\n\n不支持比较的类型不能用做映射类型的键值类型。请注意：\n\n- 尽管映射，切片和函数值不支持比较，但是它们的值可以与类型不确定的`nil`标识符比较。\n- 如果两个接口值的动态类型相同且不可比较，那么在运行时[比较这两个接口的值](https://gfw.go101.org/article/interface.html#comparison)会产生一个恐慌。\n\n#### 为什么两个`nil`值有时候会不相等？\n\n一个接口值可以看作是一个包裹非接口值的盒子。被包裹在一个接口值中的非接口值的类型必须实现了此接口值的类型。 在Go中，很多种类型的类型的零值都是用`nil`来表示的。 一个什么都没包裹的接口值为一个零值接口值，即nil接口值。 一个包裹着其它非接口类型的nil值的接口值并非什么都没包裹，所以它不是（或者说它不等于）一个nil接口值。\n\n当对一个nil接口值和一个nil非接口值进行比较时（假设它们可以比较），此nil非接口值将先被转换为nil接口值的类型，然后再进行比较； 此转换的结果为一个包裹了此nil非接口值的一个副本的接口值，此接口值不是（或者说它不等于）一个nil接口值，所以此比较不相等。\n\n#### 哪些值可以被取地址，哪些值不可以被取地址？\n\n以下的值是不可以寻址的：\n\n- 字符串的字节元素\n- 映射元素\n- 接口值的动态值（类型断言的结果）\n- 常量（包括有名常量和字面量）\n- 声明的包级别函数\n- 方法（用做函数值）\n- 中间结果值\n  - 函数调用\n  - 显式值转换\n  - 各种操作，不包含指针解引用（dereference）操作，但是包含：\n    - 通道接收操作\n    - 子字符串操作\n    - 子切片操作\n    - 加法、减法、乘法、以及除法等等。\n\n以下的值是可寻址的，因此可以被取地址：变量\n\n可寻址的结构体的字段\n\n- 可寻址的数组的元素\n- 任意切片的元素（无论是可寻址切片或不可寻址切片）\n- 指针解引用（dereference）操作\n\n#### 为什么映射元素不可被取地址？\n\n在Go中，映射的设计保证一个映射值在内存允许的情况下可以加入任意个条目。 另外为了防止一个映射中为其条目开辟的内存段支离破碎，官方标准编译器使用了哈希表来实现映射。 并且为了保证元素索引的效率，一个映射值的底层哈希表只为其中的所有条目维护一段连续的内存段。 因此，一个映射值随着其中的条目数量逐渐增加时，其维护的连续的内存段需要不断重新开辟来增容，并把原来内存段上的条目全部复制到新开辟的内存段上。 另外，即使一个映射值维护的内存段没有增容，某些哈希表实现也可能在当前内存段中移动其中的条目。 总之，映射中的元素的地址会因为各种原因而改变。 如果映射元素可以被取地址，则Go运行时（runtime）必须在元素地址改变的时候修改所有存储了元素地址的指针值。 这极大得增加了Go编译器和运行时的实现难度，并且严重影响了程序运行效率。 因此，目前，Go中禁止取映射元素的地址。\n\n映射元素不可被取地址的另一个原因是表达式`aMap[key]`可能返回一个存储于`aMap`中的元素，也可能返回一个不存储于其中的元素零值。 这意味着表达式`aMap[key]`在`(&aMap[key]).Modify()`调用执行之后可能仍然被估值为元素零值。 这将使很多人感到困惑，因此在Go中禁止取映射元素的地址。\n\n#### 函数返回局部变量的指针是否安全？\n\n是的，在Go中这是绝对安全的。\n\n支持栈的Go编译器将会对每个局部变量进行逃逸分析。 对于官方标准编译器来说，如果一个值可以在编译时刻被断定它在运行时刻仅会在一个协程中被使用，则此值将被开辟在（此协程的）栈上；否则此值将被开辟在堆上。\n","slug":"go之xx问","published":1,"updated":"2021-12-10T07:36:47.417Z","_id":"ckx02mtjo000122pe0wnoho5e","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"T和-T的调用关系\"><a href=\"#T和-T的调用关系\" class=\"headerlink\" title=\"T和*T的调用关系\"></a><code>T</code>和<code>*T</code>的调用关系</h4><p>在Go语言中，为了方便，对于一个非指针和非接口定义类型<code>T</code>，</p>\n<ul>\n<li>一个<code>T</code>类型的值可以调用为<code>*T</code>类型声明的方法，但是仅当此<code>T</code>的值是可寻址的情况下。 编译器在调用指针属主方法前，会自动取此<code>T</code>值的地址。 因为不是任何<code>T</code>值都是可寻址的，所以并非任何<code>T</code>值都能够调用为类型<code>*T</code>声明的方法。 这种便利只是一个语法糖，而不是一种固有的规则。（常量不可寻址）</li>\n<li>一个<code>*T</code>类型的值可以调用为类型<code>T</code>声明的方法。 这是因为解引用指针总是合法的。 这种便利不仅仅是一个语法糖，它也是一种固有的规则。</li>\n</ul>\n<p>所以很合理的， <code>*T</code>的方法集总是<code>T</code>方法集的超集，但反之不然。</p>\n<p>事实上，你可以认为对于每一个为类型<code>T</code>声明的方法，编译器都会为类型<code>*T</code>自动隐式声明一个同名和同签名的方法。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"for和range区别\"><a href=\"#for和range区别\" class=\"headerlink\" title=\"for和range区别\"></a>for和range区别</h4><p>range 在迭代过程中返回的是迭代值的拷贝，如果每次迭代的元素的内存占用很低，那么 for 和 range 的性能几乎是一样。但是如果迭代的元素内存占用较高，例如一个包含很多属性的 struct 结构体，那么 for 的性能将显著地高于 range，有时候甚至会有上千倍的性能差异。对于这种场景，建议使用 for，如果使用 range，建议只迭代下标，通过下标访问迭代值，这种使用方式和 for 就没有区别了。如果想使用 range 同时迭代下标和值，则需要将切片/数组的元素改为指针，才能不影响性能。</p>\n<h4 id=\"数组和切片区别\"><a href=\"#数组和切片区别\" class=\"headerlink\" title=\"数组和切片区别\"></a>数组和切片区别</h4><p>数组是不可变的数据类型，线程安全</p>\n<p>切片是动态可变的数据结构，包含长度，容量以及指向数组的应用，线程不安全</p>\n<h4 id=\"rune数据类型\"><a href=\"#rune数据类型\" class=\"headerlink\" title=\"rune数据类型\"></a>rune数据类型</h4><p>rune是Go语言中一种特殊的数据类型,它是int32的别名,几乎在所有方面等同于int32,用于区分字符值和整数值。</p>\n<p>补充：golang中的字符有两种，uint8（byte）代表ASCII的一个字符，rune代表一个utf-8字符。</p>\n<p>理解：当需要处理中文、日文或者其他复合字符时，则需要用到rune类型，rune实际是一个int32.</p>\n<h4 id=\"init函数\"><a href=\"#init函数\" class=\"headerlink\" title=\"init函数\"></a>init函数</h4><ul>\n<li>不同包的 <code>init()</code>执行顺序，按照 <code>导入包的依赖关系</code> 决定</li>\n<li><code>init()</code> 不能被其他函数调用，而自动 <code>在main函数执行前</code> 被调用</li>\n<li>执行顺序：import –&gt; const –&gt; var –&gt; init() –&gt; main()</li>\n</ul>\n<h4 id=\"make和new的区别\"><a href=\"#make和new的区别\" class=\"headerlink\" title=\"make和new的区别\"></a>make和new的区别</h4><ul>\n<li>new可以初始化所有类型，为类型申请一块内存空间并返回一个指针</li>\n<li>make只能用于map ，channel，slice初始化，返回的是类型引用</li>\n</ul>\n<h4 id=\"什么是协程泄露-Goroutine-Leak-？\"><a href=\"#什么是协程泄露-Goroutine-Leak-？\" class=\"headerlink\" title=\"什么是协程泄露(Goroutine Leak)？\"></a>什么是协程泄露(Goroutine Leak)？</h4><p>go协程正常结束后，会被gc回收，但是如果一些操作不当，就会引起协程一直处于阻塞状态或者永远运行，这种情况就是协程泄漏了，他会一直消耗资源，直到系统奔溃。泄漏的场景：</p>\n<ul>\n<li>Goroutine 内正在进行 channel/mutex 等读写操作，但由于逻辑问题，某些情况下会被一直阻塞。</li>\n<li>Goroutine 内的业务逻辑进入死循环，资源一直无法释放。</li>\n<li>Goroutine 内的业务逻辑进入长时间等待，有不断新增的 Goroutine 进入等待。</li>\n</ul>\n<p>检测工具：uber-go/goleak</p>\n<h4 id=\"赋值是原子操作吗？\"><a href=\"#赋值是原子操作吗？\" class=\"headerlink\" title=\"赋值是原子操作吗？\"></a>赋值是原子操作吗？</h4><p>不是原子操作，会有并发安全问题。设计struct赋值的数据类型 都是并发不安全的 比如slice map等</p>\n<h4 id=\"time-Sleep-d-和-lt-time-After-d-有何区别？\"><a href=\"#time-Sleep-d-和-lt-time-After-d-有何区别？\" class=\"headerlink\" title=\"time.Sleep(d)和&lt;-time.After(d)有何区别？\"></a><code>time.Sleep(d)</code>和<code>&lt;-time.After(d)</code>有何区别？</h4><p>两者都会将当前的goroutine执行暂停一段时间。 区别在于<code>time.Sleep(d)</code>函数调用将使当前的协程进入睡眠子状态，但是当前协程的<a href=\"https://gfw.go101.org/article/control-flows-more.html#states-of-goroutine\">（主）状态</a>依然为运行状态； 而通道接收<code>&lt;-time.After(d)</code>操作将使当前协程进入阻塞状态。</p>\n<h4 id=\"哪些类型不支持比较？\"><a href=\"#哪些类型不支持比较？\" class=\"headerlink\" title=\"哪些类型不支持比较？\"></a>哪些类型不支持比较？</h4><p>下列类型不支持比较：映射（map、切片、函数、包含不可比较字段的结构体类型、元素类型为不可比较类型的数组类型</p>\n<p>不支持比较的类型不能用做映射类型的键值类型。请注意：</p>\n<ul>\n<li>尽管映射，切片和函数值不支持比较，但是它们的值可以与类型不确定的<code>nil</code>标识符比较。</li>\n<li>如果两个接口值的动态类型相同且不可比较，那么在运行时<a href=\"https://gfw.go101.org/article/interface.html#comparison\">比较这两个接口的值</a>会产生一个恐慌。</li>\n</ul>\n<h4 id=\"为什么两个nil值有时候会不相等？\"><a href=\"#为什么两个nil值有时候会不相等？\" class=\"headerlink\" title=\"为什么两个nil值有时候会不相等？\"></a>为什么两个<code>nil</code>值有时候会不相等？</h4><p>一个接口值可以看作是一个包裹非接口值的盒子。被包裹在一个接口值中的非接口值的类型必须实现了此接口值的类型。 在Go中，很多种类型的类型的零值都是用<code>nil</code>来表示的。 一个什么都没包裹的接口值为一个零值接口值，即nil接口值。 一个包裹着其它非接口类型的nil值的接口值并非什么都没包裹，所以它不是（或者说它不等于）一个nil接口值。</p>\n<p>当对一个nil接口值和一个nil非接口值进行比较时（假设它们可以比较），此nil非接口值将先被转换为nil接口值的类型，然后再进行比较； 此转换的结果为一个包裹了此nil非接口值的一个副本的接口值，此接口值不是（或者说它不等于）一个nil接口值，所以此比较不相等。</p>\n<h4 id=\"哪些值可以被取地址，哪些值不可以被取地址？\"><a href=\"#哪些值可以被取地址，哪些值不可以被取地址？\" class=\"headerlink\" title=\"哪些值可以被取地址，哪些值不可以被取地址？\"></a>哪些值可以被取地址，哪些值不可以被取地址？</h4><p>以下的值是不可以寻址的：</p>\n<ul>\n<li>字符串的字节元素</li>\n<li>映射元素</li>\n<li>接口值的动态值（类型断言的结果）</li>\n<li>常量（包括有名常量和字面量）</li>\n<li>声明的包级别函数</li>\n<li>方法（用做函数值）</li>\n<li>中间结果值<ul>\n<li>函数调用</li>\n<li>显式值转换</li>\n<li>各种操作，不包含指针解引用（dereference）操作，但是包含：<ul>\n<li>通道接收操作</li>\n<li>子字符串操作</li>\n<li>子切片操作</li>\n<li>加法、减法、乘法、以及除法等等。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>以下的值是可寻址的，因此可以被取地址：变量</p>\n<p>可寻址的结构体的字段</p>\n<ul>\n<li>可寻址的数组的元素</li>\n<li>任意切片的元素（无论是可寻址切片或不可寻址切片）</li>\n<li>指针解引用（dereference）操作</li>\n</ul>\n<h4 id=\"为什么映射元素不可被取地址？\"><a href=\"#为什么映射元素不可被取地址？\" class=\"headerlink\" title=\"为什么映射元素不可被取地址？\"></a>为什么映射元素不可被取地址？</h4><p>在Go中，映射的设计保证一个映射值在内存允许的情况下可以加入任意个条目。 另外为了防止一个映射中为其条目开辟的内存段支离破碎，官方标准编译器使用了哈希表来实现映射。 并且为了保证元素索引的效率，一个映射值的底层哈希表只为其中的所有条目维护一段连续的内存段。 因此，一个映射值随着其中的条目数量逐渐增加时，其维护的连续的内存段需要不断重新开辟来增容，并把原来内存段上的条目全部复制到新开辟的内存段上。 另外，即使一个映射值维护的内存段没有增容，某些哈希表实现也可能在当前内存段中移动其中的条目。 总之，映射中的元素的地址会因为各种原因而改变。 如果映射元素可以被取地址，则Go运行时（runtime）必须在元素地址改变的时候修改所有存储了元素地址的指针值。 这极大得增加了Go编译器和运行时的实现难度，并且严重影响了程序运行效率。 因此，目前，Go中禁止取映射元素的地址。</p>\n<p>映射元素不可被取地址的另一个原因是表达式<code>aMap[key]</code>可能返回一个存储于<code>aMap</code>中的元素，也可能返回一个不存储于其中的元素零值。 这意味着表达式<code>aMap[key]</code>在<code>(&amp;aMap[key]).Modify()</code>调用执行之后可能仍然被估值为元素零值。 这将使很多人感到困惑，因此在Go中禁止取映射元素的地址。</p>\n<h4 id=\"函数返回局部变量的指针是否安全？\"><a href=\"#函数返回局部变量的指针是否安全？\" class=\"headerlink\" title=\"函数返回局部变量的指针是否安全？\"></a>函数返回局部变量的指针是否安全？</h4><p>是的，在Go中这是绝对安全的。</p>\n<p>支持栈的Go编译器将会对每个局部变量进行逃逸分析。 对于官方标准编译器来说，如果一个值可以在编译时刻被断定它在运行时刻仅会在一个协程中被使用，则此值将被开辟在（此协程的）栈上；否则此值将被开辟在堆上。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"T和-T的调用关系\"><a href=\"#T和-T的调用关系\" class=\"headerlink\" title=\"T和*T的调用关系\"></a><code>T</code>和<code>*T</code>的调用关系</h4><p>在Go语言中，为了方便，对于一个非指针和非接口定义类型<code>T</code>，</p>\n<ul>\n<li>一个<code>T</code>类型的值可以调用为<code>*T</code>类型声明的方法，但是仅当此<code>T</code>的值是可寻址的情况下。 编译器在调用指针属主方法前，会自动取此<code>T</code>值的地址。 因为不是任何<code>T</code>值都是可寻址的，所以并非任何<code>T</code>值都能够调用为类型<code>*T</code>声明的方法。 这种便利只是一个语法糖，而不是一种固有的规则。（常量不可寻址）</li>\n<li>一个<code>*T</code>类型的值可以调用为类型<code>T</code>声明的方法。 这是因为解引用指针总是合法的。 这种便利不仅仅是一个语法糖，它也是一种固有的规则。</li>\n</ul>\n<p>所以很合理的， <code>*T</code>的方法集总是<code>T</code>方法集的超集，但反之不然。</p>\n<p>事实上，你可以认为对于每一个为类型<code>T</code>声明的方法，编译器都会为类型<code>*T</code>自动隐式声明一个同名和同签名的方法。</p>","more":"<h4 id=\"for和range区别\"><a href=\"#for和range区别\" class=\"headerlink\" title=\"for和range区别\"></a>for和range区别</h4><p>range 在迭代过程中返回的是迭代值的拷贝，如果每次迭代的元素的内存占用很低，那么 for 和 range 的性能几乎是一样。但是如果迭代的元素内存占用较高，例如一个包含很多属性的 struct 结构体，那么 for 的性能将显著地高于 range，有时候甚至会有上千倍的性能差异。对于这种场景，建议使用 for，如果使用 range，建议只迭代下标，通过下标访问迭代值，这种使用方式和 for 就没有区别了。如果想使用 range 同时迭代下标和值，则需要将切片/数组的元素改为指针，才能不影响性能。</p>\n<h4 id=\"数组和切片区别\"><a href=\"#数组和切片区别\" class=\"headerlink\" title=\"数组和切片区别\"></a>数组和切片区别</h4><p>数组是不可变的数据类型，线程安全</p>\n<p>切片是动态可变的数据结构，包含长度，容量以及指向数组的应用，线程不安全</p>\n<h4 id=\"rune数据类型\"><a href=\"#rune数据类型\" class=\"headerlink\" title=\"rune数据类型\"></a>rune数据类型</h4><p>rune是Go语言中一种特殊的数据类型,它是int32的别名,几乎在所有方面等同于int32,用于区分字符值和整数值。</p>\n<p>补充：golang中的字符有两种，uint8（byte）代表ASCII的一个字符，rune代表一个utf-8字符。</p>\n<p>理解：当需要处理中文、日文或者其他复合字符时，则需要用到rune类型，rune实际是一个int32.</p>\n<h4 id=\"init函数\"><a href=\"#init函数\" class=\"headerlink\" title=\"init函数\"></a>init函数</h4><ul>\n<li>不同包的 <code>init()</code>执行顺序，按照 <code>导入包的依赖关系</code> 决定</li>\n<li><code>init()</code> 不能被其他函数调用，而自动 <code>在main函数执行前</code> 被调用</li>\n<li>执行顺序：import –&gt; const –&gt; var –&gt; init() –&gt; main()</li>\n</ul>\n<h4 id=\"make和new的区别\"><a href=\"#make和new的区别\" class=\"headerlink\" title=\"make和new的区别\"></a>make和new的区别</h4><ul>\n<li>new可以初始化所有类型，为类型申请一块内存空间并返回一个指针</li>\n<li>make只能用于map ，channel，slice初始化，返回的是类型引用</li>\n</ul>\n<h4 id=\"什么是协程泄露-Goroutine-Leak-？\"><a href=\"#什么是协程泄露-Goroutine-Leak-？\" class=\"headerlink\" title=\"什么是协程泄露(Goroutine Leak)？\"></a>什么是协程泄露(Goroutine Leak)？</h4><p>go协程正常结束后，会被gc回收，但是如果一些操作不当，就会引起协程一直处于阻塞状态或者永远运行，这种情况就是协程泄漏了，他会一直消耗资源，直到系统奔溃。泄漏的场景：</p>\n<ul>\n<li>Goroutine 内正在进行 channel/mutex 等读写操作，但由于逻辑问题，某些情况下会被一直阻塞。</li>\n<li>Goroutine 内的业务逻辑进入死循环，资源一直无法释放。</li>\n<li>Goroutine 内的业务逻辑进入长时间等待，有不断新增的 Goroutine 进入等待。</li>\n</ul>\n<p>检测工具：uber-go/goleak</p>\n<h4 id=\"赋值是原子操作吗？\"><a href=\"#赋值是原子操作吗？\" class=\"headerlink\" title=\"赋值是原子操作吗？\"></a>赋值是原子操作吗？</h4><p>不是原子操作，会有并发安全问题。设计struct赋值的数据类型 都是并发不安全的 比如slice map等</p>\n<h4 id=\"time-Sleep-d-和-lt-time-After-d-有何区别？\"><a href=\"#time-Sleep-d-和-lt-time-After-d-有何区别？\" class=\"headerlink\" title=\"time.Sleep(d)和&lt;-time.After(d)有何区别？\"></a><code>time.Sleep(d)</code>和<code>&lt;-time.After(d)</code>有何区别？</h4><p>两者都会将当前的goroutine执行暂停一段时间。 区别在于<code>time.Sleep(d)</code>函数调用将使当前的协程进入睡眠子状态，但是当前协程的<a href=\"https://gfw.go101.org/article/control-flows-more.html#states-of-goroutine\">（主）状态</a>依然为运行状态； 而通道接收<code>&lt;-time.After(d)</code>操作将使当前协程进入阻塞状态。</p>\n<h4 id=\"哪些类型不支持比较？\"><a href=\"#哪些类型不支持比较？\" class=\"headerlink\" title=\"哪些类型不支持比较？\"></a>哪些类型不支持比较？</h4><p>下列类型不支持比较：映射（map、切片、函数、包含不可比较字段的结构体类型、元素类型为不可比较类型的数组类型</p>\n<p>不支持比较的类型不能用做映射类型的键值类型。请注意：</p>\n<ul>\n<li>尽管映射，切片和函数值不支持比较，但是它们的值可以与类型不确定的<code>nil</code>标识符比较。</li>\n<li>如果两个接口值的动态类型相同且不可比较，那么在运行时<a href=\"https://gfw.go101.org/article/interface.html#comparison\">比较这两个接口的值</a>会产生一个恐慌。</li>\n</ul>\n<h4 id=\"为什么两个nil值有时候会不相等？\"><a href=\"#为什么两个nil值有时候会不相等？\" class=\"headerlink\" title=\"为什么两个nil值有时候会不相等？\"></a>为什么两个<code>nil</code>值有时候会不相等？</h4><p>一个接口值可以看作是一个包裹非接口值的盒子。被包裹在一个接口值中的非接口值的类型必须实现了此接口值的类型。 在Go中，很多种类型的类型的零值都是用<code>nil</code>来表示的。 一个什么都没包裹的接口值为一个零值接口值，即nil接口值。 一个包裹着其它非接口类型的nil值的接口值并非什么都没包裹，所以它不是（或者说它不等于）一个nil接口值。</p>\n<p>当对一个nil接口值和一个nil非接口值进行比较时（假设它们可以比较），此nil非接口值将先被转换为nil接口值的类型，然后再进行比较； 此转换的结果为一个包裹了此nil非接口值的一个副本的接口值，此接口值不是（或者说它不等于）一个nil接口值，所以此比较不相等。</p>\n<h4 id=\"哪些值可以被取地址，哪些值不可以被取地址？\"><a href=\"#哪些值可以被取地址，哪些值不可以被取地址？\" class=\"headerlink\" title=\"哪些值可以被取地址，哪些值不可以被取地址？\"></a>哪些值可以被取地址，哪些值不可以被取地址？</h4><p>以下的值是不可以寻址的：</p>\n<ul>\n<li>字符串的字节元素</li>\n<li>映射元素</li>\n<li>接口值的动态值（类型断言的结果）</li>\n<li>常量（包括有名常量和字面量）</li>\n<li>声明的包级别函数</li>\n<li>方法（用做函数值）</li>\n<li>中间结果值<ul>\n<li>函数调用</li>\n<li>显式值转换</li>\n<li>各种操作，不包含指针解引用（dereference）操作，但是包含：<ul>\n<li>通道接收操作</li>\n<li>子字符串操作</li>\n<li>子切片操作</li>\n<li>加法、减法、乘法、以及除法等等。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>以下的值是可寻址的，因此可以被取地址：变量</p>\n<p>可寻址的结构体的字段</p>\n<ul>\n<li>可寻址的数组的元素</li>\n<li>任意切片的元素（无论是可寻址切片或不可寻址切片）</li>\n<li>指针解引用（dereference）操作</li>\n</ul>\n<h4 id=\"为什么映射元素不可被取地址？\"><a href=\"#为什么映射元素不可被取地址？\" class=\"headerlink\" title=\"为什么映射元素不可被取地址？\"></a>为什么映射元素不可被取地址？</h4><p>在Go中，映射的设计保证一个映射值在内存允许的情况下可以加入任意个条目。 另外为了防止一个映射中为其条目开辟的内存段支离破碎，官方标准编译器使用了哈希表来实现映射。 并且为了保证元素索引的效率，一个映射值的底层哈希表只为其中的所有条目维护一段连续的内存段。 因此，一个映射值随着其中的条目数量逐渐增加时，其维护的连续的内存段需要不断重新开辟来增容，并把原来内存段上的条目全部复制到新开辟的内存段上。 另外，即使一个映射值维护的内存段没有增容，某些哈希表实现也可能在当前内存段中移动其中的条目。 总之，映射中的元素的地址会因为各种原因而改变。 如果映射元素可以被取地址，则Go运行时（runtime）必须在元素地址改变的时候修改所有存储了元素地址的指针值。 这极大得增加了Go编译器和运行时的实现难度，并且严重影响了程序运行效率。 因此，目前，Go中禁止取映射元素的地址。</p>\n<p>映射元素不可被取地址的另一个原因是表达式<code>aMap[key]</code>可能返回一个存储于<code>aMap</code>中的元素，也可能返回一个不存储于其中的元素零值。 这意味着表达式<code>aMap[key]</code>在<code>(&amp;aMap[key]).Modify()</code>调用执行之后可能仍然被估值为元素零值。 这将使很多人感到困惑，因此在Go中禁止取映射元素的地址。</p>\n<h4 id=\"函数返回局部变量的指针是否安全？\"><a href=\"#函数返回局部变量的指针是否安全？\" class=\"headerlink\" title=\"函数返回局部变量的指针是否安全？\"></a>函数返回局部变量的指针是否安全？</h4><p>是的，在Go中这是绝对安全的。</p>\n<p>支持栈的Go编译器将会对每个局部变量进行逃逸分析。 对于官方标准编译器来说，如果一个值可以在编译时刻被断定它在运行时刻仅会在一个协程中被使用，则此值将被开辟在（此协程的）栈上；否则此值将被开辟在堆上。</p>"},{"title":"go调度模型-GMP","date":"2020-11-19T12:17:53.000Z","_content":"\n### 介绍\n\n调度的进化 ：从进程到线程再到协程，其实就是不断共享，不断减少切换成本。go协程，在语言层面封装了协程调度，使用起来更方便。\n\n<!-- more -->\n\n#### **并发**&并行\n\n**并发：**某一段时间，几个程序在同一个cpu上运行，但任意一个时间点只有一个程序在运行。解决程序排队等待的问题，如果一个程序发生阻塞，那么其他程序仍可以正常的执行。站在cpu的角度上，并发实际也是串行的。\n\n**并行**：需要硬件支持，系统必须具备多个cpu，才能有并行的能力。不同cpu在同一时间运行不同程序，互不抢占资源，实现真正的同时执行。\n\n**区别**：并发只是在宏观上给人感觉多个程序在同时运行，但实际单cpu系统中，每一时刻只有一个程序在运行。而并行关键是多核【同时】执行。\n\n#### **进程** & 线程 & 协程\n\n**进程：**用于划分程序运行时所需要的资源(IO资源，信号处理，内存资源等)，是程序运行的基本资源单位(最小单位)；不共享堆栈，由操作系统调度，属于抢占式调度，有三个状态：等待，就绪和运行状态。进程之间是互相隔离，各自拥有独立的系统资源，更加安全但是进程间通信不方便。\n\n进程间通讯方式：管道，信号，消息队列，共享内存，socket\n\n**线程**：系统进行运算调度的最小单位，一个进程至少包含一个线程(主线程)；线程由线程ID，当前指令指针，寄存器集合和堆栈组成，不拥有系统资源，进程内的所有线程共享进程资源；共享堆，不共享栈，由操作系统调度，属于抢占式调度。\n\n线程间通讯方式：互斥量，信号量\n\n**协程**：用户级线程，是执行流，并不是运行实体，内核并不知道协程存在，共享堆，不共享栈，拥有自己的寄存器上下文和栈，由用户程序进程调度，是协作式调度，需要协程自己主动把控制权转让出去。\n\n**区别**：进程是cpu资源分配的基本单位，线程是独立运行和独立调度的基本单位；进程拥有自己的资源空间，一个进程包含了N个线程，线程和cpu资源分配无关，多个线程共享同一进程内的资源；线程的调度与切换比进程快很多(进程切换涉及资源切换，但是线程切换不需要)；协程和线程的区别，协程调度发生在用户态，无需线程上下文切换开销，而线程调度发生在内核态，所以协程调度会更加轻量。\n\n### GMP模型\n\n**M**：代表OS线程，一个M就是一个线程，真正的执行者，数量比P多，M创建之后，会去P的free list寻找可用P进行绑定，如果没有绑定到P，则进入阻塞状态\n\n**G**：go func出来的goroutine，代表一个用户代码的只执行流，拥有独立的栈空间\n\n**P**：默认机器的核数，表示执行所需要的资源，P的数量代表最大并行程度，一个P对应多个M，但是同一时刻，只有一个M与P绑定；每个P都有一个本地存放G的队列，M和P绑定时，如果新生成的G会放入本地runq中，本地队列满了，会截取本地队列一半的G放入全局队列中。p减少了锁竞争以及增加了资源利用率。\n\n**调度流程如下：**\n\n1. go func创建一个G对象，会保存在全局runq或者本地的runq（先放在生成G的线程runq下，如果队列满了，会放到全局runq）\n2. G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；\n3. 当go func的时候，G去唤醒一个M，M寻找是否有空闲的P，如果有则将该G对象移动到它本身\n4. M执行一个调度循环：\n   1. 调度G对象，G对象来源：1/61的几率从全局队来，60/61的几率在本地队列寻找G\n   2. 执行 -> 清理线程 -> 继续寻找新的G\n5. p的某个G发生网络调用(或者系统调用，因为和系统交互是线程，所以当前M是阻塞的)，那么P和M会解绑，P会带着其他G去寻找新的M(找空闲的M，如果没有则new一个出来)\n6. 当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中。\n","source":"_posts/go调度模型-GMP.md","raw":"---\ntitle: go调度模型-GMP\ndate: 2020-11-19 20:17:53\ncategories:\n    - GO\ntags:\n    - GO开发\n    - 并发编程\n---\n\n### 介绍\n\n调度的进化 ：从进程到线程再到协程，其实就是不断共享，不断减少切换成本。go协程，在语言层面封装了协程调度，使用起来更方便。\n\n<!-- more -->\n\n#### **并发**&并行\n\n**并发：**某一段时间，几个程序在同一个cpu上运行，但任意一个时间点只有一个程序在运行。解决程序排队等待的问题，如果一个程序发生阻塞，那么其他程序仍可以正常的执行。站在cpu的角度上，并发实际也是串行的。\n\n**并行**：需要硬件支持，系统必须具备多个cpu，才能有并行的能力。不同cpu在同一时间运行不同程序，互不抢占资源，实现真正的同时执行。\n\n**区别**：并发只是在宏观上给人感觉多个程序在同时运行，但实际单cpu系统中，每一时刻只有一个程序在运行。而并行关键是多核【同时】执行。\n\n#### **进程** & 线程 & 协程\n\n**进程：**用于划分程序运行时所需要的资源(IO资源，信号处理，内存资源等)，是程序运行的基本资源单位(最小单位)；不共享堆栈，由操作系统调度，属于抢占式调度，有三个状态：等待，就绪和运行状态。进程之间是互相隔离，各自拥有独立的系统资源，更加安全但是进程间通信不方便。\n\n进程间通讯方式：管道，信号，消息队列，共享内存，socket\n\n**线程**：系统进行运算调度的最小单位，一个进程至少包含一个线程(主线程)；线程由线程ID，当前指令指针，寄存器集合和堆栈组成，不拥有系统资源，进程内的所有线程共享进程资源；共享堆，不共享栈，由操作系统调度，属于抢占式调度。\n\n线程间通讯方式：互斥量，信号量\n\n**协程**：用户级线程，是执行流，并不是运行实体，内核并不知道协程存在，共享堆，不共享栈，拥有自己的寄存器上下文和栈，由用户程序进程调度，是协作式调度，需要协程自己主动把控制权转让出去。\n\n**区别**：进程是cpu资源分配的基本单位，线程是独立运行和独立调度的基本单位；进程拥有自己的资源空间，一个进程包含了N个线程，线程和cpu资源分配无关，多个线程共享同一进程内的资源；线程的调度与切换比进程快很多(进程切换涉及资源切换，但是线程切换不需要)；协程和线程的区别，协程调度发生在用户态，无需线程上下文切换开销，而线程调度发生在内核态，所以协程调度会更加轻量。\n\n### GMP模型\n\n**M**：代表OS线程，一个M就是一个线程，真正的执行者，数量比P多，M创建之后，会去P的free list寻找可用P进行绑定，如果没有绑定到P，则进入阻塞状态\n\n**G**：go func出来的goroutine，代表一个用户代码的只执行流，拥有独立的栈空间\n\n**P**：默认机器的核数，表示执行所需要的资源，P的数量代表最大并行程度，一个P对应多个M，但是同一时刻，只有一个M与P绑定；每个P都有一个本地存放G的队列，M和P绑定时，如果新生成的G会放入本地runq中，本地队列满了，会截取本地队列一半的G放入全局队列中。p减少了锁竞争以及增加了资源利用率。\n\n**调度流程如下：**\n\n1. go func创建一个G对象，会保存在全局runq或者本地的runq（先放在生成G的线程runq下，如果队列满了，会放到全局runq）\n2. G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；\n3. 当go func的时候，G去唤醒一个M，M寻找是否有空闲的P，如果有则将该G对象移动到它本身\n4. M执行一个调度循环：\n   1. 调度G对象，G对象来源：1/61的几率从全局队来，60/61的几率在本地队列寻找G\n   2. 执行 -> 清理线程 -> 继续寻找新的G\n5. p的某个G发生网络调用(或者系统调用，因为和系统交互是线程，所以当前M是阻塞的)，那么P和M会解绑，P会带着其他G去寻找新的M(找空闲的M，如果没有则new一个出来)\n6. 当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中。\n","slug":"go调度模型-GMP","published":1,"updated":"2021-12-10T07:36:34.496Z","_id":"ckx02mtjp000322pebilpfv3g","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>调度的进化 ：从进程到线程再到协程，其实就是不断共享，不断减少切换成本。go协程，在语言层面封装了协程调度，使用起来更方便。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"并发-amp-并行\"><a href=\"#并发-amp-并行\" class=\"headerlink\" title=\"并发&amp;并行\"></a><strong>并发</strong>&amp;并行</h4><p><strong>并发：</strong>某一段时间，几个程序在同一个cpu上运行，但任意一个时间点只有一个程序在运行。解决程序排队等待的问题，如果一个程序发生阻塞，那么其他程序仍可以正常的执行。站在cpu的角度上，并发实际也是串行的。</p>\n<p><strong>并行</strong>：需要硬件支持，系统必须具备多个cpu，才能有并行的能力。不同cpu在同一时间运行不同程序，互不抢占资源，实现真正的同时执行。</p>\n<p><strong>区别</strong>：并发只是在宏观上给人感觉多个程序在同时运行，但实际单cpu系统中，每一时刻只有一个程序在运行。而并行关键是多核【同时】执行。</p>\n<h4 id=\"进程-amp-线程-amp-协程\"><a href=\"#进程-amp-线程-amp-协程\" class=\"headerlink\" title=\"进程 &amp; 线程 &amp; 协程\"></a><strong>进程</strong> &amp; 线程 &amp; 协程</h4><p><strong>进程：</strong>用于划分程序运行时所需要的资源(IO资源，信号处理，内存资源等)，是程序运行的基本资源单位(最小单位)；不共享堆栈，由操作系统调度，属于抢占式调度，有三个状态：等待，就绪和运行状态。进程之间是互相隔离，各自拥有独立的系统资源，更加安全但是进程间通信不方便。</p>\n<p>进程间通讯方式：管道，信号，消息队列，共享内存，socket</p>\n<p><strong>线程</strong>：系统进行运算调度的最小单位，一个进程至少包含一个线程(主线程)；线程由线程ID，当前指令指针，寄存器集合和堆栈组成，不拥有系统资源，进程内的所有线程共享进程资源；共享堆，不共享栈，由操作系统调度，属于抢占式调度。</p>\n<p>线程间通讯方式：互斥量，信号量</p>\n<p><strong>协程</strong>：用户级线程，是执行流，并不是运行实体，内核并不知道协程存在，共享堆，不共享栈，拥有自己的寄存器上下文和栈，由用户程序进程调度，是协作式调度，需要协程自己主动把控制权转让出去。</p>\n<p><strong>区别</strong>：进程是cpu资源分配的基本单位，线程是独立运行和独立调度的基本单位；进程拥有自己的资源空间，一个进程包含了N个线程，线程和cpu资源分配无关，多个线程共享同一进程内的资源；线程的调度与切换比进程快很多(进程切换涉及资源切换，但是线程切换不需要)；协程和线程的区别，协程调度发生在用户态，无需线程上下文切换开销，而线程调度发生在内核态，所以协程调度会更加轻量。</p>\n<h3 id=\"GMP模型\"><a href=\"#GMP模型\" class=\"headerlink\" title=\"GMP模型\"></a>GMP模型</h3><p><strong>M</strong>：代表OS线程，一个M就是一个线程，真正的执行者，数量比P多，M创建之后，会去P的free list寻找可用P进行绑定，如果没有绑定到P，则进入阻塞状态</p>\n<p><strong>G</strong>：go func出来的goroutine，代表一个用户代码的只执行流，拥有独立的栈空间</p>\n<p><strong>P</strong>：默认机器的核数，表示执行所需要的资源，P的数量代表最大并行程度，一个P对应多个M，但是同一时刻，只有一个M与P绑定；每个P都有一个本地存放G的队列，M和P绑定时，如果新生成的G会放入本地runq中，本地队列满了，会截取本地队列一半的G放入全局队列中。p减少了锁竞争以及增加了资源利用率。</p>\n<p><strong>调度流程如下：</strong></p>\n<ol>\n<li>go func创建一个G对象，会保存在全局runq或者本地的runq（先放在生成G的线程runq下，如果队列满了，会放到全局runq）</li>\n<li>G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；</li>\n<li>当go func的时候，G去唤醒一个M，M寻找是否有空闲的P，如果有则将该G对象移动到它本身</li>\n<li>M执行一个调度循环：<ol>\n<li>调度G对象，G对象来源：1/61的几率从全局队来，60/61的几率在本地队列寻找G</li>\n<li>执行 -&gt; 清理线程 -&gt; 继续寻找新的G</li>\n</ol>\n</li>\n<li>p的某个G发生网络调用(或者系统调用，因为和系统交互是线程，所以当前M是阻塞的)，那么P和M会解绑，P会带着其他G去寻找新的M(找空闲的M，如果没有则new一个出来)</li>\n<li>当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>调度的进化 ：从进程到线程再到协程，其实就是不断共享，不断减少切换成本。go协程，在语言层面封装了协程调度，使用起来更方便。</p>","more":"<h4 id=\"并发-amp-并行\"><a href=\"#并发-amp-并行\" class=\"headerlink\" title=\"并发&amp;并行\"></a><strong>并发</strong>&amp;并行</h4><p><strong>并发：</strong>某一段时间，几个程序在同一个cpu上运行，但任意一个时间点只有一个程序在运行。解决程序排队等待的问题，如果一个程序发生阻塞，那么其他程序仍可以正常的执行。站在cpu的角度上，并发实际也是串行的。</p>\n<p><strong>并行</strong>：需要硬件支持，系统必须具备多个cpu，才能有并行的能力。不同cpu在同一时间运行不同程序，互不抢占资源，实现真正的同时执行。</p>\n<p><strong>区别</strong>：并发只是在宏观上给人感觉多个程序在同时运行，但实际单cpu系统中，每一时刻只有一个程序在运行。而并行关键是多核【同时】执行。</p>\n<h4 id=\"进程-amp-线程-amp-协程\"><a href=\"#进程-amp-线程-amp-协程\" class=\"headerlink\" title=\"进程 &amp; 线程 &amp; 协程\"></a><strong>进程</strong> &amp; 线程 &amp; 协程</h4><p><strong>进程：</strong>用于划分程序运行时所需要的资源(IO资源，信号处理，内存资源等)，是程序运行的基本资源单位(最小单位)；不共享堆栈，由操作系统调度，属于抢占式调度，有三个状态：等待，就绪和运行状态。进程之间是互相隔离，各自拥有独立的系统资源，更加安全但是进程间通信不方便。</p>\n<p>进程间通讯方式：管道，信号，消息队列，共享内存，socket</p>\n<p><strong>线程</strong>：系统进行运算调度的最小单位，一个进程至少包含一个线程(主线程)；线程由线程ID，当前指令指针，寄存器集合和堆栈组成，不拥有系统资源，进程内的所有线程共享进程资源；共享堆，不共享栈，由操作系统调度，属于抢占式调度。</p>\n<p>线程间通讯方式：互斥量，信号量</p>\n<p><strong>协程</strong>：用户级线程，是执行流，并不是运行实体，内核并不知道协程存在，共享堆，不共享栈，拥有自己的寄存器上下文和栈，由用户程序进程调度，是协作式调度，需要协程自己主动把控制权转让出去。</p>\n<p><strong>区别</strong>：进程是cpu资源分配的基本单位，线程是独立运行和独立调度的基本单位；进程拥有自己的资源空间，一个进程包含了N个线程，线程和cpu资源分配无关，多个线程共享同一进程内的资源；线程的调度与切换比进程快很多(进程切换涉及资源切换，但是线程切换不需要)；协程和线程的区别，协程调度发生在用户态，无需线程上下文切换开销，而线程调度发生在内核态，所以协程调度会更加轻量。</p>\n<h3 id=\"GMP模型\"><a href=\"#GMP模型\" class=\"headerlink\" title=\"GMP模型\"></a>GMP模型</h3><p><strong>M</strong>：代表OS线程，一个M就是一个线程，真正的执行者，数量比P多，M创建之后，会去P的free list寻找可用P进行绑定，如果没有绑定到P，则进入阻塞状态</p>\n<p><strong>G</strong>：go func出来的goroutine，代表一个用户代码的只执行流，拥有独立的栈空间</p>\n<p><strong>P</strong>：默认机器的核数，表示执行所需要的资源，P的数量代表最大并行程度，一个P对应多个M，但是同一时刻，只有一个M与P绑定；每个P都有一个本地存放G的队列，M和P绑定时，如果新生成的G会放入本地runq中，本地队列满了，会截取本地队列一半的G放入全局队列中。p减少了锁竞争以及增加了资源利用率。</p>\n<p><strong>调度流程如下：</strong></p>\n<ol>\n<li>go func创建一个G对象，会保存在全局runq或者本地的runq（先放在生成G的线程runq下，如果队列满了，会放到全局runq）</li>\n<li>G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；</li>\n<li>当go func的时候，G去唤醒一个M，M寻找是否有空闲的P，如果有则将该G对象移动到它本身</li>\n<li>M执行一个调度循环：<ol>\n<li>调度G对象，G对象来源：1/61的几率从全局队来，60/61的几率在本地队列寻找G</li>\n<li>执行 -&gt; 清理线程 -&gt; 继续寻找新的G</li>\n</ol>\n</li>\n<li>p的某个G发生网络调用(或者系统调用，因为和系统交互是线程，所以当前M是阻塞的)，那么P和M会解绑，P会带着其他G去寻找新的M(找空闲的M，如果没有则new一个出来)</li>\n<li>当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中。</li>\n</ol>"},{"title":"go并发通信-channel","date":"2021-05-22T03:29:21.000Z","_content":"\n#### 介绍\n\n管道，保证线程安全，用于数据传递或者数据共享，属于先进先出的队列。实现 Channel 的结构并不神秘，本质上就是一个 `mutex` 锁加上一个环状缓存、 一个发送方队列和一个接收方队列。\n\n<!-- more -->\n\n### 通信交互\n\n#### **发送消息**\n\n1. 持有锁\n2. 入队，拷贝要发送的数据\n   1. 找到是否有正在阻塞的接收方，是则直接发送\n   2. 找到是否有空余的缓存，是则存入\n   3. 阻塞直到被唤醒\n3. 释放锁\n\n#### **接收消息**\n\n1. 上锁\n2. 从缓存中出队，拷贝要接收的数据\n   1. 如果 Channel 已被关闭，且 Channel 没有数据，立刻返回\n   2. 如果存在正在阻塞的发送方，说明缓存已满，从缓存队头取一个数据，再复始一个阻塞的发送方\n   3. 否则，检查缓存，如果缓存中仍有数据，则从缓存中读取，读取过程会将队列中的数据拷贝一份到接收方的执行栈中\n   4. 没有能接受的数据，阻塞当前的接收方 Goroutine\n3. 解锁\n\n### 通道关闭\n\n#### **channel关闭后的读写**\n\n- 关闭后的channel，可以读数据，因为channel中，可能会有缓存数据存在\n- 关闭后的channel，如果再写数据，会引起panic异常，可以判断是否channel关闭，防止panic产生\n- nil的channel读写都会阻塞，再次close会引起panic\n\n#### 关闭原则\n\n一个常用的使用Go通道的原则是**不要在数据接收方或者在有多个发送者的情况下关闭通道**。 换句话说，我们只应该让一个通道唯一的发送者关闭此通道。\n\n- 情形一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号\n- 情形二：一个接收者和N个发送者，此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了\n- 情形三：M个接收者和N个发送者。它们中的任何协程都可以让一个中间调解协程帮忙发出停止数据传送的信号\n- 情形四：“M个接收者和一个发送者”情形的一个变种：用来传输数据的通道的关闭请求由第三方发出\n","source":"_posts/go并发通信-channel.md","raw":"---\ntitle: go并发通信-channel\ndate: 2021-05-22 11:29:21\ncategories:\n    - GO\ntags:\n    - GO\n    - 并发编程\n---\n\n#### 介绍\n\n管道，保证线程安全，用于数据传递或者数据共享，属于先进先出的队列。实现 Channel 的结构并不神秘，本质上就是一个 `mutex` 锁加上一个环状缓存、 一个发送方队列和一个接收方队列。\n\n<!-- more -->\n\n### 通信交互\n\n#### **发送消息**\n\n1. 持有锁\n2. 入队，拷贝要发送的数据\n   1. 找到是否有正在阻塞的接收方，是则直接发送\n   2. 找到是否有空余的缓存，是则存入\n   3. 阻塞直到被唤醒\n3. 释放锁\n\n#### **接收消息**\n\n1. 上锁\n2. 从缓存中出队，拷贝要接收的数据\n   1. 如果 Channel 已被关闭，且 Channel 没有数据，立刻返回\n   2. 如果存在正在阻塞的发送方，说明缓存已满，从缓存队头取一个数据，再复始一个阻塞的发送方\n   3. 否则，检查缓存，如果缓存中仍有数据，则从缓存中读取，读取过程会将队列中的数据拷贝一份到接收方的执行栈中\n   4. 没有能接受的数据，阻塞当前的接收方 Goroutine\n3. 解锁\n\n### 通道关闭\n\n#### **channel关闭后的读写**\n\n- 关闭后的channel，可以读数据，因为channel中，可能会有缓存数据存在\n- 关闭后的channel，如果再写数据，会引起panic异常，可以判断是否channel关闭，防止panic产生\n- nil的channel读写都会阻塞，再次close会引起panic\n\n#### 关闭原则\n\n一个常用的使用Go通道的原则是**不要在数据接收方或者在有多个发送者的情况下关闭通道**。 换句话说，我们只应该让一个通道唯一的发送者关闭此通道。\n\n- 情形一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号\n- 情形二：一个接收者和N个发送者，此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了\n- 情形三：M个接收者和N个发送者。它们中的任何协程都可以让一个中间调解协程帮忙发出停止数据传送的信号\n- 情形四：“M个接收者和一个发送者”情形的一个变种：用来传输数据的通道的关闭请求由第三方发出\n","slug":"go并发通信-channel","published":1,"updated":"2021-12-10T07:35:52.519Z","_id":"ckx02mtjp000522pebhtq35c1","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>管道，保证线程安全，用于数据传递或者数据共享，属于先进先出的队列。实现 Channel 的结构并不神秘，本质上就是一个 <code>mutex</code> 锁加上一个环状缓存、 一个发送方队列和一个接收方队列。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"通信交互\"><a href=\"#通信交互\" class=\"headerlink\" title=\"通信交互\"></a>通信交互</h3><h4 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a><strong>发送消息</strong></h4><ol>\n<li>持有锁</li>\n<li>入队，拷贝要发送的数据<ol>\n<li>找到是否有正在阻塞的接收方，是则直接发送</li>\n<li>找到是否有空余的缓存，是则存入</li>\n<li>阻塞直到被唤醒</li>\n</ol>\n</li>\n<li>释放锁</li>\n</ol>\n<h4 id=\"接收消息\"><a href=\"#接收消息\" class=\"headerlink\" title=\"接收消息\"></a><strong>接收消息</strong></h4><ol>\n<li>上锁</li>\n<li>从缓存中出队，拷贝要接收的数据<ol>\n<li>如果 Channel 已被关闭，且 Channel 没有数据，立刻返回</li>\n<li>如果存在正在阻塞的发送方，说明缓存已满，从缓存队头取一个数据，再复始一个阻塞的发送方</li>\n<li>否则，检查缓存，如果缓存中仍有数据，则从缓存中读取，读取过程会将队列中的数据拷贝一份到接收方的执行栈中</li>\n<li>没有能接受的数据，阻塞当前的接收方 Goroutine</li>\n</ol>\n</li>\n<li>解锁</li>\n</ol>\n<h3 id=\"通道关闭\"><a href=\"#通道关闭\" class=\"headerlink\" title=\"通道关闭\"></a>通道关闭</h3><h4 id=\"channel关闭后的读写\"><a href=\"#channel关闭后的读写\" class=\"headerlink\" title=\"channel关闭后的读写\"></a><strong>channel关闭后的读写</strong></h4><ul>\n<li>关闭后的channel，可以读数据，因为channel中，可能会有缓存数据存在</li>\n<li>关闭后的channel，如果再写数据，会引起panic异常，可以判断是否channel关闭，防止panic产生</li>\n<li>nil的channel读写都会阻塞，再次close会引起panic</li>\n</ul>\n<h4 id=\"关闭原则\"><a href=\"#关闭原则\" class=\"headerlink\" title=\"关闭原则\"></a>关闭原则</h4><p>一个常用的使用Go通道的原则是<strong>不要在数据接收方或者在有多个发送者的情况下关闭通道</strong>。 换句话说，我们只应该让一个通道唯一的发送者关闭此通道。</p>\n<ul>\n<li>情形一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号</li>\n<li>情形二：一个接收者和N个发送者，此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了</li>\n<li>情形三：M个接收者和N个发送者。它们中的任何协程都可以让一个中间调解协程帮忙发出停止数据传送的信号</li>\n<li>情形四：“M个接收者和一个发送者”情形的一个变种：用来传输数据的通道的关闭请求由第三方发出</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>管道，保证线程安全，用于数据传递或者数据共享，属于先进先出的队列。实现 Channel 的结构并不神秘，本质上就是一个 <code>mutex</code> 锁加上一个环状缓存、 一个发送方队列和一个接收方队列。</p>","more":"<h3 id=\"通信交互\"><a href=\"#通信交互\" class=\"headerlink\" title=\"通信交互\"></a>通信交互</h3><h4 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a><strong>发送消息</strong></h4><ol>\n<li>持有锁</li>\n<li>入队，拷贝要发送的数据<ol>\n<li>找到是否有正在阻塞的接收方，是则直接发送</li>\n<li>找到是否有空余的缓存，是则存入</li>\n<li>阻塞直到被唤醒</li>\n</ol>\n</li>\n<li>释放锁</li>\n</ol>\n<h4 id=\"接收消息\"><a href=\"#接收消息\" class=\"headerlink\" title=\"接收消息\"></a><strong>接收消息</strong></h4><ol>\n<li>上锁</li>\n<li>从缓存中出队，拷贝要接收的数据<ol>\n<li>如果 Channel 已被关闭，且 Channel 没有数据，立刻返回</li>\n<li>如果存在正在阻塞的发送方，说明缓存已满，从缓存队头取一个数据，再复始一个阻塞的发送方</li>\n<li>否则，检查缓存，如果缓存中仍有数据，则从缓存中读取，读取过程会将队列中的数据拷贝一份到接收方的执行栈中</li>\n<li>没有能接受的数据，阻塞当前的接收方 Goroutine</li>\n</ol>\n</li>\n<li>解锁</li>\n</ol>\n<h3 id=\"通道关闭\"><a href=\"#通道关闭\" class=\"headerlink\" title=\"通道关闭\"></a>通道关闭</h3><h4 id=\"channel关闭后的读写\"><a href=\"#channel关闭后的读写\" class=\"headerlink\" title=\"channel关闭后的读写\"></a><strong>channel关闭后的读写</strong></h4><ul>\n<li>关闭后的channel，可以读数据，因为channel中，可能会有缓存数据存在</li>\n<li>关闭后的channel，如果再写数据，会引起panic异常，可以判断是否channel关闭，防止panic产生</li>\n<li>nil的channel读写都会阻塞，再次close会引起panic</li>\n</ul>\n<h4 id=\"关闭原则\"><a href=\"#关闭原则\" class=\"headerlink\" title=\"关闭原则\"></a>关闭原则</h4><p>一个常用的使用Go通道的原则是<strong>不要在数据接收方或者在有多个发送者的情况下关闭通道</strong>。 换句话说，我们只应该让一个通道唯一的发送者关闭此通道。</p>\n<ul>\n<li>情形一：M个接收者和一个发送者。发送者通过关闭用来传输数据的通道来传递发送结束信号</li>\n<li>情形二：一个接收者和N个发送者，此唯一接收者通过关闭一个额外的信号通道来通知发送者不要在发送数据了</li>\n<li>情形三：M个接收者和N个发送者。它们中的任何协程都可以让一个中间调解协程帮忙发出停止数据传送的信号</li>\n<li>情形四：“M个接收者和一个发送者”情形的一个变种：用来传输数据的通道的关闭请求由第三方发出</li>\n</ul>"},{"title":"go初始化函数-init","date":"2020-04-10T07:21:12.000Z","_content":"\n## init()函数是什么？\n\n `init()` 函数是隐式调用的，即会在包引入就执行，在编译的时候，已经确保 `init` 会在 `main`执行之前就被调用。\n\n<!-- more -->\n\n## 函数特点\n\n- 程序运行前，进行包的初始化工作\n- 每个包，每个go文件可以拥有多个init函数，<u>顺序不能保证从上到下执行</u>\n- 没有参数，不能被其他函数调用，是在<u>main函数执行前自动被调用</u>\n- 只会执行一次，即使这个包被多个包import\n\n## 调用顺序\n\ngo程序初始化执行顺序：import --> const --> var --> init()\n\n![osi](https://102er.github.io/uploads/init.png)\n\n1. 如果一个包导入了其他包，则首先初始化导入的包。\n2. 然后初始化当前包的常量。\n3. 接下来初始化当前包的变量。\n4. 最后，调用当前包的 `init()` 函数。\n","source":"_posts/go初始化函数-init.md","raw":"---\ntitle: go初始化函数-init\ndate: 2020-04-10 15:21:12\ncategories:\n    - GO\ntags:\n    - go开发\n---\n\n## init()函数是什么？\n\n `init()` 函数是隐式调用的，即会在包引入就执行，在编译的时候，已经确保 `init` 会在 `main`执行之前就被调用。\n\n<!-- more -->\n\n## 函数特点\n\n- 程序运行前，进行包的初始化工作\n- 每个包，每个go文件可以拥有多个init函数，<u>顺序不能保证从上到下执行</u>\n- 没有参数，不能被其他函数调用，是在<u>main函数执行前自动被调用</u>\n- 只会执行一次，即使这个包被多个包import\n\n## 调用顺序\n\ngo程序初始化执行顺序：import --> const --> var --> init()\n\n![osi](https://102er.github.io/uploads/init.png)\n\n1. 如果一个包导入了其他包，则首先初始化导入的包。\n2. 然后初始化当前包的常量。\n3. 接下来初始化当前包的变量。\n4. 最后，调用当前包的 `init()` 函数。\n","slug":"go初始化函数-init","published":1,"updated":"2021-12-16T05:41:04.961Z","_id":"ckx02mtjq000822peewju3eh4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"init-函数是什么？\"><a href=\"#init-函数是什么？\" class=\"headerlink\" title=\"init()函数是什么？\"></a>init()函数是什么？</h2><p> <code>init()</code> 函数是隐式调用的，即会在包引入就执行，在编译的时候，已经确保 <code>init</code> 会在 <code>main</code>执行之前就被调用。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"函数特点\"><a href=\"#函数特点\" class=\"headerlink\" title=\"函数特点\"></a>函数特点</h2><ul>\n<li>程序运行前，进行包的初始化工作</li>\n<li>每个包，每个go文件可以拥有多个init函数，<u>顺序不能保证从上到下执行</u></li>\n<li>没有参数，不能被其他函数调用，是在<u>main函数执行前自动被调用</u></li>\n<li>只会执行一次，即使这个包被多个包import</li>\n</ul>\n<h2 id=\"调用顺序\"><a href=\"#调用顺序\" class=\"headerlink\" title=\"调用顺序\"></a>调用顺序</h2><p>go程序初始化执行顺序：import –&gt; const –&gt; var –&gt; init()</p>\n<p><img src=\"https://102er.github.io/uploads/init.png\" alt=\"osi\"></p>\n<ol>\n<li>如果一个包导入了其他包，则首先初始化导入的包。</li>\n<li>然后初始化当前包的常量。</li>\n<li>接下来初始化当前包的变量。</li>\n<li>最后，调用当前包的 <code>init()</code> 函数。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"init-函数是什么？\"><a href=\"#init-函数是什么？\" class=\"headerlink\" title=\"init()函数是什么？\"></a>init()函数是什么？</h2><p> <code>init()</code> 函数是隐式调用的，即会在包引入就执行，在编译的时候，已经确保 <code>init</code> 会在 <code>main</code>执行之前就被调用。</p>","more":"<h2 id=\"函数特点\"><a href=\"#函数特点\" class=\"headerlink\" title=\"函数特点\"></a>函数特点</h2><ul>\n<li>程序运行前，进行包的初始化工作</li>\n<li>每个包，每个go文件可以拥有多个init函数，<u>顺序不能保证从上到下执行</u></li>\n<li>没有参数，不能被其他函数调用，是在<u>main函数执行前自动被调用</u></li>\n<li>只会执行一次，即使这个包被多个包import</li>\n</ul>\n<h2 id=\"调用顺序\"><a href=\"#调用顺序\" class=\"headerlink\" title=\"调用顺序\"></a>调用顺序</h2><p>go程序初始化执行顺序：import –&gt; const –&gt; var –&gt; init()</p>\n<p><img src=\"https://102er.github.io/uploads/init.png\" alt=\"osi\"></p>\n<ol>\n<li>如果一个包导入了其他包，则首先初始化导入的包。</li>\n<li>然后初始化当前包的常量。</li>\n<li>接下来初始化当前包的变量。</li>\n<li>最后，调用当前包的 <code>init()</code> 函数。</li>\n</ol>"},{"title":"服务部署nginx+keepalived","date":"2020-05-19T06:27:22.000Z","_content":"","source":"_posts/服务部署nginx+keepalived.md","raw":"---\ntitle: 服务部署nginx+keepalived\ndate: 2020-05-19 14:27:22\ntags:\n---\n","slug":"服务部署nginx+keepalived","published":1,"updated":"2021-12-10T07:35:33.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx02u3rq00005bpe0qfsf6uz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"go获取ip地理信息","date":"2021-06-14T15:30:16.000Z","_content":"\n## 概述\n\nMMDB即Maxmind DB，是一个设计用于存储IPv4和IPv6的数据信息的数据库，mmdb文件是一个二进制格式的文件，它使用一个[二分查找](https://so.csdn.net/so/search?from=pc_blog_highlight&q=二分查找)树加速IP信息的查询。ps：网上有一些免费但是更新不及时的ip库，如果用于公司商业化，建议购买ip库。\n\n## GO解析mmdb文件\n\nGO基于IP获取地理信息有两个库：\n\n- github.com/oschwald/maxminddb-golang 可以解析标准的mmdb文件\n- github.com/oschwald/geoip2-golang 提供了更多的api操作， 底层也是调用了maxminddb-golang包来做数据的解析，仅仅做了一层接口上的封装，和对应地理数据格式（企业、城市、国家、AnonymousIP、Domain、ISP）的定义。 但是只适用于[GeoLite2](http://dev.maxmind.com/geoip/geoip2/geolite2/) and [GeoIP2](http://www.maxmind.com/en/geolocation_landing) databases，有database type限制。\n\n我们使用的是第三方的ip库，只能通过maxminddb-golang解析数据，根据业务场景封装自己的api，具体实现如下：\n\n```go\ntype Enterprise struct {\n   City struct {\n      Names map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"city\"`\n   Continent struct {\n      Code  string            `maxminddb:\"code\"`\n      Names map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"continent\"`\n   Country struct {\n      IsoCode string            `maxminddb:\"iso_code\"`\n      Names   map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"country\"`\n   ISP struct {\n      Names map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"isp\"`\n   Location struct {\n      Latitude  float64 `maxminddb:\"latitude\"`\n      Longitude float64 `maxminddb:\"longitude\"`\n   } `maxminddb:\"location\"`\n   Province struct {\n      IsoCode string            `maxminddb:\"iso_code\"`\n      Names   map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"province\"`\n   Subdivisions []struct {\n      IsoCode string            `maxminddb:\"iso_code\"`\n      Names   map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"subdivisions\"`\n}\n\n//file = ipip.mmdb\nfunc NewGeoIp2(file string) (d *maxminddb.Reader, f func(), err error) {\n\t //打开.mmdb文件\n   d, err = maxminddb.Open(file)\n   if err != nil {\n      return\n   }\n   //程序结束关闭函数 闭包\n   f = func() {\n      if d != nil {\n         _ = d.Close()\n      }\n   }\n   return d, f, nil\n}\n\ntype GeoIpRepo struct {\n   ipDb *maxminddb.Reader\n}\n\nfunc NewGeoIpRepo(data *maxminddb.Reader) *GeoIpRepo {\n   return &GeoIpRepo{\n      ipDb: data,\n   }\n}\ntype GeoIP struct {\n\tCountry  string\n\tProvince string\n\tCity     string\n}\n\nfunc (g *GeoIpRepo) GetIpLocation(ctx context.Context, ip string) (r GeoIP, err error) {\n  //解析ip\n  ipV := net.ParseIP(ip)\n  //如果不能确定mmdb结构 可以使用map去接收数据 然后再定义结构体\n  //var record =make(map[string]interface{})\n   var record = Enterprise{}\n  //二分查找数据\n   err = g.ipDb.Lookup(ipV, &record)\n   if err != nil {\n      log.Warnf(\"ip %s get location failed,%v\", ip, err)\n      return\n   }\n  //转换\n   if c, ok := record.Country.Names[\"zh-CN\"]; ok {\n      r.Country = c\n   }\n   if c, ok := record.City.Names[\"zh-CN\"]; ok {\n      r.City = c\n   }\n   if c, ok := record.Province.Names[\"zh-CN\"]; ok {\n      r.Province = c\n   }\n   return\n}\n```\n","source":"_posts/go获取ip地理信息.md","raw":"---\ntitle: go获取ip地理信息\ndate: 2021-06-14 23:30:16\ncategories:\n    - GO\ntags:\n    - GO开发\n---\n\n## 概述\n\nMMDB即Maxmind DB，是一个设计用于存储IPv4和IPv6的数据信息的数据库，mmdb文件是一个二进制格式的文件，它使用一个[二分查找](https://so.csdn.net/so/search?from=pc_blog_highlight&q=二分查找)树加速IP信息的查询。ps：网上有一些免费但是更新不及时的ip库，如果用于公司商业化，建议购买ip库。\n\n## GO解析mmdb文件\n\nGO基于IP获取地理信息有两个库：\n\n- github.com/oschwald/maxminddb-golang 可以解析标准的mmdb文件\n- github.com/oschwald/geoip2-golang 提供了更多的api操作， 底层也是调用了maxminddb-golang包来做数据的解析，仅仅做了一层接口上的封装，和对应地理数据格式（企业、城市、国家、AnonymousIP、Domain、ISP）的定义。 但是只适用于[GeoLite2](http://dev.maxmind.com/geoip/geoip2/geolite2/) and [GeoIP2](http://www.maxmind.com/en/geolocation_landing) databases，有database type限制。\n\n我们使用的是第三方的ip库，只能通过maxminddb-golang解析数据，根据业务场景封装自己的api，具体实现如下：\n\n```go\ntype Enterprise struct {\n   City struct {\n      Names map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"city\"`\n   Continent struct {\n      Code  string            `maxminddb:\"code\"`\n      Names map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"continent\"`\n   Country struct {\n      IsoCode string            `maxminddb:\"iso_code\"`\n      Names   map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"country\"`\n   ISP struct {\n      Names map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"isp\"`\n   Location struct {\n      Latitude  float64 `maxminddb:\"latitude\"`\n      Longitude float64 `maxminddb:\"longitude\"`\n   } `maxminddb:\"location\"`\n   Province struct {\n      IsoCode string            `maxminddb:\"iso_code\"`\n      Names   map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"province\"`\n   Subdivisions []struct {\n      IsoCode string            `maxminddb:\"iso_code\"`\n      Names   map[string]string `maxminddb:\"names\"`\n   } `maxminddb:\"subdivisions\"`\n}\n\n//file = ipip.mmdb\nfunc NewGeoIp2(file string) (d *maxminddb.Reader, f func(), err error) {\n\t //打开.mmdb文件\n   d, err = maxminddb.Open(file)\n   if err != nil {\n      return\n   }\n   //程序结束关闭函数 闭包\n   f = func() {\n      if d != nil {\n         _ = d.Close()\n      }\n   }\n   return d, f, nil\n}\n\ntype GeoIpRepo struct {\n   ipDb *maxminddb.Reader\n}\n\nfunc NewGeoIpRepo(data *maxminddb.Reader) *GeoIpRepo {\n   return &GeoIpRepo{\n      ipDb: data,\n   }\n}\ntype GeoIP struct {\n\tCountry  string\n\tProvince string\n\tCity     string\n}\n\nfunc (g *GeoIpRepo) GetIpLocation(ctx context.Context, ip string) (r GeoIP, err error) {\n  //解析ip\n  ipV := net.ParseIP(ip)\n  //如果不能确定mmdb结构 可以使用map去接收数据 然后再定义结构体\n  //var record =make(map[string]interface{})\n   var record = Enterprise{}\n  //二分查找数据\n   err = g.ipDb.Lookup(ipV, &record)\n   if err != nil {\n      log.Warnf(\"ip %s get location failed,%v\", ip, err)\n      return\n   }\n  //转换\n   if c, ok := record.Country.Names[\"zh-CN\"]; ok {\n      r.Country = c\n   }\n   if c, ok := record.City.Names[\"zh-CN\"]; ok {\n      r.City = c\n   }\n   if c, ok := record.Province.Names[\"zh-CN\"]; ok {\n      r.Province = c\n   }\n   return\n}\n```\n","slug":"go获取ip地理信息","published":1,"updated":"2021-12-14T16:20:06.571Z","_id":"ckx6aouib00008xfyh4n5fb6t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>MMDB即Maxmind DB，是一个设计用于存储IPv4和IPv6的数据信息的数据库，mmdb文件是一个二进制格式的文件，它使用一个<a href=\"https://so.csdn.net/so/search?from=pc_blog_highlight&q=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\">二分查找</a>树加速IP信息的查询。ps：网上有一些免费但是更新不及时的ip库，如果用于公司商业化，建议购买ip库。</p>\n<h2 id=\"GO解析mmdb文件\"><a href=\"#GO解析mmdb文件\" class=\"headerlink\" title=\"GO解析mmdb文件\"></a>GO解析mmdb文件</h2><p>GO基于IP获取地理信息有两个库：</p>\n<ul>\n<li>github.com/oschwald/maxminddb-golang 可以解析标准的mmdb文件</li>\n<li>github.com/oschwald/geoip2-golang 提供了更多的api操作， 底层也是调用了maxminddb-golang包来做数据的解析，仅仅做了一层接口上的封装，和对应地理数据格式（企业、城市、国家、AnonymousIP、Domain、ISP）的定义。 但是只适用于<a href=\"http://dev.maxmind.com/geoip/geoip2/geolite2/\">GeoLite2</a> and <a href=\"http://www.maxmind.com/en/geolocation_landing\">GeoIP2</a> databases，有database type限制。</li>\n</ul>\n<p>我们使用的是第三方的ip库，只能通过maxminddb-golang解析数据，根据业务场景封装自己的api，具体实现如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Enterprise <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   City <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Names <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;city&quot;`</span></span><br><span class=\"line\">   Continent <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Code  <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;code&quot;`</span></span><br><span class=\"line\">      Names <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;continent&quot;`</span></span><br><span class=\"line\">   Country <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      IsoCode <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;iso_code&quot;`</span></span><br><span class=\"line\">      Names   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;country&quot;`</span></span><br><span class=\"line\">   ISP <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Names <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;isp&quot;`</span></span><br><span class=\"line\">   Location <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Latitude  <span class=\"keyword\">float64</span> <span class=\"string\">`maxminddb:&quot;latitude&quot;`</span></span><br><span class=\"line\">      Longitude <span class=\"keyword\">float64</span> <span class=\"string\">`maxminddb:&quot;longitude&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;location&quot;`</span></span><br><span class=\"line\">   Province <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      IsoCode <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;iso_code&quot;`</span></span><br><span class=\"line\">      Names   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;province&quot;`</span></span><br><span class=\"line\">   Subdivisions []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      IsoCode <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;iso_code&quot;`</span></span><br><span class=\"line\">      Names   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;subdivisions&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//file = ipip.mmdb</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewGeoIp2</span><span class=\"params\">(file <span class=\"keyword\">string</span>)</span> <span class=\"params\">(d *maxminddb.Reader, f <span class=\"keyword\">func</span>()</span>, <span class=\"title\">err</span> <span class=\"title\">error</span>)</span> &#123;</span><br><span class=\"line\">\t <span class=\"comment\">//打开.mmdb文件</span></span><br><span class=\"line\">   d, err = maxminddb.Open(file)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//程序结束关闭函数 闭包</span></span><br><span class=\"line\">   f = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> d != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         _ = d.Close()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> d, f, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> GeoIpRepo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   ipDb *maxminddb.Reader</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewGeoIpRepo</span><span class=\"params\">(data *maxminddb.Reader)</span> *<span class=\"title\">GeoIpRepo</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;GeoIpRepo&#123;</span><br><span class=\"line\">      ipDb: data,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> GeoIP <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tCountry  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tProvince <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity     <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *GeoIpRepo)</span> <span class=\"title\">GetIpLocation</span><span class=\"params\">(ctx context.Context, ip <span class=\"keyword\">string</span>)</span> <span class=\"params\">(r GeoIP, err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//解析ip</span></span><br><span class=\"line\">  ipV := net.ParseIP(ip)</span><br><span class=\"line\">  <span class=\"comment\">//如果不能确定mmdb结构 可以使用map去接收数据 然后再定义结构体</span></span><br><span class=\"line\">  <span class=\"comment\">//var record =make(map[string]interface&#123;&#125;)</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> record = Enterprise&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">//二分查找数据</span></span><br><span class=\"line\">   err = g.ipDb.Lookup(ipV, &amp;record)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Warnf(<span class=\"string\">&quot;ip %s get location failed,%v&quot;</span>, ip, err)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//转换</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> c, ok := record.Country.Names[<span class=\"string\">&quot;zh-CN&quot;</span>]; ok &#123;</span><br><span class=\"line\">      r.Country = c</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> c, ok := record.City.Names[<span class=\"string\">&quot;zh-CN&quot;</span>]; ok &#123;</span><br><span class=\"line\">      r.City = c</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> c, ok := record.Province.Names[<span class=\"string\">&quot;zh-CN&quot;</span>]; ok &#123;</span><br><span class=\"line\">      r.Province = c</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>MMDB即Maxmind DB，是一个设计用于存储IPv4和IPv6的数据信息的数据库，mmdb文件是一个二进制格式的文件，它使用一个<a href=\"https://so.csdn.net/so/search?from=pc_blog_highlight&q=%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\">二分查找</a>树加速IP信息的查询。ps：网上有一些免费但是更新不及时的ip库，如果用于公司商业化，建议购买ip库。</p>\n<h2 id=\"GO解析mmdb文件\"><a href=\"#GO解析mmdb文件\" class=\"headerlink\" title=\"GO解析mmdb文件\"></a>GO解析mmdb文件</h2><p>GO基于IP获取地理信息有两个库：</p>\n<ul>\n<li>github.com/oschwald/maxminddb-golang 可以解析标准的mmdb文件</li>\n<li>github.com/oschwald/geoip2-golang 提供了更多的api操作， 底层也是调用了maxminddb-golang包来做数据的解析，仅仅做了一层接口上的封装，和对应地理数据格式（企业、城市、国家、AnonymousIP、Domain、ISP）的定义。 但是只适用于<a href=\"http://dev.maxmind.com/geoip/geoip2/geolite2/\">GeoLite2</a> and <a href=\"http://www.maxmind.com/en/geolocation_landing\">GeoIP2</a> databases，有database type限制。</li>\n</ul>\n<p>我们使用的是第三方的ip库，只能通过maxminddb-golang解析数据，根据业务场景封装自己的api，具体实现如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Enterprise <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   City <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Names <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;city&quot;`</span></span><br><span class=\"line\">   Continent <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Code  <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;code&quot;`</span></span><br><span class=\"line\">      Names <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;continent&quot;`</span></span><br><span class=\"line\">   Country <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      IsoCode <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;iso_code&quot;`</span></span><br><span class=\"line\">      Names   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;country&quot;`</span></span><br><span class=\"line\">   ISP <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Names <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;isp&quot;`</span></span><br><span class=\"line\">   Location <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      Latitude  <span class=\"keyword\">float64</span> <span class=\"string\">`maxminddb:&quot;latitude&quot;`</span></span><br><span class=\"line\">      Longitude <span class=\"keyword\">float64</span> <span class=\"string\">`maxminddb:&quot;longitude&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;location&quot;`</span></span><br><span class=\"line\">   Province <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      IsoCode <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;iso_code&quot;`</span></span><br><span class=\"line\">      Names   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;province&quot;`</span></span><br><span class=\"line\">   Subdivisions []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">      IsoCode <span class=\"keyword\">string</span>            <span class=\"string\">`maxminddb:&quot;iso_code&quot;`</span></span><br><span class=\"line\">      Names   <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span> <span class=\"string\">`maxminddb:&quot;names&quot;`</span></span><br><span class=\"line\">   &#125; <span class=\"string\">`maxminddb:&quot;subdivisions&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//file = ipip.mmdb</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewGeoIp2</span><span class=\"params\">(file <span class=\"keyword\">string</span>)</span> <span class=\"params\">(d *maxminddb.Reader, f <span class=\"keyword\">func</span>()</span>, <span class=\"title\">err</span> <span class=\"title\">error</span>)</span> &#123;</span><br><span class=\"line\">\t <span class=\"comment\">//打开.mmdb文件</span></span><br><span class=\"line\">   d, err = maxminddb.Open(file)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//程序结束关闭函数 闭包</span></span><br><span class=\"line\">   f = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> d != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         _ = d.Close()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> d, f, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> GeoIpRepo <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   ipDb *maxminddb.Reader</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewGeoIpRepo</span><span class=\"params\">(data *maxminddb.Reader)</span> *<span class=\"title\">GeoIpRepo</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;GeoIpRepo&#123;</span><br><span class=\"line\">      ipDb: data,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> GeoIP <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tCountry  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tProvince <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity     <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *GeoIpRepo)</span> <span class=\"title\">GetIpLocation</span><span class=\"params\">(ctx context.Context, ip <span class=\"keyword\">string</span>)</span> <span class=\"params\">(r GeoIP, err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//解析ip</span></span><br><span class=\"line\">  ipV := net.ParseIP(ip)</span><br><span class=\"line\">  <span class=\"comment\">//如果不能确定mmdb结构 可以使用map去接收数据 然后再定义结构体</span></span><br><span class=\"line\">  <span class=\"comment\">//var record =make(map[string]interface&#123;&#125;)</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> record = Enterprise&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">//二分查找数据</span></span><br><span class=\"line\">   err = g.ipDb.Lookup(ipV, &amp;record)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Warnf(<span class=\"string\">&quot;ip %s get location failed,%v&quot;</span>, ip, err)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//转换</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> c, ok := record.Country.Names[<span class=\"string\">&quot;zh-CN&quot;</span>]; ok &#123;</span><br><span class=\"line\">      r.Country = c</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> c, ok := record.City.Names[<span class=\"string\">&quot;zh-CN&quot;</span>]; ok &#123;</span><br><span class=\"line\">      r.City = c</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> c, ok := record.Province.Names[<span class=\"string\">&quot;zh-CN&quot;</span>]; ok &#123;</span><br><span class=\"line\">      r.Province = c</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"go实现动态鉴权","date":"2021-10-15T12:16:32.000Z","_content":"","source":"_posts/go实现动态鉴权.md","raw":"---\ntitle: go实现动态鉴权\ndate: 2021-10-15 20:16:32\ncategories:\n    - GO\ntags:\n    - go开发\n---\n","slug":"go实现动态鉴权","published":1,"updated":"2021-12-14T16:18:59.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx6b9fxx00004xfy5u3c4x4e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"go参数校验","date":"2021-12-14T16:17:53.000Z","_content":"\ngo常用 [validator](https://github.com/go-playground/validator) 进行字段参数校验，其内置了很多常用的字段参数校验方法，同时支持注册自定义方案。v10版本有支持验证结果的国际化。内置的验证tag翻阅文档：[内置tag](https://github.com/go-playground/validator/blob/master/README.md) \n\n<!-- more -->\n\n### 基础功能\n\n注册器初始化：\n\n```go\npackage validator\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-playground/locales/en\"\n\t\"github.com/go-playground/locales/zh\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\ten_translations \"github.com/go-playground/validator/v10/translations/en\"\n\tzh_translations \"github.com/go-playground/validator/v10/translations/zh\"\n\t\"reflect\"\n\t\"strings\"\n)\n\nvar (\n\tvalid            *validator.Validate\n\tuni              *ut.UniversalTranslator\n\tenTrans, zhTrans ut.Translator\n)\n\nfunc init() {\n\tvar found bool\n\tvalid = validator.New() //验证器初始化\n\tent := en.New()\n\tuni = ut.New(ent, ent)\n\tenTrans, found = uni.GetTranslator(\"en\")\n\tif !found {\n\t\tpanic(\"en translation not found\")\n\t}\n\tzht := zh.New()\n\tuni = ut.New(zht, zht)\n\tzhTrans, found = uni.GetTranslator(\"zh\")\n\tif !found {\n\t\tpanic(\"zh translation not found\")\n\t}\n\t//注册英文翻译\n\terr := en_translations.RegisterDefaultTranslations(valid, enTrans)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t//注册中文翻译\n\terr = zh_translations.RegisterDefaultTranslations(valid, zhTrans)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t//自定义校验函数\n\t// ....\n}\n\n```\n\n验证方法：\n\n```go\n// ValidateStructData 验证方法\nfunc ValidateStructData(l string, dataStruct interface{}) error {\n   trans := enTrans\n   //前端传的字段 通过tag json获取\n   valid.RegisterTagNameFunc(func(fld reflect.StructField) string {\n      name := strings.SplitN(fld.Tag.Get(\"json\"), \",\", 2)[0]\n      if name == \"-\" {\n         return \"\"\n      }\n      return name\n   })\n   if l == \"zh\" {\n      trans = zhTrans\n      // 中文需要字段国际化 注册字段标签\n      valid.RegisterTagNameFunc(func(fld reflect.StructField) string {\n         name := fld.Tag.Get(\"label\")\n         return name\n      })\n   }\n   err := valid.Struct(dataStruct)\n   if err != nil {\n      if errs, ok := err.(validator.ValidationErrors); ok {\n         for _, fe := range errs {\n            errStr := fe.Translate(trans)\n            //可以根据平台的业务错误码进行封装业务错误\n            fmt.Println(errStr)\n         }\n      }\n      return err\n   }\n   return nil\n}\n//验证单个字段\nfunc ValidateVarData(f interface{}, tag, filed string) error {\n\ttrans := enTrans\n\terr := valid.Var(f, tag)\n\tif err != nil {\n\t\tif errs, ok := err.(validator.ValidationErrors); ok {\n\t\t\tfor _, fe := range errs {\n\t\t\t\terrStr := fe.Translate(trans)\n\t\t\t\t//可以根据平台的业务错误码进行封装业务错误\n\t\t\t\tfmt.Println(filed, errStr)\n\t\t\t}\n\t\t}\n\t}\n\treturn err\n}\n```\n\n测试用例：\n\n```go\nfunc TestValidateData(t *testing.T) {\n\ttype testStruct struct {\n\t\tName      string `json:\"name\" validate:\"required\" label:\"函数名\"`\n\t\tStartTime int    `json:\"start_time\" validate:\"required,gt=0\" label:\"开始时间\"`\n\t\tEndTime   int    `json:\"end_time\"`\n\t\tInterval  string `json:\"interval\" validate:\"required\" label:\"时间间隔\"`\n\t}\n\td:=testStruct{\n\t\tName: \"1\",\n\t}\n\terr := ValidateStructData(\"en\", d)\n\tif err != nil {\n\t\treturn\n\t}\n}\n```\n\n### 通过字段tag自定义函数\n","source":"_posts/go参数校验.md","raw":"---\ntitle: go参数校验\ndate: 2021-12-15 00:17:53\ncategories:\n    - GO\ntags:\n    - go开发\n---\n\ngo常用 [validator](https://github.com/go-playground/validator) 进行字段参数校验，其内置了很多常用的字段参数校验方法，同时支持注册自定义方案。v10版本有支持验证结果的国际化。内置的验证tag翻阅文档：[内置tag](https://github.com/go-playground/validator/blob/master/README.md) \n\n<!-- more -->\n\n### 基础功能\n\n注册器初始化：\n\n```go\npackage validator\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-playground/locales/en\"\n\t\"github.com/go-playground/locales/zh\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\ten_translations \"github.com/go-playground/validator/v10/translations/en\"\n\tzh_translations \"github.com/go-playground/validator/v10/translations/zh\"\n\t\"reflect\"\n\t\"strings\"\n)\n\nvar (\n\tvalid            *validator.Validate\n\tuni              *ut.UniversalTranslator\n\tenTrans, zhTrans ut.Translator\n)\n\nfunc init() {\n\tvar found bool\n\tvalid = validator.New() //验证器初始化\n\tent := en.New()\n\tuni = ut.New(ent, ent)\n\tenTrans, found = uni.GetTranslator(\"en\")\n\tif !found {\n\t\tpanic(\"en translation not found\")\n\t}\n\tzht := zh.New()\n\tuni = ut.New(zht, zht)\n\tzhTrans, found = uni.GetTranslator(\"zh\")\n\tif !found {\n\t\tpanic(\"zh translation not found\")\n\t}\n\t//注册英文翻译\n\terr := en_translations.RegisterDefaultTranslations(valid, enTrans)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t//注册中文翻译\n\terr = zh_translations.RegisterDefaultTranslations(valid, zhTrans)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t//自定义校验函数\n\t// ....\n}\n\n```\n\n验证方法：\n\n```go\n// ValidateStructData 验证方法\nfunc ValidateStructData(l string, dataStruct interface{}) error {\n   trans := enTrans\n   //前端传的字段 通过tag json获取\n   valid.RegisterTagNameFunc(func(fld reflect.StructField) string {\n      name := strings.SplitN(fld.Tag.Get(\"json\"), \",\", 2)[0]\n      if name == \"-\" {\n         return \"\"\n      }\n      return name\n   })\n   if l == \"zh\" {\n      trans = zhTrans\n      // 中文需要字段国际化 注册字段标签\n      valid.RegisterTagNameFunc(func(fld reflect.StructField) string {\n         name := fld.Tag.Get(\"label\")\n         return name\n      })\n   }\n   err := valid.Struct(dataStruct)\n   if err != nil {\n      if errs, ok := err.(validator.ValidationErrors); ok {\n         for _, fe := range errs {\n            errStr := fe.Translate(trans)\n            //可以根据平台的业务错误码进行封装业务错误\n            fmt.Println(errStr)\n         }\n      }\n      return err\n   }\n   return nil\n}\n//验证单个字段\nfunc ValidateVarData(f interface{}, tag, filed string) error {\n\ttrans := enTrans\n\terr := valid.Var(f, tag)\n\tif err != nil {\n\t\tif errs, ok := err.(validator.ValidationErrors); ok {\n\t\t\tfor _, fe := range errs {\n\t\t\t\terrStr := fe.Translate(trans)\n\t\t\t\t//可以根据平台的业务错误码进行封装业务错误\n\t\t\t\tfmt.Println(filed, errStr)\n\t\t\t}\n\t\t}\n\t}\n\treturn err\n}\n```\n\n测试用例：\n\n```go\nfunc TestValidateData(t *testing.T) {\n\ttype testStruct struct {\n\t\tName      string `json:\"name\" validate:\"required\" label:\"函数名\"`\n\t\tStartTime int    `json:\"start_time\" validate:\"required,gt=0\" label:\"开始时间\"`\n\t\tEndTime   int    `json:\"end_time\"`\n\t\tInterval  string `json:\"interval\" validate:\"required\" label:\"时间间隔\"`\n\t}\n\td:=testStruct{\n\t\tName: \"1\",\n\t}\n\terr := ValidateStructData(\"en\", d)\n\tif err != nil {\n\t\treturn\n\t}\n}\n```\n\n### 通过字段tag自定义函数\n","slug":"go参数校验","published":1,"updated":"2021-12-15T16:17:47.485Z","_id":"ckx6b9fxz00014xfyduajfq8c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>go常用 <a href=\"https://github.com/go-playground/validator\">validator</a> 进行字段参数校验，其内置了很多常用的字段参数校验方法，同时支持注册自定义方案。v10版本有支持验证结果的国际化。内置的验证tag翻阅文档：<a href=\"https://github.com/go-playground/validator/blob/master/README.md\">内置tag</a> </p>\n<span id=\"more\"></span>\n\n<h3 id=\"基础功能\"><a href=\"#基础功能\" class=\"headerlink\" title=\"基础功能\"></a>基础功能</h3><p>注册器初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> validator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-playground/locales/en&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-playground/locales/zh&quot;</span></span><br><span class=\"line\">\tut <span class=\"string\">&quot;github.com/go-playground/universal-translator&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-playground/validator/v10&quot;</span></span><br><span class=\"line\">\ten_translations <span class=\"string\">&quot;github.com/go-playground/validator/v10/translations/en&quot;</span></span><br><span class=\"line\">\tzh_translations <span class=\"string\">&quot;github.com/go-playground/validator/v10/translations/zh&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tvalid            *validator.Validate</span><br><span class=\"line\">\tuni              *ut.UniversalTranslator</span><br><span class=\"line\">\tenTrans, zhTrans ut.Translator</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> found <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tvalid = validator.New() <span class=\"comment\">//验证器初始化</span></span><br><span class=\"line\">\tent := en.New()</span><br><span class=\"line\">\tuni = ut.New(ent, ent)</span><br><span class=\"line\">\tenTrans, found = uni.GetTranslator(<span class=\"string\">&quot;en&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !found &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;en translation not found&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tzht := zh.New()</span><br><span class=\"line\">\tuni = ut.New(zht, zht)</span><br><span class=\"line\">\tzhTrans, found = uni.GetTranslator(<span class=\"string\">&quot;zh&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !found &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;zh translation not found&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//注册英文翻译</span></span><br><span class=\"line\">\terr := en_translations.RegisterDefaultTranslations(valid, enTrans)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//注册中文翻译</span></span><br><span class=\"line\">\terr = zh_translations.RegisterDefaultTranslations(valid, zhTrans)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//自定义校验函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>验证方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ValidateStructData 验证方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ValidateStructData</span><span class=\"params\">(l <span class=\"keyword\">string</span>, dataStruct <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">   trans := enTrans</span><br><span class=\"line\">   <span class=\"comment\">//前端传的字段 通过tag json获取</span></span><br><span class=\"line\">   valid.RegisterTagNameFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(fld reflect.StructField)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">      name := strings.SplitN(fld.Tag.Get(<span class=\"string\">&quot;json&quot;</span>), <span class=\"string\">&quot;,&quot;</span>, <span class=\"number\">2</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;-&quot;</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> name</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> l == <span class=\"string\">&quot;zh&quot;</span> &#123;</span><br><span class=\"line\">      trans = zhTrans</span><br><span class=\"line\">      <span class=\"comment\">// 中文需要字段国际化 注册字段标签</span></span><br><span class=\"line\">      valid.RegisterTagNameFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(fld reflect.StructField)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">         name := fld.Tag.Get(<span class=\"string\">&quot;label&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> name</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   err := valid.Struct(dataStruct)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> _, fe := <span class=\"keyword\">range</span> errs &#123;</span><br><span class=\"line\">            errStr := fe.Translate(trans)</span><br><span class=\"line\">            <span class=\"comment\">//可以根据平台的业务错误码进行封装业务错误</span></span><br><span class=\"line\">            fmt.Println(errStr)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//验证单个字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ValidateVarData</span><span class=\"params\">(f <span class=\"keyword\">interface</span>&#123;&#125;, tag, filed <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\ttrans := enTrans</span><br><span class=\"line\">\terr := valid.Var(f, tag)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, fe := <span class=\"keyword\">range</span> errs &#123;</span><br><span class=\"line\">\t\t\t\terrStr := fe.Translate(trans)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//可以根据平台的业务错误码进行封装业务错误</span></span><br><span class=\"line\">\t\t\t\tfmt.Println(filed, errStr)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试用例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestValidateData</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> testStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tName      <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot; validate:&quot;required&quot; label:&quot;函数名&quot;`</span></span><br><span class=\"line\">\t\tStartTime <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;start_time&quot; validate:&quot;required,gt=0&quot; label:&quot;开始时间&quot;`</span></span><br><span class=\"line\">\t\tEndTime   <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;end_time&quot;`</span></span><br><span class=\"line\">\t\tInterval  <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;interval&quot; validate:&quot;required&quot; label:&quot;时间间隔&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td:=testStruct&#123;</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := ValidateStructData(<span class=\"string\">&quot;en&quot;</span>, d)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过字段tag自定义函数\"><a href=\"#通过字段tag自定义函数\" class=\"headerlink\" title=\"通过字段tag自定义函数\"></a>通过字段tag自定义函数</h3>","site":{"data":{}},"excerpt":"<p>go常用 <a href=\"https://github.com/go-playground/validator\">validator</a> 进行字段参数校验，其内置了很多常用的字段参数校验方法，同时支持注册自定义方案。v10版本有支持验证结果的国际化。内置的验证tag翻阅文档：<a href=\"https://github.com/go-playground/validator/blob/master/README.md\">内置tag</a> </p>","more":"<h3 id=\"基础功能\"><a href=\"#基础功能\" class=\"headerlink\" title=\"基础功能\"></a>基础功能</h3><p>注册器初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> validator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-playground/locales/en&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-playground/locales/zh&quot;</span></span><br><span class=\"line\">\tut <span class=\"string\">&quot;github.com/go-playground/universal-translator&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/go-playground/validator/v10&quot;</span></span><br><span class=\"line\">\ten_translations <span class=\"string\">&quot;github.com/go-playground/validator/v10/translations/en&quot;</span></span><br><span class=\"line\">\tzh_translations <span class=\"string\">&quot;github.com/go-playground/validator/v10/translations/zh&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tvalid            *validator.Validate</span><br><span class=\"line\">\tuni              *ut.UniversalTranslator</span><br><span class=\"line\">\tenTrans, zhTrans ut.Translator</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> found <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tvalid = validator.New() <span class=\"comment\">//验证器初始化</span></span><br><span class=\"line\">\tent := en.New()</span><br><span class=\"line\">\tuni = ut.New(ent, ent)</span><br><span class=\"line\">\tenTrans, found = uni.GetTranslator(<span class=\"string\">&quot;en&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !found &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;en translation not found&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tzht := zh.New()</span><br><span class=\"line\">\tuni = ut.New(zht, zht)</span><br><span class=\"line\">\tzhTrans, found = uni.GetTranslator(<span class=\"string\">&quot;zh&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !found &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;zh translation not found&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//注册英文翻译</span></span><br><span class=\"line\">\terr := en_translations.RegisterDefaultTranslations(valid, enTrans)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//注册中文翻译</span></span><br><span class=\"line\">\terr = zh_translations.RegisterDefaultTranslations(valid, zhTrans)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//自定义校验函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>验证方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ValidateStructData 验证方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ValidateStructData</span><span class=\"params\">(l <span class=\"keyword\">string</span>, dataStruct <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">   trans := enTrans</span><br><span class=\"line\">   <span class=\"comment\">//前端传的字段 通过tag json获取</span></span><br><span class=\"line\">   valid.RegisterTagNameFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(fld reflect.StructField)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">      name := strings.SplitN(fld.Tag.Get(<span class=\"string\">&quot;json&quot;</span>), <span class=\"string\">&quot;,&quot;</span>, <span class=\"number\">2</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;-&quot;</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> name</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> l == <span class=\"string\">&quot;zh&quot;</span> &#123;</span><br><span class=\"line\">      trans = zhTrans</span><br><span class=\"line\">      <span class=\"comment\">// 中文需要字段国际化 注册字段标签</span></span><br><span class=\"line\">      valid.RegisterTagNameFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(fld reflect.StructField)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">         name := fld.Tag.Get(<span class=\"string\">&quot;label&quot;</span>)</span><br><span class=\"line\">         <span class=\"keyword\">return</span> name</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   err := valid.Struct(dataStruct)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> _, fe := <span class=\"keyword\">range</span> errs &#123;</span><br><span class=\"line\">            errStr := fe.Translate(trans)</span><br><span class=\"line\">            <span class=\"comment\">//可以根据平台的业务错误码进行封装业务错误</span></span><br><span class=\"line\">            fmt.Println(errStr)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//验证单个字段</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ValidateVarData</span><span class=\"params\">(f <span class=\"keyword\">interface</span>&#123;&#125;, tag, filed <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\ttrans := enTrans</span><br><span class=\"line\">\terr := valid.Var(f, tag)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, fe := <span class=\"keyword\">range</span> errs &#123;</span><br><span class=\"line\">\t\t\t\terrStr := fe.Translate(trans)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//可以根据平台的业务错误码进行封装业务错误</span></span><br><span class=\"line\">\t\t\t\tfmt.Println(filed, errStr)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试用例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestValidateData</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> testStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\tName      <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot; validate:&quot;required&quot; label:&quot;函数名&quot;`</span></span><br><span class=\"line\">\t\tStartTime <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;start_time&quot; validate:&quot;required,gt=0&quot; label:&quot;开始时间&quot;`</span></span><br><span class=\"line\">\t\tEndTime   <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;end_time&quot;`</span></span><br><span class=\"line\">\t\tInterval  <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;interval&quot; validate:&quot;required&quot; label:&quot;时间间隔&quot;`</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td:=testStruct&#123;</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := ValidateStructData(<span class=\"string\">&quot;en&quot;</span>, d)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过字段tag自定义函数\"><a href=\"#通过字段tag自定义函数\" class=\"headerlink\" title=\"通过字段tag自定义函数\"></a>通过字段tag自定义函数</h3>"},{"title":"go国际化实现","date":"2021-09-15T13:08:02.000Z","_content":"","source":"_posts/go实现国际化.md","raw":"---\ntitle: go国际化实现\ndate: 2021-09-15 21:08:02\ncategories:\n    - GO\ntags:\n    - go开发\n---\n","slug":"go实现国际化","published":1,"updated":"2021-12-14T16:19:44.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx6b9fy000034xfy2qxx8os3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"go协程池实现","date":"2021-12-14T16:23:59.000Z","_content":"","source":"_posts/go协程池实现.md","raw":"---\ntitle: go协程池实现\ndate: 2021-12-15 00:23:59\ntags:\n---\n","slug":"go协程池实现","published":1,"updated":"2021-12-14T16:23:59.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx7pmzmb0000mefy7bkc0em5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"go查询Elastic","date":"2021-07-15T16:18:28.000Z","_content":"\ngo操作elasticsearch有两个常用的库：\n\n- github.com/elastic/go-elasticsearch 官方提供的操作库\n- github.com/olivere/elastic 第三方包，封装了更多的高级api\n\n两个库都可以使用，出于我们操作场景不复杂，用来查询数据，我们使用官方库封装了一个api，:(官方库说是性能比较好\n\n<!-- more -->\n\n### 初始化客户端\n\n```go\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\tes \"github.com/elastic/go-elasticsearch/v7\"\n\t\"github.com/tidwall/gjson\"\n\t\"io/ioutil\"\n\t\"time\"\n)\n// Elastic 基于官方库封装\ntype Elastic struct {\n   es  *es.Client\n}\n\n// M+A构建复杂的查询条件\ntype M = map[string]interface{}\ntype A = []interface{}\n\nfunc NewElasticClient(conf *conf.Data, logger log.Logger) (*Elastic, error) {\n   var err error\n   client, err := es.NewClient(es.Config{\n      Addresses: conf.Es.Clusters, //es集群 支持多个host\n      Username:  conf.Es.User, //用户名\n      Password:  conf.Es.Password, //密码\n   })\n   ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n   defer cancel()\n  //es信息\n   res, err := client.Info(client.Info.WithContext(ctx))\n   if err != nil {\n      return nil, err\n   }\n   defer res.Body.Close()\n   if res.IsError() {\n      return nil, err\n   }\n\n   b, err := ioutil.ReadAll(res.Body)\n   if err != nil {\n      return nil, err\n   }\n   \tfmt.Println(\"es version: \", gjson.ParseBytes(b).Get(\"version.number\").String())\n   return &Elastic{\n      es:  client,\n      log: l,\n   }, err\n}\n```\n\n### 封装API\n\n查询函数\n\n```go\nfunc (c *Elastic) Search(ctx context.Context, index []string, query M) ([]byte, error) {\n   var buf bytes.Buffer\n   if err := json.NewEncoder(&buf).Encode(query); err != nil {\n      return nil, err\n   }\n   // b, _ := json.MarshalIndent(query, \" \", \" \")\n   //fmt.Println(string(b))\n   res, err := c.es.Search(\n      c.es.Search.WithContext(ctx),\n      c.es.Search.WithIndex(index...),\n      c.es.Search.WithBody(&buf),\n      c.es.Search.WithTrackTotalHits(true),\n      c.es.Search.WithPretty(),\n   )\n   if err != nil {\n      return nil, err\n   }\n\n   defer res.Body.Close()\n   if res.IsError() {\n      var e map[string]interface{}\n      if err := json.NewDecoder(res.Body).Decode(&e); err != nil {\n         return nil, fmt.Errorf(\"error parsing the response body: %s\", err)\n      } else {\n         errB, _ := json.Marshal(e)\n         fmt.Println(string(errB))\n         return nil, fmt.Errorf(\"[%s] %s: %s\", res.Status(), e[\"error\"].(map[string]interface{})[\"type\"],\n            e[\"error\"].(map[string]interface{})[\"reason\"])\n      }\n   } else {\n      b, err := ioutil.ReadAll(res.Body)\n      if err != nil {\n         return nil, err\n      }\n      return b, nil\n   }\n}\n```\n\n测试用例\n\n```go\nfunc TestNewEsClientOld(t *testing.T) {\n   info, err := NewElasticClient(&conf.Data{\n      Es: &conf.ES{\n         Clusters: []string{\"xxxxx\"},\n         User:     \"xxxxx\",\n         Password: \"xxxxxx\",\n      },\n   }, l)\n   if err != nil {\n      t.Log(err)\n   }\n   var query = M{\n      \"size\": 0,\n      \"from\": 1,\n      \"sort\": A{\n         M{\"timestamp\": M{\"order\": \"desc\"}},\n      },\n      \"query\": M{\n         \"bool\": M{\n            \"filter\": M{\n               \"bool\": M{\n                  \"must\": A{\n                     M{\"term\": M{\"xxx\": \"407904ce-c279-1d0e-fbeb-d12ccfafa827\"}},\n                     M{\"term\": M{\"xxx\": \"775e6349-dbd2-6d8e-6b9c-58818f770574\"}},\n                     M{\"range\": M{\"timestamp\": M{\n                        \"gte\": time.Now().AddDate(0, 0, -1),\n                        \"lte\": time.Now(),\n                     }}},\n                  },\n               },\n            },\n         },\n      },\n   }\n   search, err := info.Search(context.Background(),[]string{\"xxxx\"},query)\n   if err != nil {\n      return\n   }\n   if err != nil {\n      return\n   }\n   fmt.Println(search)\n}\n```\n","source":"_posts/go查询Elastic.md","raw":"---\ntitle: go查询Elastic\ndate: 2021-07-16 00:18:28\ncategories:\n    - GO\ntags:\n    - go开发\n---\n\ngo操作elasticsearch有两个常用的库：\n\n- github.com/elastic/go-elasticsearch 官方提供的操作库\n- github.com/olivere/elastic 第三方包，封装了更多的高级api\n\n两个库都可以使用，出于我们操作场景不复杂，用来查询数据，我们使用官方库封装了一个api，:(官方库说是性能比较好\n\n<!-- more -->\n\n### 初始化客户端\n\n```go\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\tes \"github.com/elastic/go-elasticsearch/v7\"\n\t\"github.com/tidwall/gjson\"\n\t\"io/ioutil\"\n\t\"time\"\n)\n// Elastic 基于官方库封装\ntype Elastic struct {\n   es  *es.Client\n}\n\n// M+A构建复杂的查询条件\ntype M = map[string]interface{}\ntype A = []interface{}\n\nfunc NewElasticClient(conf *conf.Data, logger log.Logger) (*Elastic, error) {\n   var err error\n   client, err := es.NewClient(es.Config{\n      Addresses: conf.Es.Clusters, //es集群 支持多个host\n      Username:  conf.Es.User, //用户名\n      Password:  conf.Es.Password, //密码\n   })\n   ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n   defer cancel()\n  //es信息\n   res, err := client.Info(client.Info.WithContext(ctx))\n   if err != nil {\n      return nil, err\n   }\n   defer res.Body.Close()\n   if res.IsError() {\n      return nil, err\n   }\n\n   b, err := ioutil.ReadAll(res.Body)\n   if err != nil {\n      return nil, err\n   }\n   \tfmt.Println(\"es version: \", gjson.ParseBytes(b).Get(\"version.number\").String())\n   return &Elastic{\n      es:  client,\n      log: l,\n   }, err\n}\n```\n\n### 封装API\n\n查询函数\n\n```go\nfunc (c *Elastic) Search(ctx context.Context, index []string, query M) ([]byte, error) {\n   var buf bytes.Buffer\n   if err := json.NewEncoder(&buf).Encode(query); err != nil {\n      return nil, err\n   }\n   // b, _ := json.MarshalIndent(query, \" \", \" \")\n   //fmt.Println(string(b))\n   res, err := c.es.Search(\n      c.es.Search.WithContext(ctx),\n      c.es.Search.WithIndex(index...),\n      c.es.Search.WithBody(&buf),\n      c.es.Search.WithTrackTotalHits(true),\n      c.es.Search.WithPretty(),\n   )\n   if err != nil {\n      return nil, err\n   }\n\n   defer res.Body.Close()\n   if res.IsError() {\n      var e map[string]interface{}\n      if err := json.NewDecoder(res.Body).Decode(&e); err != nil {\n         return nil, fmt.Errorf(\"error parsing the response body: %s\", err)\n      } else {\n         errB, _ := json.Marshal(e)\n         fmt.Println(string(errB))\n         return nil, fmt.Errorf(\"[%s] %s: %s\", res.Status(), e[\"error\"].(map[string]interface{})[\"type\"],\n            e[\"error\"].(map[string]interface{})[\"reason\"])\n      }\n   } else {\n      b, err := ioutil.ReadAll(res.Body)\n      if err != nil {\n         return nil, err\n      }\n      return b, nil\n   }\n}\n```\n\n测试用例\n\n```go\nfunc TestNewEsClientOld(t *testing.T) {\n   info, err := NewElasticClient(&conf.Data{\n      Es: &conf.ES{\n         Clusters: []string{\"xxxxx\"},\n         User:     \"xxxxx\",\n         Password: \"xxxxxx\",\n      },\n   }, l)\n   if err != nil {\n      t.Log(err)\n   }\n   var query = M{\n      \"size\": 0,\n      \"from\": 1,\n      \"sort\": A{\n         M{\"timestamp\": M{\"order\": \"desc\"}},\n      },\n      \"query\": M{\n         \"bool\": M{\n            \"filter\": M{\n               \"bool\": M{\n                  \"must\": A{\n                     M{\"term\": M{\"xxx\": \"407904ce-c279-1d0e-fbeb-d12ccfafa827\"}},\n                     M{\"term\": M{\"xxx\": \"775e6349-dbd2-6d8e-6b9c-58818f770574\"}},\n                     M{\"range\": M{\"timestamp\": M{\n                        \"gte\": time.Now().AddDate(0, 0, -1),\n                        \"lte\": time.Now(),\n                     }}},\n                  },\n               },\n            },\n         },\n      },\n   }\n   search, err := info.Search(context.Background(),[]string{\"xxxx\"},query)\n   if err != nil {\n      return\n   }\n   if err != nil {\n      return\n   }\n   fmt.Println(search)\n}\n```\n","slug":"go查询Elastic","published":1,"updated":"2021-12-16T02:48:32.073Z","_id":"ckx7qouwo0001nafy6m9w5185","comments":1,"layout":"post","photos":[],"link":"","content":"<p>go操作elasticsearch有两个常用的库：</p>\n<ul>\n<li>github.com/elastic/go-elasticsearch 官方提供的操作库</li>\n<li>github.com/olivere/elastic 第三方包，封装了更多的高级api</li>\n</ul>\n<p>两个库都可以使用，出于我们操作场景不复杂，用来查询数据，我们使用官方库封装了一个api，:(官方库说是性能比较好</p>\n<span id=\"more\"></span>\n\n<h3 id=\"初始化客户端\"><a href=\"#初始化客户端\" class=\"headerlink\" title=\"初始化客户端\"></a>初始化客户端</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\tes <span class=\"string\">&quot;github.com/elastic/go-elasticsearch/v7&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io/ioutil&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// Elastic 基于官方库封装</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Elastic <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   es  *es.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// M+A构建复杂的查询条件</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> M = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewElasticClient</span><span class=\"params\">(conf *conf.Data, logger log.Logger)</span> <span class=\"params\">(*Elastic, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> err error</span><br><span class=\"line\">   client, err := es.NewClient(es.Config&#123;</span><br><span class=\"line\">      Addresses: conf.Es.Clusters, <span class=\"comment\">//es集群 支持多个host</span></span><br><span class=\"line\">      Username:  conf.Es.User, <span class=\"comment\">//用户名</span></span><br><span class=\"line\">      Password:  conf.Es.Password, <span class=\"comment\">//密码</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">30</span>*time.Second)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">  <span class=\"comment\">//es信息</span></span><br><span class=\"line\">   res, err := client.Info(client.Info.WithContext(ctx))</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> res.Body.Close()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> res.IsError() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   b, err := ioutil.ReadAll(res.Body)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   \tfmt.Println(<span class=\"string\">&quot;es version: &quot;</span>, gjson.ParseBytes(b).Get(<span class=\"string\">&quot;version.number&quot;</span>).String())</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;Elastic&#123;</span><br><span class=\"line\">      es:  client,</span><br><span class=\"line\">      log: l,</span><br><span class=\"line\">   &#125;, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装API\"><a href=\"#封装API\" class=\"headerlink\" title=\"封装API\"></a>封装API</h3><p>查询函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Elastic)</span> <span class=\"title\">Search</span><span class=\"params\">(ctx context.Context, index []<span class=\"keyword\">string</span>, query M)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> buf bytes.Buffer</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := json.NewEncoder(&amp;buf).Encode(query); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// b, _ := json.MarshalIndent(query, &quot; &quot;, &quot; &quot;)</span></span><br><span class=\"line\">   <span class=\"comment\">//fmt.Println(string(b))</span></span><br><span class=\"line\">   res, err := c.es.Search(</span><br><span class=\"line\">      c.es.Search.WithContext(ctx),</span><br><span class=\"line\">      c.es.Search.WithIndex(index...),</span><br><span class=\"line\">      c.es.Search.WithBody(&amp;buf),</span><br><span class=\"line\">      c.es.Search.WithTrackTotalHits(<span class=\"literal\">true</span>),</span><br><span class=\"line\">      c.es.Search.WithPretty(),</span><br><span class=\"line\">   )</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">defer</span> res.Body.Close()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> res.IsError() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> e <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := json.NewDecoder(res.Body).Decode(&amp;e); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;error parsing the response body: %s&quot;</span>, err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         errB, _ := json.Marshal(e)</span><br><span class=\"line\">         fmt.Println(<span class=\"keyword\">string</span>(errB))</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;[%s] %s: %s&quot;</span>, res.Status(), e[<span class=\"string\">&quot;error&quot;</span>].(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)[<span class=\"string\">&quot;type&quot;</span>],</span><br><span class=\"line\">            e[<span class=\"string\">&quot;error&quot;</span>].(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)[<span class=\"string\">&quot;reason&quot;</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      b, err := ioutil.ReadAll(res.Body)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> b, <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试用例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestNewEsClientOld</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">   info, err := NewElasticClient(&amp;conf.Data&#123;</span><br><span class=\"line\">      Es: &amp;conf.ES&#123;</span><br><span class=\"line\">         Clusters: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;xxxxx&quot;</span>&#125;,</span><br><span class=\"line\">         User:     <span class=\"string\">&quot;xxxxx&quot;</span>,</span><br><span class=\"line\">         Password: <span class=\"string\">&quot;xxxxxx&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   &#125;, l)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      t.Log(err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> query = M&#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;from&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;sort&quot;</span>: A&#123;</span><br><span class=\"line\">         M&#123;<span class=\"string\">&quot;timestamp&quot;</span>: M&#123;<span class=\"string\">&quot;order&quot;</span>: <span class=\"string\">&quot;desc&quot;</span>&#125;&#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;query&quot;</span>: M&#123;</span><br><span class=\"line\">         <span class=\"string\">&quot;bool&quot;</span>: M&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;filter&quot;</span>: M&#123;</span><br><span class=\"line\">               <span class=\"string\">&quot;bool&quot;</span>: M&#123;</span><br><span class=\"line\">                  <span class=\"string\">&quot;must&quot;</span>: A&#123;</span><br><span class=\"line\">                     M&#123;<span class=\"string\">&quot;term&quot;</span>: M&#123;<span class=\"string\">&quot;xxx&quot;</span>: <span class=\"string\">&quot;407904ce-c279-1d0e-fbeb-d12ccfafa827&quot;</span>&#125;&#125;,</span><br><span class=\"line\">                     M&#123;<span class=\"string\">&quot;term&quot;</span>: M&#123;<span class=\"string\">&quot;xxx&quot;</span>: <span class=\"string\">&quot;775e6349-dbd2-6d8e-6b9c-58818f770574&quot;</span>&#125;&#125;,</span><br><span class=\"line\">                     M&#123;<span class=\"string\">&quot;range&quot;</span>: M&#123;<span class=\"string\">&quot;timestamp&quot;</span>: M&#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;gte&quot;</span>: time.Now().AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>),</span><br><span class=\"line\">                        <span class=\"string\">&quot;lte&quot;</span>: time.Now(),</span><br><span class=\"line\">                     &#125;&#125;&#125;,</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   search, err := info.Search(context.Background(),[]<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;xxxx&quot;</span>&#125;,query)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Println(search)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>go操作elasticsearch有两个常用的库：</p>\n<ul>\n<li>github.com/elastic/go-elasticsearch 官方提供的操作库</li>\n<li>github.com/olivere/elastic 第三方包，封装了更多的高级api</li>\n</ul>\n<p>两个库都可以使用，出于我们操作场景不复杂，用来查询数据，我们使用官方库封装了一个api，:(官方库说是性能比较好</p>","more":"<h3 id=\"初始化客户端\"><a href=\"#初始化客户端\" class=\"headerlink\" title=\"初始化客户端\"></a>初始化客户端</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\tes <span class=\"string\">&quot;github.com/elastic/go-elasticsearch/v7&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io/ioutil&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// Elastic 基于官方库封装</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Elastic <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   es  *es.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// M+A构建复杂的查询条件</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> M = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> A = []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewElasticClient</span><span class=\"params\">(conf *conf.Data, logger log.Logger)</span> <span class=\"params\">(*Elastic, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> err error</span><br><span class=\"line\">   client, err := es.NewClient(es.Config&#123;</span><br><span class=\"line\">      Addresses: conf.Es.Clusters, <span class=\"comment\">//es集群 支持多个host</span></span><br><span class=\"line\">      Username:  conf.Es.User, <span class=\"comment\">//用户名</span></span><br><span class=\"line\">      Password:  conf.Es.Password, <span class=\"comment\">//密码</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">30</span>*time.Second)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">  <span class=\"comment\">//es信息</span></span><br><span class=\"line\">   res, err := client.Info(client.Info.WithContext(ctx))</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> res.Body.Close()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> res.IsError() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   b, err := ioutil.ReadAll(res.Body)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   \tfmt.Println(<span class=\"string\">&quot;es version: &quot;</span>, gjson.ParseBytes(b).Get(<span class=\"string\">&quot;version.number&quot;</span>).String())</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;Elastic&#123;</span><br><span class=\"line\">      es:  client,</span><br><span class=\"line\">      log: l,</span><br><span class=\"line\">   &#125;, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装API\"><a href=\"#封装API\" class=\"headerlink\" title=\"封装API\"></a>封装API</h3><p>查询函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Elastic)</span> <span class=\"title\">Search</span><span class=\"params\">(ctx context.Context, index []<span class=\"keyword\">string</span>, query M)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> buf bytes.Buffer</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := json.NewEncoder(&amp;buf).Encode(query); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// b, _ := json.MarshalIndent(query, &quot; &quot;, &quot; &quot;)</span></span><br><span class=\"line\">   <span class=\"comment\">//fmt.Println(string(b))</span></span><br><span class=\"line\">   res, err := c.es.Search(</span><br><span class=\"line\">      c.es.Search.WithContext(ctx),</span><br><span class=\"line\">      c.es.Search.WithIndex(index...),</span><br><span class=\"line\">      c.es.Search.WithBody(&amp;buf),</span><br><span class=\"line\">      c.es.Search.WithTrackTotalHits(<span class=\"literal\">true</span>),</span><br><span class=\"line\">      c.es.Search.WithPretty(),</span><br><span class=\"line\">   )</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">defer</span> res.Body.Close()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> res.IsError() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> e <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := json.NewDecoder(res.Body).Decode(&amp;e); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;error parsing the response body: %s&quot;</span>, err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         errB, _ := json.Marshal(e)</span><br><span class=\"line\">         fmt.Println(<span class=\"keyword\">string</span>(errB))</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;[%s] %s: %s&quot;</span>, res.Status(), e[<span class=\"string\">&quot;error&quot;</span>].(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)[<span class=\"string\">&quot;type&quot;</span>],</span><br><span class=\"line\">            e[<span class=\"string\">&quot;error&quot;</span>].(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)[<span class=\"string\">&quot;reason&quot;</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      b, err := ioutil.ReadAll(res.Body)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> b, <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试用例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestNewEsClientOld</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">   info, err := NewElasticClient(&amp;conf.Data&#123;</span><br><span class=\"line\">      Es: &amp;conf.ES&#123;</span><br><span class=\"line\">         Clusters: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;xxxxx&quot;</span>&#125;,</span><br><span class=\"line\">         User:     <span class=\"string\">&quot;xxxxx&quot;</span>,</span><br><span class=\"line\">         Password: <span class=\"string\">&quot;xxxxxx&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   &#125;, l)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      t.Log(err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> query = M&#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;size&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;from&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;sort&quot;</span>: A&#123;</span><br><span class=\"line\">         M&#123;<span class=\"string\">&quot;timestamp&quot;</span>: M&#123;<span class=\"string\">&quot;order&quot;</span>: <span class=\"string\">&quot;desc&quot;</span>&#125;&#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;query&quot;</span>: M&#123;</span><br><span class=\"line\">         <span class=\"string\">&quot;bool&quot;</span>: M&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;filter&quot;</span>: M&#123;</span><br><span class=\"line\">               <span class=\"string\">&quot;bool&quot;</span>: M&#123;</span><br><span class=\"line\">                  <span class=\"string\">&quot;must&quot;</span>: A&#123;</span><br><span class=\"line\">                     M&#123;<span class=\"string\">&quot;term&quot;</span>: M&#123;<span class=\"string\">&quot;xxx&quot;</span>: <span class=\"string\">&quot;407904ce-c279-1d0e-fbeb-d12ccfafa827&quot;</span>&#125;&#125;,</span><br><span class=\"line\">                     M&#123;<span class=\"string\">&quot;term&quot;</span>: M&#123;<span class=\"string\">&quot;xxx&quot;</span>: <span class=\"string\">&quot;775e6349-dbd2-6d8e-6b9c-58818f770574&quot;</span>&#125;&#125;,</span><br><span class=\"line\">                     M&#123;<span class=\"string\">&quot;range&quot;</span>: M&#123;<span class=\"string\">&quot;timestamp&quot;</span>: M&#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;gte&quot;</span>: time.Now().AddDate(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>),</span><br><span class=\"line\">                        <span class=\"string\">&quot;lte&quot;</span>: time.Now(),</span><br><span class=\"line\">                     &#125;&#125;&#125;,</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   search, err := info.Search(context.Background(),[]<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;xxxx&quot;</span>&#125;,query)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Println(search)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwxm1x3f0000t3fy36xkhjwd","category_id":"ckwxo5sdr0000bzfy0kev29uu","_id":"ckwxo5sdt0003bzfyaoxx5j1a"},{"post_id":"ckwybtj6o00021lpe5oo92u81","category_id":"ckwx55est0009twpe9u0agt58","_id":"ckwybtj6p00061lpe22xcda3x"},{"post_id":"ckwx55esu000ftwpebotg8dwa","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckwybtj6q000a1lpe3rj0hrrt"},{"post_id":"ckwx55ess0007twpe68gyc4h7","category_id":"ckwybtj6p00041lpe5aevdhg9","_id":"ckwybtj6q000b1lpe73i09r6z"},{"post_id":"ckwybtj6n00011lpeb933gny4","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckwybtj6q000e1lpe0rn1aouu"},{"post_id":"ckx02mtjp000322pebilpfv3g","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx02mtjq000a22pe83jx5i3z"},{"post_id":"ckx02mtjp000522pebhtq35c1","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx02mtjq000c22peehzp7jqq"},{"post_id":"ckx02mtjq000822peewju3eh4","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx02mtjq000e22pebaon4ys2"},{"post_id":"ckx6aouib00008xfyh4n5fb6t","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx6aouie00028xfy7ra06qnu"},{"post_id":"ckx6b9fxx00004xfy5u3c4x4e","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx6b9fy100054xfyhmp42bkn"},{"post_id":"ckx6b9fxz00014xfyduajfq8c","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx6b9fy100074xfy8qbt9nui"},{"post_id":"ckx6b9fy000034xfy2qxx8os3","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx6b9fy100084xfybzlrd5m4"},{"post_id":"ckx7qouwo0001nafy6m9w5185","category_id":"ckwybtj6l00001lpe32ve3ff4","_id":"ckx7qouwp0003nafy77jw0c6d"}],"PostTag":[{"post_id":"ckwx55ess0007twpe68gyc4h7","tag_id":"ckwx55esx000qtwpe1dwh2hri","_id":"ckwx55esx000ttwpe1ulfbtud"},{"post_id":"ckwxni7tp0002ymfy2kfb20a9","tag_id":"ckwxni7tq0003ymfy76bibhpn","_id":"ckwxni7ts0004ymfy57xg0vkf"},{"post_id":"ckwxm1x3f0000t3fy36xkhjwd","tag_id":"ckwxo5sdt0001bzfy0kh43xxn","_id":"ckwxo5sdt0002bzfy80he5qk5"},{"post_id":"ckwybtj6o00021lpe5oo92u81","tag_id":"ckwx55esw000mtwpe3a7dgfwr","_id":"ckwybtj6p00051lpegclwd1eq"},{"post_id":"ckwybtj6n00011lpeb933gny4","tag_id":"ckwybtj6p00071lpe295tfng1","_id":"ckwybtj6q000d1lpeg7ao6i9y"},{"post_id":"ckx02mtjo000122pe0wnoho5e","tag_id":"ckwx55esr0004twpegrs13aob","_id":"ckx02mtjp000422ped1vnbbm4"},{"post_id":"ckx02mtjp000322pebilpfv3g","tag_id":"ckx02ckak0000wgpehvvi7kwy","_id":"ckx02mtjq000722pe4r8s7loo"},{"post_id":"ckx02mtjp000322pebilpfv3g","tag_id":"ckwx55ess0008twpe9zved4yx","_id":"ckx02mtjq000922pediec6zv8"},{"post_id":"ckx02mtjp000522pebhtq35c1","tag_id":"ckwx55esr0004twpegrs13aob","_id":"ckx02mtjq000b22pehf4g9epa"},{"post_id":"ckx02mtjp000522pebhtq35c1","tag_id":"ckwx55ess0008twpe9zved4yx","_id":"ckx02mtjq000d22pe7a6waxr3"},{"post_id":"ckx02mtjq000822peewju3eh4","tag_id":"ckx02ckan0004wgpe471i0sux","_id":"ckx02mtjq000f22peemvsh835"},{"post_id":"ckx6aouib00008xfyh4n5fb6t","tag_id":"ckx02ckak0000wgpehvvi7kwy","_id":"ckx6aouie00018xfy9h13hxcf"},{"post_id":"ckx6b9fxx00004xfy5u3c4x4e","tag_id":"ckx02ckan0004wgpe471i0sux","_id":"ckx6b9fy000024xfycjytehit"},{"post_id":"ckx6b9fxz00014xfyduajfq8c","tag_id":"ckx02ckan0004wgpe471i0sux","_id":"ckx6b9fy000044xfy648rcbgh"},{"post_id":"ckx6b9fy000034xfy2qxx8os3","tag_id":"ckx02ckan0004wgpe471i0sux","_id":"ckx6b9fy100064xfy1hjrhuso"},{"post_id":"ckx7qouwo0001nafy6m9w5185","tag_id":"ckx02ckan0004wgpe471i0sux","_id":"ckx7qouwp0002nafy29d2ajgh"}],"Tag":[{"name":"GO","_id":"ckwx55esr0004twpegrs13aob"},{"name":"并发编程","_id":"ckwx55ess0008twpe9zved4yx"},{"name":"TCP","_id":"ckwx55esw000mtwpe3a7dgfwr"},{"name":"git","_id":"ckwx55esx000qtwpe1dwh2hri"},{"name":"redis","_id":"ckwxni7tq0003ymfy76bibhpn"},{"name":"mysql","_id":"ckwxo5sdt0001bzfy0kh43xxn"},{"name":"go","_id":"ckwybtj6o00031lpe250a9uah"},{"name":"认证","_id":"ckwybtj6p00071lpe295tfng1"},{"name":"GO开发","_id":"ckx02ckak0000wgpehvvi7kwy"},{"name":"go开发","_id":"ckx02ckan0004wgpe471i0sux"}]}}